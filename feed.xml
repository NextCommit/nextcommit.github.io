<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Next Commit</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="https://nextcommit.github.io/feed.xml" />
<link rel="alternate" type="text/html" href="https://nextcommit.github.io" />
<updated>2016-03-15T14:51:29+01:00</updated>
<id>https://nextcommit.github.io/</id>
<author>
  <name>Next Commit</name>
  <uri>https://nextcommit.github.io/</uri>
  <email>miguelfcunha@gmail.com</email>
</author>


<entry>
  <title type="html"><![CDATA[GPU e o Browser]]></title>
  <link rel="alternate" type="text/html" href="https://nextcommit.github.io/blog/gpu-e-o-browser/" />
  <id>https://nextcommit.github.io/blog/gpu-e-o-browser</id>
  <published>2016-03-15 00:00:00 +0100</published>
  <updated>2016-03-15 00:00:00 +0100</updated>
  <author>
    <name>Gabriel Candal</name>
    <uri>https://nextcommit.github.io</uri>
    <email>gabrielcandal@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Nós, developers, temos tendência a ficar obececados (e bem) com a performance do software que escrevemos. O problema é quando essa obcessão é mal direcionada e nos preocupamos mais com as ferramentas que usamos do que com tudo o resto.&lt;/p&gt;

&lt;p&gt;Um bom exemplo disto é o desenvolvimento front-end para a web. Quem é que nunca ouviu &lt;em&gt;“Hey vocês ainda não usam React? É muito mais rápido! Usa uma cena chamada DOM virtual que é muito mais rápido!”&lt;/em&gt; seguido de &lt;em&gt;“Oh isso é old news, nós já estamos a migrar para Mercury, que nos benchmarks é 5x mais rápido que isso…“&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;Estas histórias multiplicam-se por muitas áreas, não é exclusivo da web. Outro exemplo clássico é sacrificar a clareza do código em prol da performance:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Em vez de:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Mesmo que o segundo caso seja mais conciso, menos propício a erros (a variável element está limitada no scope ao estritamente necessário) e tenha exatamente o mesmo desempenho na esmagadora maioria dos casos, porque os compiladores são desenvolvidos o suficiente para otimizar casos tão triviais.&lt;/p&gt;

&lt;p&gt;Podia continuar a dar exemplos, mas já chega de desabafar. O que queria mostrar hoje é uma técnica extremamente simples mas que pode ter um impacto enorme na performance de um cliente numa página web.&lt;/p&gt;

&lt;p&gt;Sem querer entrar em muito detalhe sobre o ciclo de render de um browser (ou seja, como reage a alterações no DOM, podem ler mais sobre isso &lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/rendering/#the-pixel-pipeline&quot;&gt;aqui&lt;/a&gt;), o importante é saber que os browsers constroem (recorrendo à DOM Tree e à CSS Tree) uma coisa chamada Render Tree, que contém Render Objects que por sua vez estão organizados em RenderLayers que são desenhados sobre Graphical Layers (&lt;a href=&quot;https://www.chromium.org/developers/design-documents/gpu-accelerated-compositing-in-chrome&quot;&gt;detalhes&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/eLlgjXLQbW-c2JWxfK0VxXbmV2-D90ub4dXYMblpHdyVyM_6a12JdfQKiokPrTcB-2UOn284A3teHK4P0e9Xlmm5uSxA7utj6Pggf7T-J7uxwc8iBPopZ7vtcCRYGvtteQ&quot; alt=&quot;Render Tree&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Confuso? Não é muito relevante, disto tudo só interessa retirar que podemos aumentar a performance evitando que uma porção grande da página tenha que ser re-desenhada (é esta a lógica da nova onde de frameworks front-end que usam o render engine do React ou o virtual-dom). O ideal, em termos de velocidade, era dar a cada Render Object o seu próprio Graphics/Composite Layer, mas isso não é feito por razões de poupança de VRAM (memória da placa gráfica).&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;//jsfiddle.net/Ltn0a263/1/embedded/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Podemos ver tudo isto a acontecer &lt;a href=&quot;https://jsfiddle.net/Ltn0a263/1/&quot;&gt;&lt;strong&gt;neste exemplo&lt;/strong&gt;&lt;/a&gt;. Antes de usarem, tenham cuidado com o número de imagens que usam (podem modificar no Javascript), porque vos pode bloquear a tab. Para verem o que se está a passar devem também ligar o contador de FPS do brower e fazer com que mostre as várias layers (&lt;a href=&quot;https://developer.chrome.com/devtools/docs/rendering-settings&quot;&gt;como fazer isso&lt;/a&gt;). Depois:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Carregar no ícone para começar a animação. Nada fluído, certo?&lt;/li&gt;
  &lt;li&gt;Descomentem o &lt;code&gt;transform&lt;/code&gt; em &lt;code&gt;image&lt;/code&gt; e carreguem em ‘Run’. Vêm que apareceu um quadrado à volta do ícone? Isso é um Graphical Layer novo. Notem que o uso da memória da GPU também disparou, isto é porque todas as texturas são carregadas para lá, em vez de ficarem na RAM para serem usadas pelo CPU. Experimentem carregar no ícone e vejam como está muito mais fluído, com FPSs muito superiores.&lt;/li&gt;
  &lt;li&gt;Voltem a comentar o que descomentaram, e desta vez descomentem as animações em &lt;code&gt;.image.animated&lt;/code&gt;. Vêm que o novo layer só aparece quando carregam no ícone, enquanto com o método anterior estava sempre lá? A razão para isso é que, com transformações 2D, esse layer só é criado on-the-fly.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Há outro tipo de operações que forçam a criaçam deste layer à parte:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Elementos &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; e &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/filter&quot;&gt;Filtros CSS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Elementos que sobrepõe (via &lt;code&gt;z-index&lt;/code&gt;) a algum que esteja num composite layer próprio&lt;/li&gt;
  &lt;li&gt;Transformações 3D&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.chromium.org/developers/design-documents/gpu-accelerated-compositing-in-chrome&quot;&gt;etc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No fundo, é um trade-off entre velocidade e memória. Outro problema que pode surgir é com o &lt;a href=&quot;http://keithclark.co.uk/articles/gpu-text-rendering-in-webkit/&quot;&gt;aspeto do tipo de letra&lt;/a&gt;, já que a GPU e o CPU não o fazem da mesma forma. Um truque engraçado para forçar a que um elemento seja renderizado na GPU é acrescentar-lhe, como fizemos no exemplo, algo como &lt;code&gt;transform: translateZ(0)&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://nextcommit.github.io/blog/gpu-e-o-browser/&quot;&gt;GPU e o Browser&lt;/a&gt; was originally published by Next Commit at &lt;a href=&quot;https://nextcommit.github.io&quot;&gt;Next Commit&lt;/a&gt; on 15 março 2016.&lt;/p&gt;

  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Programar & Documentar]]></title>
  <link rel="alternate" type="text/html" href="https://nextcommit.github.io/blog/progamar-e-documentar/" />
  <id>https://nextcommit.github.io/blog/progamar-e-documentar</id>
  <published>2016-03-13 21:54:00 +0100</published>
  <updated>2016-03-13 21:54:00 +0100</updated>
  <author>
    <name>Miguel Cunha</name>
    <uri>https://nextcommit.github.io</uri>
    <email>miguelfcunha@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;No âmbito da minha dissertação tenho trabalhado com uma biblioteca &lt;em&gt;open source&lt;/em&gt; que, infelizmente, está mal documentada.
E eu sou grande apologista de projetos &lt;em&gt;open source&lt;/em&gt;, mas deixemos isso para um outro &lt;em&gt;commit&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Tal como as metodologias &lt;em&gt;agile&lt;/em&gt; nos ensinaram, existe sempre um &lt;em&gt;trade-off&lt;/em&gt; entre &lt;em&gt;working software&lt;/em&gt; e
&lt;em&gt;documented software&lt;/em&gt;. Ainda assim, há cuidados básicos que devemos ter para deixar o código tão legível e claro
quanto possível. Neste &lt;em&gt;commit&lt;/em&gt; foquemo-nos nas assinaturas das funções.&lt;/p&gt;

&lt;p&gt;Imaginemos a função &lt;code&gt;pause&lt;/code&gt;, que coloca a &lt;em&gt;thread&lt;/em&gt; onde é executada em pausa. Se essa função estiver definida como&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeToPause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;existirão, naturalmente, dúvidas sobre qual a unidade de tempo a ser passada como argumento. Segundos? Milisegundos?
Minutos?&lt;/p&gt;

&lt;p&gt;Apesar de já ser mais aceitável termos algo como &lt;code&gt;void pause(int timeToPauseInSeconds);&lt;/code&gt;, porque não declará-la como&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Time&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeToPause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;ou com os tipos &lt;code&gt;std::chrono::duration&lt;/code&gt;&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; introduzidos no C++11, que pretendem terminar com esta ambiguidade:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;milliseconds&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeToPause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Agora imaginemos que queremos aumetar a granularidade das unidades, de forma a conseguir pausar ao nível do nanosegundo.
Neste caso, passaríamos a ter&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nanoseconds&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeToPause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Agora imaginem que precisamos de outra função para parar ao nível do microsegundo… Ok, acho que já entenderam onde quero
chegar. Obviamente podemos escrever esta função de uma forma mais genérica&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeToPause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this_thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeToPause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// ... outras ações...
&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;pause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// mau: não sabemos as unidades
&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;pause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;milliseconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// bom
&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;pause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// bom: possível a partir do C++14
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;que, já agora, utiliza um template da biblioteca de suporte a &lt;em&gt;&lt;a href=&quot;http://en.cppreference.com/w/cpp/thread&quot;&gt;threads&lt;/a&gt;&lt;/em&gt;
também introduzida no C++11. Esta combinação permite interoperabilidade com o tipo de granularidade de tempo que deserjarmos.&lt;/p&gt;

&lt;p&gt;Reparem como introduzi outra alteração no código que ainda não discutimos. Decidi passar o valor por referência e, como
tal, utilizei a &lt;em&gt;keyword&lt;/em&gt; &lt;code&gt;const&lt;/code&gt; como garantia de que o valor não irá ser alterado. Isto não só me dá segurança de que
irei obter um erro em &lt;em&gt;compile-time&lt;/em&gt; se a regra for violada, como também serve de boa documentação. De que forma? Sigam
o raciocínio com um novo exemplo.&lt;/p&gt;

&lt;p&gt;Imaginemos a função &lt;code&gt;countToTen&lt;/code&gt;, que recebe um inteiro por referência e conta, a partir desse valor, até 10:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;countToTen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Sem vermos a documentação (se existir), ou o código, não temos garantia nenhuma de que o valor de &lt;code&gt;number&lt;/code&gt; se mantém
inalterado, como na implementação que se segue&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;countToTen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Assim como também podemos ter uma implementação que não muda o valor da variável&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;countToTen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Independentemente da implementação, a simples inclusão da &lt;em&gt;keyword&lt;/em&gt; &lt;code&gt;const&lt;/code&gt; não só melhora a qualidade e robustez do
código, como também dá garantias a futuros utilizadores da vossa função que o valor variável que passam como argumento
não irá ser alterado. Assim, em operações que necessitem de receber um valor por referência, a
&lt;em&gt;keyword&lt;/em&gt; &lt;code&gt;const&lt;/code&gt; é vossa amiga!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;countToTen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;E sim, eu sei que a questão, neste caso, fica resolvida se passarmos por valor, mas imaginemos que o gasto computacional
para copiar um inteiro é relevante o suficiente para passarmos apenas uma referência.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;http://en.cppreference.com/w/cpp/chrono &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;https://nextcommit.github.io/blog/progamar-e-documentar/&quot;&gt;Programar &amp; Documentar&lt;/a&gt; was originally published by Next Commit at &lt;a href=&quot;https://nextcommit.github.io&quot;&gt;Next Commit&lt;/a&gt; on 13 março 2016.&lt;/p&gt;

  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Automação 1]]></title>
  <link rel="alternate" type="text/html" href="https://nextcommit.github.io/blog/python-e-automacao-1/" />
  <id>https://nextcommit.github.io/blog/python-e-automacao-1</id>
  <published>2016-03-10 00:00:00 +0000</published>
  <updated>2016-03-10 00:00:00 +0000</updated>
  <author>
    <name>Gabriel Candal</name>
    <uri>https://nextcommit.github.io</uri>
    <email>gabrielcandal@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Como falei &lt;a href=&quot;/blog/git-checkout-gcandal/&quot;&gt;num post anterior&lt;/a&gt;, automatizar&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; tem benefícios, principalmente se estivermos a falar para pessoas que já sabem programar e que por isso não têm que passar pela aprendizagem do que pode ou não ser automatizado (apesar de que normalmente a resposta é: tudo).&lt;/p&gt;

&lt;p&gt;De todas as linguagens que podíamos usar para este tipo de tarefa, a minha preferida (e reparem que não disse a melhor, porque isso não existe) é &lt;strong&gt;Python&lt;/strong&gt;&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. Porquê?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;É &lt;strong&gt;dinamicamente tipada&lt;/strong&gt;. Ou seja, uma mesma variável pode ter mais do que um tipo durante o seu ciclo de vida. Era uma string e passou a ser um inteiro? Paciência, vive com isso, porque o compilador não se vai queixar. Sacrifica verificação da validade do programa em benifício do tempo de escrita, o que &lt;strong&gt;para scripts&lt;/strong&gt; me parece um bom tradeoff. Se começas a sentir-te perdido pela falta de tipos provavelmente o teu programa cresceu demais, por isso lembra-te:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://www.azquotes.com/picture-quotes/quote-this-is-the-unix-philosophy-write-programs-that-do-one-thing-and-do-it-well-write-programs-douglas-mcilroy-81-95-07.jpg&quot; alt=&quot;UNIX philosophy&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;É fácil de aprender, não só por ser bastante alto nível e expressiva, ou pela sintaxe simples, mas também pelas biblitoecas de interface intuitiva. Queres ler um ficheiro de texto com nomes de alunos de duas cadeiras e imprimi-los no formato certo sem duplicados?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;print [name.capitalize() for name in set(input()) ^ set(input())]&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bibliotecas para tudo e mais alguma coisa! Manipulação de imagem (pillow), vídeo (moviepy, que serve como camada superior ao ffmpeg), HTTP (requests ou Mechanize, que “emula” um browser até certo ponto), extração de informação de páginas HTML (BeautifulSoup) ou compressão (zipfile). Como navegar numa estrutura de diretórios e rodar todos os PNGs 45º?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;[PIL.Image.open(file).rotate(45).save() for file in glob.glob(&#39;/target/**/**/*.png&#39;)]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Tudo isto pode, e deve, ser usado para melhoria constante dos processos internos das empresas (ou pessoais, se forem como &lt;a href=&quot;https://www.jitbit.com/alexblog/249-now-thats-what-i-call-a-hacker/&quot;&gt;o administrador de sistemas que tirava cafés por SSH&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Há uma tarefa rotineria que a equipa de design tem que fazer, como renomear os ficheiros exportados pelo Photoshop, centrar imagens verticalmente e depois comprimir tudo? Python.&lt;/p&gt;

&lt;p&gt;A malta de gestão todos os dias verifica se as taxas de câmbio estão dentro de um certo limite do que está definido? Python. Exemplo:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;mechanize&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bs4&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;country&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mechanize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;country&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s/change_country/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;country&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bs4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BeautifulSoup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;html.parser&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;meta_tag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;meta&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;property&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;og:price:amount&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meta_tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;country&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;PT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;base_price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get__price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rated_price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;country&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;country&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rated_price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base_price&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.05&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;our_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authority_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;aye&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ney&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;E há muitos outros exemplos.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.doppnet.com/gfx/2013-11-09-automation-meme.jpg&quot; alt=&quot;automate all the things&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Em termos de Software Engineering propriamente dito, este conceito está na origem do movimento de DevOps, que tenta aplicar esta coisas ao ciclo de desenvolvimento de software até chegar a um ponto de continuous deployment, em que cada entrada de código nova no repositório faz com que uma série de scripts de automação (testes, análise estática, deployment, …) sejam executados. Podem perguntar mais sobre isto ao &lt;a href=&quot;http://carlosmtx.github.io&quot;&gt;Carlos Teixeira&lt;/a&gt;, que está a fazer uma tese em “Towards DevOps Practices and Patterns from the Portuguese Startup Scene”.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;automatizar ~= scripting &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;Há várias implementações da linguagem e para todos os gostos: CPython (a implementação de referência), PyPy (inclui um compilador JIT para melhorias na performance em runtime), Jython (JVM) ou IronPython (.NET). Num contexto de automação, sempre que falar em Python, estou-me a referir a CPython. A vantagem em relação a outras implementações é ter um tempo de startup geralmente mais curto e vir instalado por defeito na maioria das distribuições Linux (por exemplo, o Ubuntu depende bastante da linguagem). &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;https://nextcommit.github.io/blog/python-e-automacao-1/&quot;&gt;Automação 1&lt;/a&gt; was originally published by Next Commit at &lt;a href=&quot;https://nextcommit.github.io&quot;&gt;Next Commit&lt;/a&gt; on 10 março 2016.&lt;/p&gt;

  </content>
</entry>


<entry>
  <title type="html"><![CDATA[git checkout -b gcandal]]></title>
  <link rel="alternate" type="text/html" href="https://nextcommit.github.io/blog/git-checkout-gcandal/" />
  <id>https://nextcommit.github.io/blog/git-checkout-gcandal</id>
  <published>2016-03-06 00:00:00 +0000</published>
  <updated>2016-03-06 00:00:00 +0000</updated>
  <author>
    <name>Gabriel Candal</name>
    <uri>https://nextcommit.github.io</uri>
    <email>gabrielcandal@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Para o meu primeiro post queria, antes de continuar, pedir que tivesses alguma paciência e tentasses ler o máximo possível sem fechar a tab
ou os olhos. Mesmo que no fim fiques a pensar “Ok, mais valia ter ido ler um tutorial de GraphQL, não aprendi nada” não desistas do
&lt;em&gt;Next Commit&lt;/em&gt;, prometo que vamos melhorar…&lt;/p&gt;

&lt;p&gt;Passando ao que interessa, neste post vou falar um bocado da &lt;strong&gt;importância de automatizar tarefas&lt;/strong&gt; (pessoal de design/gestão/marketing/…, isto
também é para vocês!), que serve de introdução a uma série de posts mais técnicos sobre como temos tirado proveito disso na &lt;a href=&quot;http://ripe.tech&quot;&gt;Ripe&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Porque é que automatizamos tarefas? A resposta parece ser óbvia: para poupar tempo. Mas então, porque é que não automatizamos &lt;strong&gt;todos&lt;/strong&gt;
os processos manuais? Toda a gente gosta de ter mais tempo livre. Também parece mais ou menos óbvio: o esforço pode não compensar.&lt;/p&gt;

&lt;p&gt;A verdade é que, muitas vezes, automatizar acaba por demorar mais tempo do que aquilo que tínhamos previsto.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://imgs.xkcd.com/comics/automation.png&quot; alt=&quot;automation xkcd&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Aquilo de que te queria convencer é que… isto é mentira! 😄&lt;/p&gt;

&lt;p&gt;Ou melhor, não é toda a verdade. A automação deve ser vista como um investimento e por isso normalmente quando eu penso em gastar 1 hora
a escrever um programa para me poupar de um trabalho manual qualquer é porque repito esse trabalho vezes suficientes para, antes de chegar
à reforma, recuperar essa hora perdida. Esta visão é simplista e deixa de lado uma parte importante: a energia mental que poupamos em
não estar sempre a fazer a mesma tarefa rotineira.&lt;/p&gt;

&lt;p&gt;Podes pensar nisto como uma espécia de &lt;a href=&quot;http://cdn.igeeksblog.com/wp-content/uploads/Vinsic-Tulip-iPhone-Power-Bank.jpg&quot;&gt;powerbank&lt;/a&gt;:
mesmo que não tenha um rendimento de 100% (ou seja, nunca consegues tirar de lá tanta energia como a que meteste), podes guardar
energia quando tens oportunidade para isso para quando te fizer falta está disponível. O princípio para a automação é o mesmo,
podes nunca recuperar aquela hora que perdeste a transformar uma tarefa de 5 minutos numa de 1 clique, mas se calhar evitaste
ter que interromper um trabalho qualquer que estavas a fazer e que exigia concentração por causa desses 5 minutos e aí o ganho
de produtividade compensa a hora que investiste.&lt;/p&gt;

&lt;p&gt;Isto também aumenta o tempo de resposta das empresas. Se estás num período mais calmo e te sentes com energia e motivação para dedicar
a este tipo de exercício, ou simplesmente queres procrastinar sem peso na consciência, podes aproveitar para guardar energia no powerbank
para, durante uma altura crítica, não teres que fazer um esforço mental para te desviar da tarefa importante em que estavas a trabalhar,
o que ia prejudicar a tua produtividade.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Concretamente&lt;/strong&gt;, que automações são essas? Pode ser usar um serviço externo como o &lt;a href=&quot;http://mailchimp.com/&quot;&gt;mailchimp&lt;/a&gt; para campanhas
de marketing digital ou o &lt;a href=&quot;https://ifttt.com&quot;&gt;IFTTT&lt;/a&gt; para coisas mais pessoais
(&lt;a href=&quot;https://ifttt.com/recipes/99068-save-new-email-attachments-to-google-drive&quot;&gt;automaticamente gravar todos os anexos de email que recebes na Drive&lt;/a&gt;
ou &lt;a href=&quot;https://ifttt.com/recipes/191854-share-a-message-and-your-location-with-a-group&quot;&gt;com 1 clique enviar a tua localização para um grupo de amigos&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;No outro dia a minha namorada, que está a escrever uma dissertação em ortodontia, tinha que saber quantos anos, meses e dias
se tinham passado entre a data de nascimento de um paciente e a última radiografia. Estando eu em informática, sempre pensei que ela estivesse a fazer
isso com algumas fórmulas de Excel, mas não fiquei chocado quando vi que estava a fazer tudo à mão, já que ela nunca teve grande formação nesse assunto
e a base de dados tinha as datas num formato esquisito. O que me chocou foi quando descobri que a base de dados tinha &lt;strong&gt;centenas&lt;/strong&gt; de entradas.
Uma coisa que à mão ia demorar HORAS, passado 15 minutos e algumas pesquisas no Google ficou totalmente automática (obrigado Métodos Numéricos 💙).&lt;/p&gt;

&lt;p&gt;No caso de alguém de saúde é natural que isto aconteça, já que não têm um &lt;em&gt;mindset&lt;/em&gt; de constante melhoria de processo, muito menos de programação, por
isso é compreensível. O problema é que isto também acontece em muitas áreas de engenharia, mesmo em informática.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s-media-cache-ak0.pinimg.com/564x/71/27/68/712768b8edde95f6c128aa9a3f7d8865.jpg&quot; alt=&quot;common sense is not so common&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Amigo, é só estares atento! Se durante o teu dia há alguma coisa que achas que podia ser feita por um macaco com treino suficiente (i.e.: é repetitivo)
então muito provavelmente podes automatizar isso! É só estares atento. Se achas que isso acontece, mas não sabes exatamente como resolver, podes
enviar e-mail ao Miguel Cunha (é só veres os contactos num dos posts dele) e ele terá todo o gosto em ajudar-te &lt;em&gt;pro bono&lt;/em&gt; 😄.&lt;/p&gt;

&lt;p&gt;Termino com uma resolução de ano novo atrasada: escrever 1 post de 15 em 15 dias. É essa a meta e por cada dia que me atrase como uma bolacha maria sem
usar os dentes. O próximo post será sobre como temos adotado filosofia na &lt;a href=&quot;ripe&quot;&gt;Ripe&lt;/a&gt; sob a forma de DevOps: porque o fizemos, o que fizemos
e como fizemos.&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;https://nextcommit.github.io/blog/git-checkout-gcandal/&quot;&gt;git checkout -b gcandal&lt;/a&gt; was originally published by Next Commit at &lt;a href=&quot;https://nextcommit.github.io&quot;&gt;Next Commit&lt;/a&gt; on  6 março 2016.&lt;/p&gt;

  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Diz-me Como Geres e Dir-te-ei Quem És]]></title>
  <link rel="alternate" type="text/html" href="https://nextcommit.github.io/blog/diz-me-como-geres-e-dir-te-ei-quem-es/" />
  <id>https://nextcommit.github.io/blog/diz-me-como-geres-e-dir-te-ei-quem-es</id>
  <published>2016-02-27 16:00:48 +0000</published>
  <updated>2016-02-27 16:00:48 +0000</updated>
  <author>
    <name>Miguel Cunha</name>
    <uri>https://nextcommit.github.io</uri>
    <email>miguelfcunha@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Caro &lt;em&gt;Scrum Master&lt;/em&gt;/&lt;em&gt;Team Manager&lt;/em&gt;/&lt;em&gt;Team Leader&lt;/em&gt;/&lt;em&gt;Sprint Master&lt;/em&gt;,&lt;/p&gt;

&lt;p&gt;Antes de mais deixa-me dizer que te respeito. Imenso. Mas há que pôr os pontos nos &lt;em&gt;is&lt;/em&gt;: o respeito mútuo faz parte da
convivência entre seres humanos; mas lá porque te respeito, não significa que te deva submissão total ou me reduza à minha
pobre, triste e diminuta insignificância quando falas, opinias ou simplesmente mandas uns &lt;em&gt;bitaites&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Compreendo que o teu trabalho, e os frutos que dele resultam, tenham um sabor agridoce: passas esquecido nas grandes
vitórias e és espezinhado quando as coisas dão para o torto. Não duvido que gostes do que fazes e acredito que os
&lt;em&gt;zums-zums&lt;/em&gt; que ouves no corredor, questionando “&lt;em&gt;o que é que ele faz? Qual é o papel dele? É que eu ainda não percebi
muito bem…&lt;/em&gt;”, te incomodem.&lt;/p&gt;

&lt;p&gt;Agora, quando as pessoas que geres têm &lt;strong&gt;medo&lt;/strong&gt; de fazer o que quer que seja, algo está mal. Quando a maneira mais fácil
da tua equipa conseguir ter a tua atenção é através de um e-mail, algo está mal. Quando perco a motivação para o projeto
porque não confias em mim (nem na equipa) e nas nossas capacidades para o levar a bom porto, não estás a fazer o teu trabalho.&lt;/p&gt;

&lt;p&gt;Eu compreendo que os teus 10 ou 15 anos de experiência te permitam antever problemas que um “caloiro” como eu, com pouca ou
nenhuma experiência, teria dificuldades em ver. Mas pedires para escalonar um projeto de vários meses em tarefas de 4 horas,
não estás a reduzir riscos e muito menos a antecipar problemas. Estás a ser retardado. Só isso.&lt;/p&gt;

&lt;p&gt;Se não confias em nós para realizar o projeto, então diz-nos isso. Com &lt;strong&gt;transparência&lt;/strong&gt;. E se não confias em nós para realizar
o projeto, garanto-te que também não confiámos em ti para o gerir. Tal como o respeito, a confiança (ou a falta dela) também
é mútua. E ambas se cultivam. Mas leva tempo… e paciência.&lt;/p&gt;

&lt;p&gt;Transmitir &lt;strong&gt;confiança&lt;/strong&gt; não é gritar connosco durante meia hora e no fim exclamar “&lt;em&gt;vocês conseguem!&lt;/em&gt;”. Se queres transmitir
confiança não te fiques só pela crítica. Apresenta soluções. Delega tarefas. Não nos digas por alto como se faz. Demonstra-o.
Lidera pelo exemplo.&lt;/p&gt;

&lt;p&gt;Se me permites que te aponte o dedo mais uma vez, não te auto-intitules &lt;em&gt;Scrum Master&lt;/em&gt; quando, diariamente, violas os princípios
mais básicos do &lt;em&gt;Agile Manifesto&lt;/em&gt;. Faz-me alguma confusão. E deveria-te fazer ainda mais confusão a ti, dado que ou tu ou a equipa
não fazem ideia do que significam tais conceitos. Seja qual for, continuas a fazer mal o teu trabalho.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Se parasses para te olhares ao espelho, irias reparar que foges do &lt;em&gt;Agile&lt;/em&gt; como o diabo da cruz. Ainda te achas &lt;em&gt;Scrum
Master&lt;/em&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Desculpa-me estar a insitir, mas acho quero deixar bem claro: se o trabalho que desenvolvi não superou o teu &lt;em&gt;standard&lt;/em&gt;
de qualidade (e eu aceito isso de ânimo leve), não digas que preciso de mais tempo para pensar e refletir no assunto.
Ajuda-me, dá-me luzes, encaminha-me numa direção. Já nem peço que sugiras soluções, apenas rogo que apontes o que pode ser
melhorado. Não sejas vago. Critica, mas critica objetivamente. Com clareza.&lt;/p&gt;

&lt;p&gt;Não leves tudo o que disse a peito. Comecei este desabafo a falar em respeito e assim o termino. O respeito está lá, em
menor quantidade, mas existe. Não sou pessoa de guardar rancor. Mas também não digo religiosamente &lt;em&gt;amén&lt;/em&gt; a todas as tuas doutrinas.&lt;/p&gt;

&lt;p&gt;E sim, continuo a aprender contigo, diariamente, coisas boas e más. O que me leva a pensar que, se calhar, até estás a fazer
bem o teu trabalho.&lt;/p&gt;

&lt;p&gt;Cordialmente,&lt;/p&gt;

&lt;p&gt;Um Engenheiro de &lt;em&gt;Software&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;P.S.: Se marcas uma reunião para discutirmos um documento, por favor, tira 30 minutos antes para realmente leres a
porra do documento!&lt;/em&gt;&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;https://nextcommit.github.io/blog/diz-me-como-geres-e-dir-te-ei-quem-es/&quot;&gt;Diz-me Como Geres e Dir-te-ei Quem És&lt;/a&gt; was originally published by Next Commit at &lt;a href=&quot;https://nextcommit.github.io&quot;&gt;Next Commit&lt;/a&gt; on 27 fevereiro 2016.&lt;/p&gt;

  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Os 5 Mandamentos Dos Projetos Académicos]]></title>
  <link rel="alternate" type="text/html" href="https://nextcommit.github.io/blog/os-5-mandamentos-dos-projetos-academicos/" />
  <id>https://nextcommit.github.io/blog/os-5-mandamentos-dos-projetos-academicos</id>
  <published>2016-01-09 00:09:43 +0000</published>
  <updated>2016-01-09 00:09:43 +0000</updated>
  <author>
    <name>Miguel Cunha</name>
    <uri>https://nextcommit.github.io</uri>
    <email>miguelfcunha@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Todos nós já passamos por algumas destas situações. Fazer um projeto académico é um desafio educativo, científico, mas,
principalmente, de paciência. Ainda assim, o resultado é, na maioria das vezes, bastante positivo.&lt;/p&gt;

&lt;p&gt;Ora o nosso projeto não funciona (e nós não sabemos o porquê), ora funciona (e também não sabemos como). Aqui ficam, inspirado
pela &lt;a href=&quot;http://www.slideshare.net/slideshow/embed_code/42740442&quot;&gt;apresentação&lt;/a&gt; de dois professores da &lt;em&gt;FEUP&lt;/em&gt;, os 5 mandamentos
dos projetos académicos.&lt;/p&gt;

&lt;h1 id=&quot;amar-o-nosso-cdigo-sobre-todas-as-coisas&quot;&gt;1. Amar o nosso código sobre todas as coisas&lt;/h1&gt;

&lt;p&gt;O nosso colega de grupo não sabe o (pouco) que faz. O nosso código é muito melhor, mais conciso e auto-explicativo que o dele.
Isto porque nós fomos a mais duas aulas teóricas do que ele (e as que faltamos, demos um relance sobre os &lt;em&gt;slides&lt;/em&gt; enquanto estávamos
na fila para a cantina).&lt;/p&gt;

&lt;p&gt;Quando temos (e tentamos evitar ao máximo!) que mexer no código feito por ele, primeiro há que ultrapassar as dificuldades
da formatação do código (que não estão ao nosso gosto), ao mesmo tempo que se perdem horas a fio a fazer &lt;em&gt;refactoring&lt;/em&gt; ao código
dele. Quem, no seu perfeito juízo, tem coragem de produzir código sem deixar a última linha do ficheiro em branco?&lt;/p&gt;

&lt;p&gt;Quando ele descobre um &lt;em&gt;bug&lt;/em&gt; no nosso código, ou sugere uma pequena alteração que permite facilitar-nos a vida, temos que garantir que
ficou claro que levamos isso como um ataque pessoal. Afinal, temos a certeza que ele passou horas a testar todos os casos-limite!
Depois, seguir os passos:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Perder horas a discutir pormenores desnecessários, utilizando expressões como “&lt;em&gt;eu não percebo muito disto, mas acho que…&lt;/em&gt;”
e “&lt;em&gt;eu fiz assim porque… e da forma que tu dizes só fica mais otimizado; o output é o mesmo&lt;/em&gt;”.&lt;/li&gt;
  &lt;li&gt;Não se chegar a conclusão nenhuma, apesar de ninguém ceder (e nós já percebemos que ele tem razão).&lt;/li&gt;
  &lt;li&gt;Continuar a desenvolver o projeto, cada um para seu lado.&lt;/li&gt;
  &lt;li&gt;Aproveitar um &lt;em&gt;commit&lt;/em&gt; grande para, no meio de tanta alteração, corrigir o tal &lt;em&gt;bug&lt;/em&gt; ou implementar a tal pequena otimização.&lt;/li&gt;
  &lt;li&gt;Guardar a &lt;em&gt;hash&lt;/em&gt; do &lt;em&gt;commit&lt;/em&gt; e, se necessário, recuperar este assunto no próximo projeto e de como “&lt;em&gt;da outra vez fui eu
que cedi&lt;/em&gt;”.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;no-usar-o-santo-nome-da-framework-em-vo&quot;&gt;2. Não usar o santo nome da &lt;em&gt;framework&lt;/em&gt; em vão&lt;/h1&gt;

&lt;p&gt;“&lt;em&gt;Não gosto desta framework. Nunca gostei.&lt;/em&gt;” Só a estamos a usar porque o nosso colega foi o primeiro a tomar a iniciativa.
É muito grande, cheia de pastas, separada em muitos ficheiros com nomes complicados e nada sugestivos. Preferia a &lt;em&gt;nossa&lt;/em&gt;
estrutura do projeto anterior, que só tinha dois ficheiros (um nosso e um dele). O nosso colega queixava-se que o &lt;em&gt;IDE&lt;/em&gt; dele ficava lento a abrir
aqueles ficheiros com 2000 linhas, mas isso é porque ele é pobre, tem um computador fraco e não usa o &lt;em&gt;IntelliJ&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Era só vantagens: estava tudo à mão, não tínhamos que estar à procura de nada, sabíamos exatamente onde estavam as coisas. Ou estava
num ficheiro, ou estava no outro. E até já sabíamos que a função &lt;code&gt;print_posts_from_db_on_screen2&lt;/code&gt; (que por alguma razão imprimia
em duplicado) estava entre as linhas 825 e 1337!&lt;/p&gt;

&lt;h1 id=&quot;no-cobiar-os-projetos-alheios&quot;&gt;3. Não cobiçar os projetos alheios&lt;/h1&gt;

&lt;p&gt;A comunidade científica sempre apelou à partilha de conhecimento. Aliás, a participação em projetos &lt;em&gt;open-source&lt;/em&gt; é algo que
está na nossa &lt;em&gt;to-do list&lt;/em&gt; já há muito tempo. Esses sim, são projetos bem feitos, arquitetados e documentados.&lt;/p&gt;

&lt;p&gt;O outro grupo nosso amigo (sim, aquele que tem sempre 18) já fez o projeto há muito tempo. Até implementaram funcionalidades extra
que não eram pedidas (mas que eles acharam relevantes), como se o professor valorizasse isso. Otários.&lt;/p&gt;

&lt;p&gt;De certeza que não há problema em lhes pedir o projeto deles para “comparar pequenos detalhes”. Além disso, sempre nos disseram
que ler o código de outras pessoas é uma atividade lúdica.&lt;/p&gt;

&lt;p&gt;Agora que percebemos a estratégia que o outro grupo utilizou, basta esperar pela intervenção divina (ver mandamento #5) e o nosso
projeto está feito! Olha, esta função aposto que vai ser igual em todos os trabalhos, mais vale não perder tempo e usá-la no nosso.
Copiemos o código e os comentários, para se mais tarde precisarmos de rever aquele código, não termos de ir ver ao projeto deles de novo.
Concerteza que antes de entregarmos o nosso trabalho nos vamos lembrar de retirar os comentários. Otários.&lt;/p&gt;

&lt;h1 id=&quot;no-testar-nem-causar-semelhante-transtorno-no-server-ou-no-client-neste-projeto-ou-no-prximo&quot;&gt;4. Não testar (nem causar semelhante transtorno, no &lt;em&gt;server&lt;/em&gt; ou no &lt;em&gt;client&lt;/em&gt;, neste projeto ou no próximo)&lt;/h1&gt;

&lt;p&gt;Testar é uma seca. Mas pior do que testar é ter que escrever os testes. Se fosse só carregar numa tecla, esperar uns segundos, e
“aquilo” ficar tudo verde, ainda se compreendia… Para além disso, este pedaço de código é tão simples (e bem feito) que
não vemos forma de futuros &lt;em&gt;commits&lt;/em&gt; o comprometerem.&lt;/p&gt;

&lt;p&gt;Quando na noite anterior à entrega, e depois de uma epifania da qual resultaram milhares de linhas de código (e novas funcionalidades),
as funcionalidades antigas deixam de funcionar, culpamos a &lt;em&gt;framework&lt;/em&gt; (que é bastante confusa), a linguagem (que é considerada pelos mais
importantes filósofos, desde há milhares de anos, como falível) e, claro, o nosso colega. Não fazemos sequer ideia qual a alteração que
foi crítica, pois o último &lt;em&gt;commit&lt;/em&gt; tem como mensagem &lt;code&gt;first commit, initial setup&lt;/code&gt; e o nosso querido colega está a escrever o relatório.
Mais vale dar &lt;code&gt;ctrl+z&lt;/code&gt; até funcionar de novo.&lt;/p&gt;

&lt;p&gt;No fim, chegamos, inevitavelmente, sempre há mesma conclusão: se nem o professor vai testar, porque é que nós o haveríamos?&lt;/p&gt;

&lt;h1 id=&quot;a-grande-expanso-ou-o-big-bang&quot;&gt;5. A Grande Expansão (ou o Big Bang)&lt;/h1&gt;

&lt;p&gt;O código está em expansão. Disso nenhum de nós tem dúvidas. Mas para evitar contrariar as leis da física, também esta
expansão deve ser lenta e gradual, possivelmente infinita. Quando a data de entrega se aproxima, de tão pequeno e condensado
que o projeto se encontra, dá-se o &lt;em&gt;Big Bang&lt;/em&gt;, a grande explosão, numa corrida contra-relógio para se evitar o &lt;em&gt;Big Crush&lt;/em&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://nextcommit.github.io/blog/os-5-mandamentos-dos-projetos-academicos/&quot;&gt;Os 5 Mandamentos Dos Projetos Académicos&lt;/a&gt; was originally published by Next Commit at &lt;a href=&quot;https://nextcommit.github.io&quot;&gt;Next Commit&lt;/a&gt; on  9 janeiro 2016.&lt;/p&gt;

  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Pensar Grande, Construir Pequeno]]></title>
  <link rel="alternate" type="text/html" href="https://nextcommit.github.io/blog/pensar-grande-construir-pequeno/" />
  <id>https://nextcommit.github.io/blog/pensar-grande-construir-pequeno</id>
  <published>2015-12-28 16:50:21 +0000</published>
  <updated>2015-12-28 16:50:21 +0000</updated>
  <author>
    <name>Miguel Cunha</name>
    <uri>https://nextcommit.github.io</uri>
    <email>miguelfcunha@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Da mesma forma que um jogador de futebol quer pôr em prática nos jogos aquilo que aprende ao longo dos treinos, também o
típico estudante de informática tem a vontade de mostrar que é capaz de pôr o conhecimento que adquiriu ao longo dos anos
em prática. Eu não sou exceção.&lt;/p&gt;

&lt;p&gt;Esta é a história de como (mais) um projeto para os tempos livres ficou pelo caminho. Os ingleses gostam de lhe chamar
&lt;em&gt;Post-mortem&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&quot;a-ideia&quot;&gt;A Ideia&lt;/h1&gt;

&lt;p&gt;Como é normal, todo este projeto começa por uma ideia. Por mais simples que ela seja, a ideia é o ponto de partida para
o &lt;em&gt;brainstorming&lt;/em&gt; e, portanto, ter a ideia clara e concisa é essencial para a conseguir transmitir a outras pessoas.&lt;/p&gt;

&lt;p&gt;A ideia não necessita de ser original, mas deve acrescentar valor a soluções já existentes, até porque ter uma ideia original não é,
obviamente, fácil. Mas nem esse foi o objetivo inicial. O objetivo inicial sempre foi construir algo que pudesse pôr em
prática os conhecimentos aprendidos ao longo dos anos. E isso significa que este projeto não nasceu de uma ideia, mas, ao contrário,
a ideia nasceu da necessidade de desenvolver um projeto.&lt;/p&gt;

&lt;p&gt;Usando uma metáfora da biologia, tal como &lt;em&gt;Lamark&lt;/em&gt; explicava que determinados caracteres eram adquiridos por necessidade, também a ideia
para este projeto surgiu pela necessidade de ter haver uma ideia para se poder desenvolver um projeto. E começar um projeto sem
uma ideia é como marcar um casamento sem primeiro saber a opinião do parceiro: é bem provável que esteja destinado ao fracasso.&lt;/p&gt;

&lt;p&gt;Terminando a metáfora: a ideia deve aparecer, assim como Darwin explicou para a biologia através da seleção natural, de uma
forma natural e espotânea. A ideia pode aparecer enquanto falamos com um amigo (foi assim que surgiu este &lt;a href=&quot;/sobre&quot;&gt;blog&lt;/a&gt;), enquanto
utilizamos um determinado serviço e nos deparamos com a falta da funcionalidade &lt;em&gt;X&lt;/em&gt; ou quando damos por nós a pensar a
mítica frase “era tão fixe se aqui se pudesse fazer X” (não esqueci que muitas das ideias aparecem enquanto relaxamos a tomar banho,
as chamadas &lt;em&gt;shower thoughts&lt;/em&gt;).&lt;/p&gt;

&lt;h1 id=&quot;a-viso&quot;&gt;A Visão&lt;/h1&gt;

&lt;p&gt;Ter uma ideia é o primeiro passo, mas para a partir da ideia se conseguir construir uma visão, simples e concisa, é necessário
conseguir delinear o âmbito (&lt;em&gt;scope&lt;/em&gt;) do nosso projeto.&lt;/p&gt;

&lt;p&gt;Se a ideia é o ponto de partida para o &lt;em&gt;brainstorming&lt;/em&gt; de funcionalidades, a visão demonstra que o resultado desse
&lt;em&gt;brainstorming&lt;/em&gt; foi digerido, pelo que algumas ideias daí resultantes foram aproveitadas, outras reajustadas e, a maioria
delas, descartadas.&lt;/p&gt;

&lt;p&gt;Construir a visão de um projeto não deve ser só uma formalidade. Deve sim ser um passo que é dado e que permite à equipa
estar sincronizada sobre as prioridades desse projeto e como se vai acrescentar valor à solução a ser desenvolvida.&lt;/p&gt;

&lt;p&gt;Idealmente a visão é o alicerce de um projeto e a pedra angular sobre a qual este é construído. Se determinada &lt;em&gt;feature&lt;/em&gt;
faz, ou não, sentido na nossa aplicação, é uma pergunta que apareceu ao longo desta experiência e que poderia ser respondida
caso existisse uma visão clara, sólida e concisa do projeto.&lt;/p&gt;

&lt;p&gt;A visão permite, ainda, que a equipa consiga estabelecer o chamado &lt;em&gt;&lt;a href=&quot;http://www.allaboutagile.com/definition-of-done-10-point-checklist/&quot;&gt;Definition of Done&lt;/a&gt;&lt;/em&gt; (&lt;em&gt;DoD&lt;/em&gt;), permitindo manter, com
consistência, a qualidade ao longo de toda a aplicação.&lt;/p&gt;

&lt;h1 id=&quot;a-equipa&quot;&gt;A Equipa&lt;/h1&gt;

&lt;p&gt;Tratando-se de um projeto para ser desenvolvido nos tempos livres, o projeto passou rapidamente de algo pessoal para uma
equipa de 3 pessoas. Desenvolver um projeto em equipa envolve, antes de tudo, conseguir explicar a ideia do projeto. A visão,
portanto. E isso implica ter uma ideia muito concreta, desenvolvida e matura.&lt;/p&gt;

&lt;p&gt;Trabalhar em equipa fornece a um projeto uma visão mais alargada, permitindo que a ideia original seja iterada várias vezes,
criando várias vezes a discussão de se determinada funcionalidade deve, ou não, ser incluída.&lt;/p&gt;

&lt;h1 id=&quot;a-stack-tecnolgica&quot;&gt;A &lt;em&gt;Stack&lt;/em&gt; Tecnológica&lt;/h1&gt;

&lt;p&gt;Encontrar uma &lt;em&gt;stack&lt;/em&gt; tecnológica para desenvolver o projeto significou balancear três grandes variaveis:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;As tecnologias que são necessárias/ideais para desenvolver o projeto.&lt;/li&gt;
  &lt;li&gt;As tecnologias que cada membro da equipa sabe/tem experiência.&lt;/li&gt;
  &lt;li&gt;O quanto cada pessoa está disposta a sair da sua zona de conforto e aprender uma tecnologia nova.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Conseguir conjugar estas três variáveis foi, na verdade, algo mais simples do que estava à espera. Muitas das vezes esta &lt;em&gt;stack&lt;/em&gt;
é imposta ao &lt;em&gt;developer&lt;/em&gt;, mas nos projetos pessoais temos sempre a liberdade de nos podermos aventurar em novas tecnologias.&lt;/p&gt;

&lt;h1 id=&quot;a-comunicao&quot;&gt;A Comunicação&lt;/h1&gt;

&lt;p&gt;A comunicação entre a equipa deve ser algo que permita a várias pessoas trabalharem à distância e com horários diferentes,
tal como um projeto deste tipo obriga. Apesar do &lt;em&gt;Skype&lt;/em&gt; ser a ferramenta mais utilizada para conversação por áudio, o &lt;em&gt;&lt;a href=&quot;https://slack.com/&quot;&gt;Slack&lt;/a&gt;&lt;/em&gt;
é, sem dúvida, uma ferramenta muito boa e que funcionou bastante bem entre nós. As integrações do &lt;em&gt;&lt;a href=&quot;https://slack.com/&quot;&gt;Slack&lt;/a&gt;&lt;/em&gt; com as diversas plataformas,
como por exemplo &lt;em&gt;GitHub&lt;/em&gt; e &lt;em&gt;&lt;a href=&quot;http://www.pivotaltracker.com/&quot;&gt;PivotalTracker&lt;/a&gt;&lt;/em&gt;, permitem que todas as pessoas estejam &lt;em&gt;up-to-date&lt;/em&gt; com o estado atual do projeto.&lt;/p&gt;

&lt;h1 id=&quot;a-gesto-de-expectativas&quot;&gt;A Gestão de Expectativas&lt;/h1&gt;

&lt;p&gt;Quando se desenvolve um projeto nos tempos livres (“na brincadeira”, como se diz na gíria) é normal não existir uma data limite para
lançar o projeto. Neste caso tal não era verdade: devido ao mercado e à situação a que se destinada, era necessário ter uma
primeira versão funcional em pouco mais de um mês.&lt;/p&gt;

&lt;p&gt;Levou algum tempo a configurar o ambiente de desenvolvimento e até configuramos &lt;em&gt;bots&lt;/em&gt; de &lt;em&gt;deploy&lt;/em&gt; automático para os &lt;em&gt;droplets&lt;/em&gt; do
&lt;em&gt;DigitalOcean&lt;/em&gt; (o que veio a revelar-se tempo “perdido”); configuramos várias integrações entre os vários serviços
(repositório &lt;em&gt;Git&lt;/em&gt;, &lt;em&gt;&lt;a href=&quot;https://slack.com/&quot;&gt;Slack&lt;/a&gt;&lt;/em&gt;, &lt;em&gt;&lt;a href=&quot;https://www.visualstudio.com/en-us/products/visual-studio-team-services-vs.aspx&quot;&gt;VSOnline&lt;/a&gt;&lt;/em&gt;, &lt;em&gt;Git Flow&lt;/em&gt;, etc). Não queríamos só fazer o projeto, queríamos ter um bom processo por
detrás do projeto, configurar serviços, automatizar ações. E isso levou a que a margem da manobra para cumprir o prazo
ficasse ainda mais curta.&lt;/p&gt;

&lt;p&gt;À medida que a data limite se aproximava e “arranjar” tempo livre para o projeto se tornava complicado, era psicologicamente
desgastante e desmoralizante ter que cortar funcionalidades de forma a conseguir terminar a tempo. E há medida que se foi cortando
funcionalidades, perdia-se valor da solução, e perder valor era mais uma “facada” psicológica. E repete-se o ciclo.&lt;/p&gt;

&lt;h1 id=&quot;think-it-big-build-it-small&quot;&gt;&lt;em&gt;Think it big, build it small&lt;/em&gt;&lt;/h1&gt;

&lt;p&gt;Esta é a grande lição que aprendi e, por conseguinte, a mensagem que quero passar. Pensamos o sistema bastante completo e tentamos
implementar essa grande complexidade de uma só vez. Para o conseguir (dentro da data limite), era necessário dispender mais tempo
do que aquele que, efetivamente, tínhamos disponível. E a falta de progresso à medida que o prazo se aproxima é demasiado
desmoralizante. Ao fim de alguns “cortes”, acabamos por desistir.&lt;/p&gt;

&lt;p&gt;Não podia haver melhor maneira de aprender o porquê do &lt;em&gt;scrum&lt;/em&gt; propôr &lt;em&gt;sprints&lt;/em&gt; de 1 a 2 semanas e de se investir na integração
contínua. Humanamente, é bastante moralizante ver um projeto a avançar sem ter que contar linhas de código, mas vendo pequenas &lt;em&gt;features&lt;/em&gt;
a serem integradas, aos poucos, no produto.&lt;/p&gt;

&lt;p&gt;É importante pensar em grande, pensar como a aplicação vai escalar, como se comporta com 10 e com 10 000 pessoas, mas principalmente
pensar em pequenas &lt;em&gt;features&lt;/em&gt; com funcionalidades básicas e, a partir daí, iterá-las (quantas vezes necessárias), de forma a que
a cada iteração a sua funcionalidade se aproxime cada vez mais da visão do projeto. Primeiro o rascunho e só depois a obra de arte.&lt;/p&gt;

&lt;p&gt;Resumindo: arquitetar a solução em grande plano é importante, mas começar a construí-la com pequenos passos incrementais é fundamental.
Não só para validação da ideia/conceito, mas porque ter resultados visíveis permite-nos ganhar força e motivação para continuar.
Atenção: isto não significa construir a aplicação mal. Que seja clara a diferença entre uma má arquitetura e uma
prova de conceito com potencialidade para crescer.&lt;/p&gt;

&lt;h1 id=&quot;o-sentido-pedaggico&quot;&gt;O Sentido Pedagógico&lt;/h1&gt;

&lt;p&gt;Como é claro, nem tudo foi em vão! Para além da forte componente pedagógica de aprender com os erros, fazer &lt;em&gt;deploy&lt;/em&gt; de uma
aplicação é muito mais do implementar funcionalidades. A experiência ganha ao arquitetar a solução e pensar como encaixar as várias
“peças do &lt;em&gt;puzzle&lt;/em&gt;” é um dos elementos que distingue um Engenheiro Informático.&lt;/p&gt;

&lt;p&gt;Quanto à componente de gestão de projeto, principalmente ao nível da visão e da definição de prioridades, fiquei rendido ao chamado
&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Elevator_pitch&quot;&gt;pitch de elevador&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Costuma-se dizer que se demora 10% do tempo a fazer 90% do código e 90% do tempo a terminar os restantes 10%. É importante, até mesmo num
projeto menos sério (como este desenvolvido nos tempos livres) traçar metas e objetivos, sob pena de ser mais um projeto que ficará,
inevitavelmente, a meio. Mas também é importante não ter datas tão restritivas e inflexíveis. Aproveitemos os projetos pessoais para aplicar
a máxima “&lt;em&gt;done when it’s done&lt;/em&gt;”.&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;https://nextcommit.github.io/blog/pensar-grande-construir-pequeno/&quot;&gt;Pensar Grande, Construir Pequeno&lt;/a&gt; was originally published by Next Commit at &lt;a href=&quot;https://nextcommit.github.io&quot;&gt;Next Commit&lt;/a&gt; on 28 dezembro 2015.&lt;/p&gt;

  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Olá Mundo]]></title>
  <link rel="alternate" type="text/html" href="https://nextcommit.github.io/blog/ola-mundo/" />
  <id>https://nextcommit.github.io/blog/ola-mundo</id>
  <published>2015-12-05 20:53:44 +0000</published>
  <updated>2015-12-05 20:53:44 +0000</updated>
  <author>
    <name>Miguel Cunha</name>
    <uri>https://nextcommit.github.io</uri>
    <email>miguelfcunha@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Caros leitores, sejam bem-vindos ao &lt;em&gt;Next Commit&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;Antes de mais, as mais sinceras desculpas pela escolha de um nome inglês para um &lt;em&gt;blog&lt;/em&gt; escrito em português de Portugal.&lt;/p&gt;

&lt;h2 id=&quot;int-main-int-argc-char-argv&quot;&gt;int main (int argc, char** argv)&lt;/h2&gt;

&lt;p&gt;Aqui podem esperar encontrar artigos sobre programação e tecnologia, escritos de &lt;em&gt;developer&lt;/em&gt; para &lt;em&gt;developer&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;O &lt;em&gt;Next Commit&lt;/em&gt; é o resultado da falta de informação especializada para &lt;em&gt;developers&lt;/em&gt; em português de Portugal, em contraste com a grande e variada cobertura que está disponível em inglês.
Este panorama parece contra-intuitivo, principalmente quando a &lt;a href=&quot;http://www.forbes.com/sites/alisoncoleman/2015/08/23/portugal-discovers-its-spirit-of-entrepreneurial-adventure/&quot;&gt;Forbes&lt;/a&gt; ainda há poucos meses atrás deu destaque ao &lt;em&gt;boom&lt;/em&gt; português.&lt;/p&gt;

&lt;h2 id=&quot;printfol-mundon&quot;&gt;printf(“Olá Mundo!\n”);&lt;/h2&gt;

&lt;p&gt;Não podia deixar de aproveitar esta formalidade informática para dar a conhecer a todos os amantes de &lt;em&gt;python&lt;/em&gt; este &lt;a href=&quot;https://benkurtovic.com/2014/06/01/obfuscating-hello-world.html&quot;&gt;fantástico código&lt;/a&gt; de obfuscação.&lt;/p&gt;

&lt;h2 id=&quot;return-0&quot;&gt;return 0;&lt;/h2&gt;

&lt;p&gt;Vêmo-nos no próximo &lt;em&gt;commit&lt;/em&gt;!&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;https://nextcommit.github.io/blog/ola-mundo/&quot;&gt;Olá Mundo&lt;/a&gt; was originally published by Next Commit at &lt;a href=&quot;https://nextcommit.github.io&quot;&gt;Next Commit&lt;/a&gt; on  5 dezembro 2015.&lt;/p&gt;

  </content>
</entry>

</feed>
