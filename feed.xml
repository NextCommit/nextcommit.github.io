<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Next Commit</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml" />
<link rel="alternate" type="text/html" href="http://localhost:4000" />
<updated>2017-05-14T13:22:38+01:00</updated>
<id>http://localhost:4000/</id>
<author>
  <name>Next Commit</name>
  <uri>http://localhost:4000/</uri>
  <email>miguelfcunha@gmail.com</email>
</author>


<entry>
  <title type="html"><![CDATA[Containers e Docker]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/blog/containers-e-docker/" />
  <id>http://localhost:4000/blog/containers-e-docker</id>
  <published>2017-05-14 01:50:16 +0100</published>
  <updated>2017-05-14 01:50:16 +0100</updated>
  <author>
    <name>Miguel Cunha</name>
    <uri>http://localhost:4000</uri>
    <email>miguelfcunha@gmail.com</email>
  </author>
  <content type="html">
    &lt;blockquote&gt;
  &lt;p&gt;O texto que se segue é, em verdade, uma espécie de resumo daquilo que apresentei recentemente no &lt;strong&gt;Braga.JS&lt;/strong&gt; Não é um
“Docker 101”, pois pressupõe que já ouviram falar da tecnologia (mesmo que nunca a tenha usado). Há bastante tópicos que não
foram abordados e que deixo para outro &lt;em&gt;post&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Fui apresentado ao mundo dos &lt;em&gt;containers&lt;/em&gt; (e, em especial, ao &lt;strong&gt;Docker&lt;/strong&gt;) há cerca de dois anos atrás, na &lt;em&gt;MOG Technologies&lt;/em&gt;.
Desde então, tenho utilizar todo o seu &lt;strong&gt;ecossistema&lt;/strong&gt; em situações bastante diferentes, com propósitos e objetivos distintos
(exemplos mais para o fim do &lt;em&gt;post&lt;/em&gt;). Comecemos pelo básico.&lt;/p&gt;

&lt;h1 id=&quot;o-bsico&quot;&gt;O Básico&lt;/h1&gt;
&lt;p&gt;Aquilo que conhecemos como &lt;strong&gt;Docker&lt;/strong&gt; é, na verdade, o &lt;strong&gt;Docker Engine&lt;/strong&gt;, ou seja, o &lt;em&gt;core&lt;/em&gt; que permite criar imagens e
correr &lt;em&gt;containers&lt;/em&gt;. Mas aquilo que o Docker oferece, tipicamente chamado de  &lt;strong&gt;Docker Toolbox&lt;/strong&gt; é bem mais completo e interessante.
Vamos por partes.&lt;/p&gt;

&lt;p&gt;Tipicamente tudo começa no &lt;em&gt;Dockerfile&lt;/em&gt;, um ficheiro de configuração, com uma sintaxe bastante simples e intuitiva, que nos permite
escrever “receitas”:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;FROM ubuntu:16.04

RUN apt-get update
RUN apt-get install -y software-properties-common python
RUN apt-get install -y nodejs

RUN mkdir /var/www

ADD app.js /var/www/app.js&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Tendo a nossa “receita” definida, utilizamos o comando &lt;em&gt;build&lt;/em&gt; do &lt;strong&gt;Docker Engine&lt;/strong&gt; para construir a imagem resultante. Aqui existem
várias nuances interessantes. Primeiro, todas as imagens começam de uma imagem base (no caso anterior, estamos a usar um Ubuntu 16.04).
Depois, cada comando é construído &lt;strong&gt;sequencialmente&lt;/strong&gt;, em camadas &lt;strong&gt;read-only&lt;/strong&gt;. Esta filosofia é bastante importante, pois
permite tirar partido de mecanismos de “&lt;em&gt;cache&lt;/em&gt;”, fazendo com que se poupe tempo de construção das imagens e espaço em disco.&lt;/p&gt;

&lt;p&gt;Um aparte: isto significa que temos que ser inteligente ao construir o nosso Dockerfile. Ficheiros que mudem constantemente devem
ser incluídos tão tarde quanto possível no processo de construção da imagem, de forma a que invalide o menor número possível de camadas
em &lt;em&gt;cache&lt;/em&gt;. Isto significa, tomando o exemplo anterior, que uma alteração no ficheiro &lt;code&gt;app.js&lt;/code&gt; iria implicar apenas a construção da última
camada!&lt;/p&gt;

&lt;p&gt;Todo este mecanismo permite que as camadas que compõe uma imagem possa ser reaproveitadas pelo &lt;strong&gt;Docker Engine&lt;/strong&gt;. Dado que essas
camadas são apenas de leitura, isto signfica que quando instanciamos um &lt;em&gt;container&lt;/em&gt;, estamos na verdade, a criar uma pequena
camada &lt;strong&gt;temporária&lt;/strong&gt; de escrita. Quando o &lt;em&gt;container&lt;/em&gt; é criado, esta camada de &lt;em&gt;RW&lt;/em&gt; é criada e quando ele é destruído, a sua
camada também o é (a não ser que indiquemos explicitamente que as alterações feitas sejam guardadas). Como cada &lt;em&gt;container&lt;/em&gt; tem a sua
própria camada de escrita (e todas as mudanças feitas são guardadas nessa camada), isto significa que é possível instanciar
vários containers sobre a mesma imagem!&lt;/p&gt;

&lt;p&gt;Através do comando &lt;em&gt;run&lt;/em&gt;, conseguimos correr correr &lt;em&gt;containers&lt;/em&gt; Docker. Porém, imaginemos que queremos servir uma &lt;em&gt;API&lt;/em&gt; pública em &lt;em&gt;nodeJS&lt;/em&gt;
para aceder a uma base de dados &lt;em&gt;mongoDB&lt;/em&gt;. Poderíamos, obviamente, correr o comando &lt;code&gt;docker run&lt;/code&gt; para um dos containers, expôr a
porta da API pública para o exterior e fazer a ligação entre os dois &lt;em&gt;containers&lt;/em&gt; para que a aplicação em nodeJS consiga aceder à
base de dados. É aqui que entra o &lt;strong&gt;Docker Compose&lt;/strong&gt;, pois permite-nos, através de um ficheiro bastante simples, realizar operações
bastante complexas de &lt;em&gt;networking&lt;/em&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;s&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mongo&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--smallfiles&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--logpath=/dev/null&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;node app.js&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;80:3000&quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;db&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Vamos por partes. Estamos a criar dois &lt;em&gt;containers&lt;/em&gt;, o “db” (baseado numa imagem do mongo) e o “web” (construído “na hora” pelo
Docker Engine). O &lt;em&gt;container&lt;/em&gt; “web” quando é iniciado corre o comando &lt;code&gt;node app.js&lt;/code&gt; e expõe a sua porta interna 3000 (&lt;em&gt;default&lt;/em&gt; do nodeJS)
para a porta 80 do &lt;em&gt;host&lt;/em&gt; onde está a correr. Por fim, a “magia” do “links”, permite que se crie uma ligação entre os dois &lt;em&gt;containers&lt;/em&gt;.
Isto significa que não temos forma de aceder diretamente ao container que contém a base de dados, a não ser através da nossa aplicação.&lt;/p&gt;

&lt;p&gt;Imaginemos agora que lançamos a nossa aplicação, começamos a ter bastante visitas e, portanto, queremos escalar a nossa aplicação &lt;em&gt;on-demand&lt;/em&gt;
com vários containers &lt;em&gt;web&lt;/em&gt;. &lt;em&gt;Voilà&lt;/em&gt; &lt;strong&gt;Docker Swarm&lt;/strong&gt;, um gestor de &lt;em&gt;clusters&lt;/em&gt; integrado com o &lt;strong&gt;Engine&lt;/strong&gt;, que permite, definir
qual o número mínimo e máximo de cada tipo de &lt;em&gt;containers&lt;/em&gt;, qual deve ser a estratégia em caso de erro/falha, fornecendo
serviços de &lt;em&gt;service discovery&lt;/em&gt;, &lt;em&gt;load balancing&lt;/em&gt;, entre outros.&lt;/p&gt;

&lt;p&gt;Até agora temos vindo a falar de imagens, de construir imagens com base num modelo de &lt;em&gt;stacking layers&lt;/em&gt;, mas ainda não falamos do
&lt;strong&gt;Docker Registry&lt;/strong&gt;. O &lt;strong&gt;Docker Registry&lt;/strong&gt; não é mais que um repositório que permite a partilha de imagens de uma forma distribuída
(pensem-no como um “git para containers”). O maior “repositório” público (e &lt;em&gt;default&lt;/em&gt; do &lt;strong&gt;Engine&lt;/strong&gt;) é o &lt;strong&gt;Docker Hub&lt;/strong&gt;, porém
qualquer pessoa pode instalar um &lt;strong&gt;Docker Registry&lt;/strong&gt; e usá-lo internamente.&lt;/p&gt;

&lt;h1 id=&quot;o-ecossistema&quot;&gt;O Ecossistema&lt;/h1&gt;

&lt;p&gt;A popularidade do &lt;strong&gt;Docker&lt;/strong&gt; nos últimos anos fez com que a comunidade desenvolvesse não só as ferramentas da &lt;strong&gt;Toolbox&lt;/strong&gt;, como
também criasse um ecossistema à sua volta. Sejam ferramentas de monitorização como o &lt;a href=&quot;https://github.com/scoutserver/docker-scout&quot;&gt;Scout&lt;/a&gt;,
&lt;a href=&quot;https://github.com/portainer/portainer&quot;&gt;Portainer&lt;/a&gt;, &lt;a href=&quot;https://prometheus.io/&quot;&gt;Prometheus&lt;/a&gt;, &lt;a href=&quot;https://github.com/weaveworks/scope&quot;&gt;Weave Scope&lt;/a&gt;,
&lt;a href=&quot;https://www.datadoghq.com/&quot;&gt;Datadog&lt;/a&gt;, &lt;a href=&quot;https://github.com/google/cadvisor&quot;&gt;cAdvisor&lt;/a&gt; da Google; ferramentas de
orquestração como o &lt;a href=&quot;https://github.com/spotify/helios&quot;&gt;Helios&lt;/a&gt; da Spotify ou o &lt;a href=&quot;http://mesos.apache.org/&quot;&gt;Apache Mesos&lt;/a&gt;;
soluções mais abrangentes e completas como o &lt;a href=&quot;https://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt; ou até mesmo sistemas operativos
desenhados a pensar nos &lt;em&gt;containers&lt;/em&gt;, como o &lt;a href=&quot;https://coreos.com/&quot;&gt;CoreOS&lt;/a&gt;. A quantidade de projetos (&lt;em&gt;open-source&lt;/em&gt;,
grátis até ou determinado nível/limite ou pagos) aumenta de dia para dia.&lt;/p&gt;

&lt;p&gt;Para além disso, o número de imagens oficiais no &lt;strong&gt;&lt;a href=&quot;https://hub.docker.com/&quot;&gt;Docker Hub&lt;/a&gt;&lt;/strong&gt; também cresce diariamente, agregando
imagens de tudo e mais alguma coisa.&lt;/p&gt;

&lt;p&gt;Todo este desenvolvimento e apoio da comunidade significa uma menor necessidade de “reinventar a roda”.&lt;/p&gt;

&lt;h1 id=&quot;casos-de-uso&quot;&gt;Casos de Uso&lt;/h1&gt;

&lt;h2 id=&quot;microservios&quot;&gt;Microserviços&lt;/h2&gt;

&lt;p&gt;A crescente adoção de uma arquitetura apoiada em microserviços é um &lt;em&gt;match&lt;/em&gt; perfeito com o Docker, permitindo &lt;strong&gt;de uma
forma fácil&lt;/strong&gt; que cada um tenha o seu ambiente específico, escale consoante seja necessário.&lt;/p&gt;

&lt;h2 id=&quot;desenvolver-aplicaes-linux-em-windows&quot;&gt;Desenvolver Aplicações Linux em Windows&lt;/h2&gt;

&lt;p&gt;Com a possibilidade de correr &lt;em&gt;containers&lt;/em&gt; Linux num ambiente Windows, abre-se a possibilidade de desenvolver projectos
num ambiente Linux a partir de outros sistemas operativos (Windows, por exemplo).&lt;/p&gt;

&lt;h2 id=&quot;manter-aplicaes-self-deployed&quot;&gt;Manter Aplicações &lt;em&gt;Self-deployed&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Querem ter um &lt;em&gt;Gitlab&lt;/em&gt; com alguns &lt;em&gt;runners&lt;/em&gt; de CI? Ou um &lt;em&gt;Jenkins&lt;/em&gt;? Ou um &lt;em&gt;Redmine&lt;/em&gt;? Os &lt;em&gt;Docker containers&lt;/em&gt; são o ideal.
É fácil manter o ambiente isolado, a manutenção é simples e a atualização para novas versões também é trivial.&lt;/p&gt;

&lt;h2 id=&quot;permitir-playgrounds-de-testes-rpidos&quot;&gt;Permitir &lt;em&gt;Playgrounds&lt;/em&gt; de testes rápidos&lt;/h2&gt;

&lt;p&gt;Este é, possivelmente, o caso de uso mais utilizado. Tipicamente arrancar um &lt;em&gt;container&lt;/em&gt; leva meros segundos.
O mesmo para o desligar. Arrancar vários &lt;em&gt;containers&lt;/em&gt; é um processo rápido e trivial. Constuir um ambiente &lt;em&gt;sandbox&lt;/em&gt;
com uma aplicação &lt;em&gt;Ruby on Rails&lt;/em&gt;, uma base de dados &lt;em&gt;Postgres&lt;/em&gt; e um &lt;em&gt;Redis&lt;/em&gt; é simples e rápido e facilmente
partilhável com outras pessoas!&lt;/p&gt;

&lt;p&gt;Querem experimentar a nova versão de &lt;em&gt;nodeJS&lt;/em&gt;? Fácil. Querem experimentar um cenário de testes para a vossa aplicação nas
condições X?&lt;/p&gt;

&lt;h1 id=&quot;porque-gosto-do-docker&quot;&gt;Porque gosto do Docker&lt;/h1&gt;

&lt;h2 id=&quot;portabilidade&quot;&gt;Portabilidade&lt;/h2&gt;

&lt;p&gt;Apesar de ser um assunto polémico dentro da comunidade, a verdade é que os &lt;em&gt;containers&lt;/em&gt; Docker são bastante portáveis
entre a maioria dos sistemas operativos. A facilidade com que pegamos numa imagem de um local A e a colocamos num local B,
exatamente com o mesmo comportamento, é brutal.&lt;/p&gt;

&lt;h2 id=&quot;colaborao&quot;&gt;Colaboração&lt;/h2&gt;

&lt;p&gt;De um ponto de vista integrador, o Docker mostra-se como o &lt;em&gt;“one-size-fits-all solution”&lt;/em&gt;. Uma verdadeira ponte entre &lt;em&gt;developers&lt;/em&gt;
&lt;em&gt;QA&lt;/em&gt; e &lt;em&gt;DevOps&lt;/em&gt;, permitindo uma variedade de &lt;em&gt;workflows&lt;/em&gt; totalmente flexível e adaptável a vários cenários. A facilidade com que
é possível partilhar imagens permite trabalhar colaborativamente de uma forma que não era possível com as &lt;em&gt;Virtual Machines&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;previsibilidade--consistncia&quot;&gt;Previsibilidade &amp;amp; Consistência&lt;/h2&gt;

&lt;p&gt;Esta é a minha característica favorita. A segurança que tenho ao fazer uma imagem e saber que vai correr no computador
dos meus colegas é uma sensação fantástica. Acabou-se o “&lt;em&gt;works for me&lt;/em&gt;” (“&lt;em&gt;funciona no meu PC&lt;/em&gt;”) e o “*ah, não estava a
dar porque tinha a versão da tecnologia &lt;strong&gt;X&lt;/strong&gt; errada!”.&lt;/p&gt;

&lt;h1 id=&quot;sobre-a-apresentao&quot;&gt;Sobre a apresentação&lt;/h1&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;pt&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Yesterday&amp;#39;s edition of Braga JS was one of the best so far, with talks from &lt;a href=&quot;https://twitter.com/miguelpoeira&quot;&gt;@miguelpoeira&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/naps62&quot;&gt;@naps62&lt;/a&gt;. Stay tuned for more news soon. &lt;a href=&quot;https://t.co/bB8otfUFUH&quot;&gt;pic.twitter.com/bB8otfUFUH&lt;/a&gt;&lt;/p&gt;&amp;mdash; Subvisual (@subvisual) &lt;a href=&quot;https://twitter.com/subvisual/status/852161219226214400&quot;&gt;12 de abril de 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;


    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/blog/containers-e-docker/&quot;&gt;Containers e Docker&lt;/a&gt; was originally published by Next Commit at &lt;a href=&quot;http://localhost:4000&quot;&gt;Next Commit&lt;/a&gt; on 14 maio 2017.&lt;/p&gt;

  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Automação 2]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/blog/python-e-automacao-2/" />
  <id>http://localhost:4000/blog/python-e-automacao-2</id>
  <published>2017-05-06 00:00:00 +0100</published>
  <updated>2017-05-06 00:00:00 +0100</updated>
  <author>
    <name>Gabriel Candal</name>
    <uri>http://localhost:4000</uri>
    <email>gabrielcandal@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Já tinha escrito &lt;a href=&quot;/blog/python-e-automacao-1/&quot;&gt;há uns tempos&lt;/a&gt; como “qualquer um” podia
usar Python para automatizar algumas tarefas do dia-a-dia, mas ficou um segredo por contar: a maior parte
das tarefas interessantes (ir buscar preços de viagens de avião, melhorar fotografias, sacar legendas para
uma série, etc) demora tempo, muito tempo…&lt;/p&gt;

&lt;p&gt;Acabei de fazer um teste rápido e ir buscar a página do Skyscanner
com as viagens Porto -&amp;gt; Lisboa para um dia demorou 0.6s e fazer o parsing to HTML para encontrar a informação
interessante outros 0.5s, ou seja, ~1s para cada destino. E se eu quisesse ver qual era o destino de férias
mais barato para passar 3 dias durante Agosto? Estamos a falar de ter que procurar 30 * nº destinos viagens,
assumindo que estava disposto a ir para qualquer capital europeia isso faria com que tivesse que escolher entre
900 viagens, o que ia demorar 15 minutos. Quem quer estar 15 minutos à espera de alguma coisa que não seja o
início de um jogo do Porto? Exato, ninguém.&lt;/p&gt;

&lt;p&gt;Será que podíamos fazer melhor? Claro que sim, e é aí que entram a concorrência e o paralelismo em programação.
Antes de mais, acho que tem algum interesse perceber a diferença entre estes dois conceitos:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Concorrência&lt;/strong&gt;: a capacidade de um programa de alternar entre fluxos de execução. Isto quer dizer que o processador pode num momento estar a exectuar uma função A e, antes de acabar, executar um bocado de uma função B antes de voltar à A. Num programa “normal” (sequencial) isto nunca acontece, ao fazer:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;imprimir_folha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fazer_contas_e_abrir_janela&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A janela nunca seria aberta antes da folha ser impressa. No entanto, há aqui um desperdício enorme da capacidade do meu computador. Assim que envio o ficheiro para a impressora, não há motivo para ficar à espera que a impressão acabe para começar a abrir a janela.&lt;/p&gt;

&lt;p&gt;Estar à espera de um recurso externo sem ter que praticamente usar o CPU chama-se estar em I/O (de &lt;em&gt;input&lt;/em&gt;/&lt;em&gt;output&lt;/em&gt;) e acontece frequentemente (como por exemplo quando estamos a escrever ou ler de um ficheiro ou a fazer um pedido à rede). Durante este período de I/O estar agarrado ao CPU é um desperdício de recursos porque não o estamos a utilizar, o ideal seria ir fazendo outra coisa útil qualquer enquanto estou em I/O. Neste exemplo isso corresponderia a ir fazendo as contas enquanto ainda se está a imprimir.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Paralelismo&lt;/strong&gt;: em sistemas com vários &lt;em&gt;cores&lt;/em&gt; há também a hipótese de atuar em vários fluxos de execução &lt;em&gt;ao mesmo tempo&lt;/em&gt;. Isto é um tipo especial de concorrência, já que não tenho garantias da sequência do meu programa: um programa pode ser concorrente e não ser paralelo, mas se for paralelo então é concorrente. Olhando para este exemplo:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;fazer_bue_contas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fazer_bue_contas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fazer_bue_contas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fazer_bue_contas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Facilmente percebemos que não adianta muito ir alternando o fluxo entre as várias funções (concorrência), já que estaríamos a usar o core do CPU atribuído ao nosso programa a 100% em qualquer uma das situações. Não havendo I/O, até é prejudicial ter concorrência, já que há perda de tempo no que se chama &lt;em&gt;mudança de contexto&lt;/em&gt; (tirar um core do CPU de uma função para ceder a outra). Neste caso, a única opção de acelerar o programa seria utilizar &lt;em&gt;mais&lt;/em&gt; cores do CPU.&lt;/p&gt;

&lt;p&gt;Isto é tudo muito bonito, mas como se conseguem estas coisas? Usando várias &lt;em&gt;threads&lt;/em&gt; ou processos, que são muito semelhantes sendo que a diferença é que o processo é uma versão mais pesada da &lt;em&gt;thread&lt;/em&gt; (consome mais recursos e tem uma mudança de contexto mais lenta) já que tem a sua própria região de memória (ou seja, duas &lt;em&gt;threads&lt;/em&gt; podem partilhar variáveis mas dois processos não).&lt;/p&gt;

&lt;p&gt;Em Python tudo isto é super simples (nada de coisas esquisitas tipo &lt;em&gt;pthread_create(&amp;amp;thread, NULL, &amp;amp;funcao, NULL);&lt;/em&gt;):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;multiprocessing&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fazer_bue_contas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;process100&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multiprocessing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fazer_bue_contas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;process200&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multiprocessing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fazer_bue_contas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;process100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;process200&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Não fica muito mais complicado do que isto para utilizações que não impliquem estado partilhado, ou seja, onde as funções não têm que comunicar umas com as outras e cada uma representa uma unidade isolada de computação (que é o caso da maior parte das tarefas de automação). O que está a acontecer é que começamos dois processos em que cada um faz cálculos com base num valor e devolve o resultado; como os processos têm zonas de memórias independentes temos também que passar uma variável para poder guardar os resultados. No fim, com o &lt;em&gt;join&lt;/em&gt;, estamos a esperar que os processos terminem.&lt;/p&gt;

&lt;p&gt;Uma questão pertinente é: porque é que decidi usar processos e não &lt;em&gt;threads&lt;/em&gt;? Se são uma versão mais leve deviam ser preferíveis na maior parte dos casos. É verdade, mas a maior parte das implementações de Python (incluindo a mais comum, o &lt;em&gt;CPython&lt;/em&gt;), sofre de um problema chamado GIL (&lt;em&gt;Global Interpreter Lock&lt;/em&gt;), que resumidamente é uma limitação no interpretador que impede que duas &lt;em&gt;threads&lt;/em&gt; executem em simultâneo, o que faz com que seja impossível ter paralelismo (só podemos ter concorrência) ao usar &lt;em&gt;threads&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Esta conversa toda só para dizer que ir buscar os vôos ao Skyscanner é uma tarefa que passa um tempo considerável em I/O e por isso beneficia IMENSO de usar várias &lt;em&gt;threads&lt;/em&gt;, já que o sistema operativo vai trocando o dono de cada &lt;em&gt;core&lt;/em&gt; do CPU de cada vez que eles estão à espera que a resposta do Skyscanner chegue pela rede. Seria algo como:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;thread&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_new_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_place_prices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;region&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;norte&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sul&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;este&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;oeste&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Feito! Imaginando que 70% do tempo é passado em I/O, em vez de demorarmos 15 minutos podemos passar para 5 minutos, yey \o/. Agora a parte propriamente dita de ir buscar os preços pode ficar para outro post, ou então…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/proof_to_reader.jpg&quot; alt=&quot;The proof is left as an exercise to the reader&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Outra questão que fica de fora é: qual é o número ideal de &lt;em&gt;threads&lt;/em&gt; que o meu programa deve ter? No exemplo estou a usar 4, mas se uma região tiver muito mais capitais que outra, então posso chegar a um ponto em que só tenho uma &lt;em&gt;thread&lt;/em&gt; a executar e estou basicamente com o mesmo problema inicial em que o programa não está a fazer nada enquanto espera a resposta do site. Por outro lado, não adianta ter o número de &lt;em&gt;threads&lt;/em&gt; igual ao número de capitais porque o computador tem um número limitado de &lt;em&gt;cores&lt;/em&gt; e o ideal é tê-los sempre todos ocupados mas sem perder tempo desnecessário com a mudança de contexto. Mais sobre isto e como chegar a uma solução ótima noutro post :D&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/blog/python-e-automacao-2/&quot;&gt;Automação 2&lt;/a&gt; was originally published by Next Commit at &lt;a href=&quot;http://localhost:4000&quot;&gt;Next Commit&lt;/a&gt; on  6 maio 2017.&lt;/p&gt;

  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Vamos Falar De Feedback]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/blog/vamos-falar-de-feedback/" />
  <id>http://localhost:4000/blog/vamos-falar-de-feedback</id>
  <published>2017-01-08 00:50:16 +0000</published>
  <updated>2017-01-08 00:50:16 +0000</updated>
  <author>
    <name>Miguel Cunha</name>
    <uri>http://localhost:4000</uri>
    <email>miguelfcunha@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Há uns meses atrás li o “&lt;em&gt;&lt;a href=&quot;https://www.amazon.co.uk/dp/0262525674/ref=cm_sw_r_tw_dp_x_GQcCybVDZBX89&quot;&gt;Design of Everyday Things&lt;/a&gt;&lt;/em&gt;”,
do Don Norman, e um dos aspetos que mais captou a minha atenção foi o &lt;strong&gt;feedback&lt;/strong&gt;. E à medida que fui lendo sobre a
importância do feedback e refletindo sobre como geralmente o menosprezámos, achei importante escrever um pouco sobre este
assunto.&lt;/p&gt;

&lt;p&gt;O &lt;strong&gt;feedback&lt;/strong&gt; prende-se com a ação de devolver informação ao utilizador de um sistema sobre o seu estado, se
determinada ação foi efetuada e qual o resultado dessa mesma ação. Seja num sistema de &lt;em&gt;software&lt;/em&gt;, num objeto do dia-a-dia,
numa relação humana ou numa situação profissional, o feedback é bastante importante.&lt;/p&gt;

&lt;p&gt;Vejamos um exemplo. Recentemente estive a compilar num &lt;em&gt;tutorial&lt;/em&gt; uma série de passos que permitem a um novo &lt;em&gt;developer&lt;/em&gt;
configurar o seu ambiente de trabalho/desenvolvimento. Apesar de parecer um trabalho trivial, é uma tarefa que se revela bem mais complexa
do que aquilo que inicialmente se espera: escrever, passo-a-passo e de forma compreensível, uma série de ações implica
um conhecimento relativamente bom do ambiente de desenvolvimento, das diferentes configurações e, enfim, da sua finalidade
e casos de uso. E por reconhecermos esta tarefa como trivial, acabamos por cair no típico erro de omitir alguns
passos que possam &lt;em&gt;parecer&lt;/em&gt; desnecessários (ou demasiado óbvios).&lt;/p&gt;

&lt;p&gt;Num caso como este, a necessidade de feedback é gritante. Apesar de ser capaz de validar o &lt;em&gt;tutorial&lt;/em&gt; sem qualquer tipo
de feedback, outro utilizador ser capaz de configurar o ambiente de desenvolvimento com base no meu &lt;em&gt;tutorial&lt;/em&gt; não revela
a sua eficácia. E só através de feedback por parte do utilizador é que serei capaz de o melhorar.&lt;/p&gt;

&lt;p&gt;O feedback é uma faca de dois gumes: é importante como ferramente para um melhoramento contínuo (de uma pessoa, produto
ou processo) mas, na forma e tempo errados, pode ser entendido como um ataque pessoal. E é pela facilidade que assim é
entendido, que, normalmente, nos abstemos de fornecer qualquer tipo de feedback. E isso é mau.&lt;/p&gt;

&lt;p&gt;Dar feedback é um processo complicado, principalmente quando existe conflito de interesses, falta de abertura ou ineficiência
na comunicação. Tipicamente, tal como Don Norman descreve, o &lt;em&gt;bom&lt;/em&gt; feedback (aquele que é útil) é:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Descritivo&lt;/strong&gt;: deve ter como base uma descrição imparcial, sem juízo de valores.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Específico&lt;/strong&gt;: objetivo e &lt;em&gt;straight to the point&lt;/em&gt;, sob pena de ser ignorado.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Direcionado&lt;/strong&gt;: para um receptor em específico, sem “mensagens escondidas” ou segundas interpretações, de forma a não ser mal interpretado.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Solicitado&lt;/strong&gt;: de forma a que se criar a cultura de ser algo bem recebido, positivo.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Oportuno&lt;/strong&gt;: para não se deixar para amanhã o que se pode fazer hoje…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;E para terminar deixo a questão: Quem deve tomar iniciativa no processo de feedback? O criador ou o utilizador final?
O gestor ou o colaborador?&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/blog/vamos-falar-de-feedback/&quot;&gt;Vamos Falar De Feedback&lt;/a&gt; was originally published by Next Commit at &lt;a href=&quot;http://localhost:4000&quot;&gt;Next Commit&lt;/a&gt; on  8 janeiro 2017.&lt;/p&gt;

  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Errar E Aprender]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/blog/errar-e-aprender/" />
  <id>http://localhost:4000/blog/errar-e-aprender</id>
  <published>2016-11-28 22:51:30 +0000</published>
  <updated>2016-11-28 22:51:30 +0000</updated>
  <author>
    <name>Miguel Cunha</name>
    <uri>http://localhost:4000</uri>
    <email>miguelfcunha@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Há dias li o que o meu colega Carlos Matias escreveu sobre &lt;a href=&quot;https://medium.com/@carlos.matias/the-real-startup-profile-99a7533b382c#.bmlaa9bz2&quot;&gt;os primeiros meses no mercado de trabalho&lt;/a&gt;
e achei tão interessante que decidi fazer o mesmo exercício: olhar para trás e analisar em perspetiva aquilo que aprendi
nos últimos meses; até porque, onde há bom e mau, há que louvar e que repreender.&lt;/p&gt;

&lt;h2 id=&quot;under-promise-over-deliver&quot;&gt;&lt;em&gt;Under promise, over deliver&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Este é, talvez, o melhor ensinamento que aprendi nos últimos tempos. Ok, é verdade, que ao longo de vários anos de
percurso académico me ensinaram isto, porém é daquelas coisas que realmente só aprendemos com as vicissitudes da vida
empresarial.&lt;/p&gt;

&lt;p&gt;Os imprevistos acontecem (prefiro a versão inglesa &lt;em&gt;shit happens&lt;/em&gt;). Várias vezes. Das formas mais ridículas e inesperadas
que se possa imaginar. E isso não significa que tenhamos falhado. Aliás, errar é uma fase bastante importante no processo
de aprendizagem! Mas atenção. Sempre gostei da velha máxima “&lt;em&gt;errar é próprio do homem, mas persistir no erro é coisa de tolos&lt;/em&gt;”.&lt;/p&gt;

&lt;p&gt;E aprender a estimar de forma a criar um compromisso sério e fiável não é tarefa fácil… Muito pelo contrário. É incrível
a dificuldade que temos em conseguir previsões próximas da realidade, muito principalmente por subestimar o desafio (ou
sobrestimar a nossa capacidade). Resumindo: aprendi que nunca se deve dizer “isso é só…”. Raramente é &lt;strong&gt;só&lt;/strong&gt; isso.&lt;/p&gt;

&lt;p&gt;Não me quero alongar muito nesta tema, até porque &lt;a href=&quot;https://crew.co/blog/why-you-should-always-under-promise-and-over-deliver/&quot;&gt;este artigo&lt;/a&gt;
diz tudo.&lt;/p&gt;

&lt;h2 id=&quot;trabalhar-mais-horas--obter-mais-resultados&quot;&gt;Trabalhar mais horas != Obter mais resultados&lt;/h2&gt;

&lt;p&gt;Não quero convencer ninguém que encontrei a fórmula mágica da produtividade ou que há apenas uma solução para este
problema que tantas empresas se debatem. Não é que não desconfiasse já da conclusão que retirei, mas faltava-me “ver
com os meus próprios olhos”. E pouco ou nada me resta de dúvida: trabalhar mais horas não aumenta a produtividade, muito
pelo contrário.&lt;/p&gt;

&lt;p&gt;Admito que não tenha dito nada de novo e que tal afirmação possa ser total banalidade. Porém, é incrível como esta é das
regras mais frequentemente quebradas e tão facilmente violada. Mas como não considero que este assunto seja tão linear
como aparenta, deixem-me acrescentar que já quebrei por várias vezes esta regra. Mas aconteceu pelo facto de estar tão
(qual é a palavra correta) compenetrado no trabalho, que nem dei pelas horas passar. Verdade. É daquelas situações
em que o trabalho não “sabe” a trabalho, em que me divirto e tenho prazer em “trabalhar”. É a parte positiva de trabalhar
em algo que gosto.&lt;/p&gt;

&lt;h2 id=&quot;a-faculdade-no-foi-tempo-perdido&quot;&gt;A faculdade não foi tempo perdido&lt;/h2&gt;

&lt;p&gt;Sempre ouvi o típico &lt;em&gt;cliché&lt;/em&gt; “&lt;em&gt;lembras-te do que aprendeste na faculdade? esquece tudo e sê bem-vindo ao
mundo do trabalho&lt;/em&gt;” com um quê de cepticismo e desconfiança. Sempre me soou contraproducente que uma boa parte daquilo
que passei os últimos 5 anos a aprender não tivesse aplicabilidade prática. E hoje reitero o que tenho dito nos últimos
anos: só assim pensa quem não aprendeu &lt;strong&gt;nada&lt;/strong&gt; na faculdade. Do trabalho se colhe os frutos, certo?&lt;/p&gt;

&lt;p&gt;E sim, concordo quando se discute que o plano de estudos do curso é desadequado. E sim, concordo com a opinião geral que nos
primeiros meses de trabalho vou aprender mais que nos últimos 5 anos de faculdade. E sabem porquê? Primeiro porque era
suposto isso acontecer. Ou alguém pensava que se ficava por ali? Que nunca mais iria ter que ler nenhum livro, ou artigo,
ou &lt;em&gt;blog&lt;/em&gt;, ou o que fosse? É suposto o processo de aprendizagem ser contínuo, por vários e longos anos (até que a morte nos
separe!). Em segundo lugar, isso só acontece devido às bases que os 5 anos anteriores nos deram e aos diversos conhecimentos
que vamos adquirindo. Em terceiro lugar, porque o foco da aprendizagem a nível académico são as boas práticas, a &lt;em&gt;engenharia de software&lt;/em&gt; e
não propriamente a tecnologia &lt;em&gt;X&lt;/em&gt; ou a &lt;em&gt;framework Y&lt;/em&gt;. E, como dizia um professor meu, “&lt;em&gt;um engenheiro tem uma caixa de ferramentas
à sua disposição e é tão importante saber usar as ferramentas, como saber quais e o porquê de as usar&lt;/em&gt;”.&lt;/p&gt;

&lt;p&gt;Talvez escreva mais sobre isto num próximo &lt;em&gt;commit&lt;/em&gt;. Para já, subscrevo as &lt;a href=&quot;/blog/adaptacao/&quot;&gt;palavras do Gabriel&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;o-talento-vence-jogos-mas-s-o-trabalho-de-equipa-ganha-campeonatos&quot;&gt;O talento vence jogos, mas só o trabalho de equipa ganha campeonatos&lt;/h2&gt;

&lt;p&gt;Se tiverem a mesma sorte que eu, este assunto, na verdade, é um não-assunto. Não só tenho a honra de poder
trabalhar com os melhores, como tenho a sorte de fazer parte dessa mesma equipa. Não significa que exista uma “equipa de
elite”, mas sim que existe plena confiança com quem trabalho e que os vejo como um modelo a seguir. E não é só (mas também)
no aspecto técnico que os venero, mas também na abertura e boa disposição que tenho o prazer de lidar diariamente.&lt;/p&gt;

&lt;p&gt;Sinceramente, penso que isto é algo que muita gente despreza na procura por um novo desafio. É normal filtrarem-se as
hipóteses de emprego pelas tecnologias que vamos trabalhar, mas é muito raro filtrar-se a equipa que se vai integrar e as
pessoas que a constituem. Felizmente tive a oportunidade de integrar um ambiente e uma equipa da qual me posso orgulhar.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=dHxUllyGaT0&quot;&gt;E se o meu patrão me estiver a ouvir…&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/blog/errar-e-aprender/&quot;&gt;Errar E Aprender&lt;/a&gt; was originally published by Next Commit at &lt;a href=&quot;http://localhost:4000&quot;&gt;Next Commit&lt;/a&gt; on 28 novembro 2016.&lt;/p&gt;

  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Glossário]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/blog/glossario/" />
  <id>http://localhost:4000/blog/glossario</id>
  <published>2016-11-09 00:00:00 +0000</published>
  <updated>2016-11-09 00:00:00 +0000</updated>
  <author>
    <name>Gabriel Candal</name>
    <uri>http://localhost:4000</uri>
    <email>gabrielcandal@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Uma das coisas com melhor relação custo/benefício que provavelmente pode haver num projeto
é uma Wiki, uma boa Wiki. Qualquer equipa, independentemente da área de negócio, da senioridade
dos membros ou das tecnologias com que trabalha pode ter uma e tirar mais proveito dela do que
o pouco trabalho que dá criá-la e mantê-la, tendo só que ter em atenção alguns (poucos) pormenores.&lt;/p&gt;

&lt;p&gt;O erro mais comum, e também mais fácil de evitar, é cair no exagero de querer documentar tudo, ou então
tenta manter uma estrutura super rígida dos documentos ou dos formatos do texto. Quanto mais simples, melhor.
Idealmente deve ser só um conjunto de ficheiros flat (nada de pastas dentro de pastas dentro de categorias dentro de …)
com algumas hiperligações entre eles. Um excelente exemplo de tudo isto que falei é a &lt;a href=&quot;https://github.com/lukesampson/scoop/wiki&quot;&gt;Wiki do Scoop&lt;/a&gt;,
onde qualquer pessoa encontra facilmente o que quer, seja começar rapidamente a usar a ferramente ou perceber melhor
do que se trata.&lt;/p&gt;

&lt;p&gt;Fora isso é só ter algum cuidado para que seja acessível por todos os &lt;em&gt;stakeholders&lt;/em&gt;, porque
apesar de realisticamente ser pouco provável que alguém fora das equipas técnicas a vá consultar,
não deixa de ter utilidade interna. No pior dos casos obriga a pessoa que está a escrever a ter
uma boa ideia do que está a falar, o que obriga a falar com várias pessoas até ter uma ideia global
minimamente clara do projeto, o que acaba por ajudar a construir uma visão clara e partilhada pela equipa.
Podia fazer tudo isto só com algumas conversas e evitar a perda de tempo que parece ser escrever tudo? Talvez, mas:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s-media-cache-ak0.pinimg.com/736x/3a/de/a7/3adea7f4cf88c621b7d5276a939cf73d.jpg&quot; alt=&quot;The palest ink is better than the best memory&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ainda que não vejam utilidade em tudo isto, espero pelo menos conseguir convencer alguém de que uma
versão &lt;em&gt;light&lt;/em&gt; de uma Wiki vale a pena: um glossário do projeto. Isto não é mais do que um nome feio
para uma coisa bastante simples: uma lista com o vocabulário relacionado com o projeto, que pode
conter coisas como termos de negócio (do género &lt;em&gt;omnichannel&lt;/em&gt;, &lt;em&gt;wholesale&lt;/em&gt;, etc) ou nomes de produtos
e projetos (por exemplo: &lt;em&gt;donald&lt;/em&gt; é um &lt;em&gt;dashboard&lt;/em&gt; de vendas, &lt;em&gt;palin&lt;/em&gt; um agregador de &lt;em&gt;newsfeeds&lt;/em&gt;, …).&lt;/p&gt;

&lt;p&gt;Quando li isto pela primeira vez no &lt;em&gt;The Pragmatic Programmer&lt;/em&gt; achava que era só mais uma ideia engraçada
para quando se tivesse pouco tempo livre, mas a minha pouca experiência tem mostrado que
ter um vocabulário partilhado entre a equipa tem um valor enorme, e para chegar a um entendimento comum
conversas laterais não chegam. Qual é a diferença entre &lt;em&gt;client&lt;/em&gt; e &lt;em&gt;customer&lt;/em&gt;? O que é &lt;em&gt;instore&lt;/em&gt;? &lt;em&gt;Vouchers&lt;/em&gt;,
&lt;em&gt;promocodes&lt;/em&gt; e &lt;em&gt;gift cards&lt;/em&gt; são a mesma coisa? Tudo isto é fácil de responder com um glossário, e evita-se
o problema de ter vários nomes para a mesma coisa, ou ainda pior, o mesmo nome para várias coisas.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/blog/glossario/&quot;&gt;Glossário&lt;/a&gt; was originally published by Next Commit at &lt;a href=&quot;http://localhost:4000&quot;&gt;Next Commit&lt;/a&gt; on  9 novembro 2016.&lt;/p&gt;

  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Adaptação]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/blog/adaptacao/" />
  <id>http://localhost:4000/blog/adaptacao</id>
  <published>2016-11-04 00:00:00 +0100</published>
  <updated>2016-11-04 00:00:00 +0100</updated>
  <author>
    <name>Gabriel Candal</name>
    <uri>http://localhost:4000</uri>
    <email>gabrielcandal@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Quando era mais novo fui empurrado para o conservatório de música. Em vez
de passar o dia todo a jogar futebol e playstation, lá tinha que tirar umas
horas para aprender a ler partituras, sentir os tempos e desenvolver ouvido
crítico. Não era muito bom na maior parte destas coisas, mas lá fui aprendendo
uma mão cheia de instrumentos, entre os quais flauta, piano, saxofone, xilofone
e uma carrada de outras coisas entre as quais &lt;a href=&quot;http://musicave.pt/3988-home_default/triangulo-sonor-gtr15.jpg&quot;&gt;ferrinhos&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;O que é que os instrumentos têm a ver uns com os outros? Nada. O que é que isto
tem a ver com informática? Tudo. Pessoas que sabem música (que não é o meu caso)
são músicos, não são pianistas nem flautistas, mesmo que se especializem nisso
não têm a mínima dificuldade em transitar de instrumento porque já aprenderam 90%
daquilo que precisam, depois é só uma questão de habituar às mecânicas específicas
do novo instrumento. Por outro lado, pessoas que sabem informática não são engenheiros de software, são
front-end developers, full-stack engineers, devops enthusiasts, etc etc.
Incomoda-me, por exemplo, sempre que leio um anúncio de emprego deste género:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Requirements:
* 2+ years MySql experience
* 2+ years .NET 3.5 experience
* 1+ years Javascript experience using AngularJS 1
* Proven track record of doing unit-tests using Mocha
* Fluent English
* Strong analytical skills
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sendo que o meu maior problema com esta filosofia é que se foca demasiado naquilo que sou capaz de fazer hoje
independentemente do quão bom pudesse ser daqui a uma semana ou um mês. O que é que interessa se uso Backbone
ou Ember? Java ou C#? Rails ou Django? MySql ou Postgres? MariaDB ou MongoDB? ActiveMQ ou RabbitMQ? Os princípios
fundamentais não deixam de ser os mesmo, continuam a ser frameworks web frontend, linguagens orientadas a objetos,&lt;br /&gt;
frameworks web, RDBMS, document stores e distributed messaging. Se alguém sabe os fundamentals de computer science
(algoritmos e estruturas de dados, sistemas operativos, networking, programação funcional e orientada a objetos,
compiladores, sistemas distribuídos, etc) tem tudo para rapidamente se adaptar a um processo ou a uma tecnologia
semelhante àquelas que já conhece tem tudo para igualar produtividade de outra pessoa que passou
os últimos anos preso àquela linguagem ou framework.&lt;/p&gt;

&lt;p&gt;Para um exemplo daquilo que considero um anúncio que se foca no importante, temos &lt;a href=&quot;https://landing.jobs/at/scalac-5529bb75-d565-4ce8-a1c9-151c14ae51fa/scala-developer&quot;&gt;este&lt;/a&gt;
da Scalac:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Requirements:
* Good understanding of Object Oriented and Functional Programming
* Proficiency in Scala (You don&#39;t have to be an expert, if you are promising we will help to become one)
* Experience with automated testing and continuous integration/delivery
* Knowledge and experience in writing modern asynchronous and multithreaded applications
* Commercial experience with any functional language or Java
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dá para perceber claramente que a posição é para Scala, mas uma pessoa que tenha um background relacionado não está
nem de perto nem de longe excluída à partida. Em vez de se focarem nas ferramentas, focam-se nos paradigmas (testes, CI/CD,
programação funcional e assíncrona). Este tipo de abordagem é reflexo da qualidade das empresas e pessoalmente sinto-me
100x mais motivado a saber mais sobre uma empresa que dê mais importância ao potencial, com uma visão de longo prazo sobre
aqueles que contrata, do que propriamente à produtividade no momento t0.&lt;/p&gt;

&lt;p&gt;Obviamente que em certas situações faz sentido incorporar alguém que não precise nem de período de adaptação nem de
formação, mas a variedade de competências e experiências é sempre importante, porque para quem só tem um martelo, tudo
é um prego.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/blog/adaptacao/&quot;&gt;Adaptação&lt;/a&gt; was originally published by Next Commit at &lt;a href=&quot;http://localhost:4000&quot;&gt;Next Commit&lt;/a&gt; on  4 novembro 2016.&lt;/p&gt;

  </content>
</entry>


<entry>
  <title type="html"><![CDATA[WebAssembly]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/blog/webassembly/" />
  <id>http://localhost:4000/blog/webassembly</id>
  <published>2016-11-01 00:00:00 +0100</published>
  <updated>2016-11-01 00:00:00 +0100</updated>
  <author>
    <name>Gabriel Candal</name>
    <uri>http://localhost:4000</uri>
    <email>gabrielcandal@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Depois de iniciativas como o &lt;em&gt;&lt;a href=&quot;http://asmjs.org/&quot;&gt;asm.js&lt;/a&gt;&lt;/em&gt;, em que o objetivo é trazer a &lt;em&gt;performance&lt;/em&gt;
de aplicações desktop (que tipicamente usam linguagens compiladas &lt;em&gt;ahead-of-time&lt;/em&gt;, como C/C++) para
o &lt;em&gt;browser&lt;/em&gt;, começou um esforço conjunto entre a Google, Mozilla, Microsoft, Apple e o W3C para 
definir um &lt;em&gt;standard&lt;/em&gt; de &lt;em&gt;“Assembly para a web”&lt;/em&gt;, ou seja, &lt;em&gt;bytecode&lt;/em&gt; que todos os &lt;em&gt;browsers&lt;/em&gt;
soubessem interpretar.&lt;/p&gt;

&lt;p&gt;Hoje foi feito um anúncio conjunto entre equipas do &lt;a href=&quot;http://v8project.blogspot.pt/2016/10/webassembly-browser-preview.html&quot;&gt;Chrome (V8)&lt;/a&gt;,
&lt;a href=&quot;https://hacks.mozilla.org/2016/10/webassembly-browser-preview/&quot;&gt;Firefox (SpiderMonkey)&lt;/a&gt;
e &lt;a href=&quot;https://blogs.windows.com/msedgedev/2016/10/31/webassembly-browser-preview/#PbkIl6BO6aMYUtfF.97&quot;&gt;Edge (Chakra)&lt;/a&gt; de que
o &lt;em&gt;WebAssembly&lt;/em&gt; chegou à fase de &lt;em&gt;browser preview&lt;/em&gt;, ou seja, é agora possível experimentar &lt;a href=&quot;http://webassembly.org/demo/&quot;&gt;uma demo&lt;/a&gt; em
todos os &lt;em&gt;browsers&lt;/em&gt; excepto no Safari (se bem que para o Edge é preciso usar a &lt;em&gt;build&lt;/em&gt; de &lt;em&gt;development&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Isto são boas notícias porque, quanto mais não seja, é impressionante ver um jogo feito em Unity a
correr com tanta fluidez num &lt;em&gt;browser&lt;/em&gt; (que é algo que foi inicialmente pensado para mostrar texto
e, quanto muito, algumas imagens).&lt;/p&gt;

&lt;p&gt;No entanto, para mim a melhor notícia de todas é que FINALMENTE todo o desenvolvimento &lt;em&gt;web&lt;/em&gt;
deixará de estar preso a uma só linguagem de programação. Atualmente todas as linguagens que
queiram ser usadas para desenvolvimento &lt;em&gt;web&lt;/em&gt; têm inevitavelmente que ser compiladas para
JavaScript (como Elm ou ClojureScript), o que introduz complexidade para quem desenvolve
linguagen, já que é obrigado a desenvolver a compilação texto-para-texto só para acabar
por ter uma linguagem alvo que para ser executada tem que haver &lt;em&gt;parsing&lt;/em&gt; do texto!&lt;/p&gt;

&lt;p&gt;Fora a questão de evitar o &lt;em&gt;parsing&lt;/em&gt;, que para programas grandes em dispositivos móveis
pode demorar até 40s, usar &lt;em&gt;bytecode&lt;/em&gt; em vez de JavaScript tem outras vantagens como
a facilidade em adicionar novas &lt;em&gt;features&lt;/em&gt; (incluindo melhores &lt;em&gt;profilers&lt;/em&gt;, &lt;em&gt;debuggers&lt;/em&gt;,
excepções de custo zero ou manipulação direta de memória, dentro de uma &lt;em&gt;sandbox&lt;/em&gt;, &lt;em&gt;à la&lt;/em&gt; C/C++)
e integrar perfeitamente com a &lt;em&gt;toolchain&lt;/em&gt; de LLVM, o que permite que várias outras linguagens
compilem para WebAssembly facilmente, tendo “apenas” que desenvolver um novo &lt;em&gt;backend&lt;/em&gt; para o compilador.&lt;/p&gt;

&lt;p&gt;Outra grande esperança que WebAssembly traz e que merece um parágrafo por si só é a
possibilidade de programar com &lt;em&gt;POSIX threads&lt;/em&gt;. Até à data &lt;em&gt;multithreading&lt;/em&gt; no &lt;em&gt;browser&lt;/em&gt; é feito via &lt;em&gt;WebWorkers&lt;/em&gt;,
o que é limitado pela forma como se passa informação (mensagens em vez de memória partilhada)
e pelo tipo de &lt;em&gt;threads&lt;/em&gt; que usa (&lt;em&gt;OS threads&lt;/em&gt; em vez de &lt;em&gt;coroutines/fibers/lightweight threads/green threads&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;De qualquer forma, JavaScript tão cedo não vai deixar de ser um cidadão de primeira classe
na &lt;em&gt;stack&lt;/em&gt; da &lt;em&gt;web&lt;/em&gt; e por isso está previsto existir suporte para chamadas síncronas entre
JavaScript e WebAssembly, o que permite uma migração progressiva, ou então apenas usar o novo
standard em secções do programa em que o desempenho seja crítico.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/blog/webassembly/&quot;&gt;WebAssembly&lt;/a&gt; was originally published by Next Commit at &lt;a href=&quot;http://localhost:4000&quot;&gt;Next Commit&lt;/a&gt; on  1 novembro 2016.&lt;/p&gt;

  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Problemas do Visual Studio]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/blog/visual-studio/" />
  <id>http://localhost:4000/blog/visual-studio</id>
  <published>2016-09-29 00:43:05 +0100</published>
  <updated>2016-09-29 00:43:05 +0100</updated>
  <author>
    <name>Miguel Cunha</name>
    <uri>http://localhost:4000</uri>
    <email>miguelfcunha@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Recentemente tenho utilizado o Visual Studio como ferramenta de desenvolvimento. Não tinha expectativas elevadas,
até porque nos últimos 9 meses tinha utilizado o CLion, porém não estava à espera de encontrar, naquilo que chamam
de “Visual Studio 2015”, um IDE tão incompleto. No texto que se segue tento resumir alguns pontos que me desagradaram e
que tornaram a minha experiência bastante negativa.&lt;/p&gt;

&lt;h2 id=&quot;ide-e-visual-studio-so-oximoros&quot;&gt;IDE e Visual Studio são oximoros&lt;/h2&gt;

&lt;p&gt;Antes de mais, o próprio conceito de IDE (&lt;strong&gt;Integrated Development Environment&lt;/strong&gt;) é logo posto em causa. Necessitam
de fazer uma ligação remota? FTP? Não há. Abrir uma consola? Não há. Abrir outros ficheiros que não sejam &lt;code&gt;.c, .cpp ou .h&lt;/code&gt;?
Também não é boa ideia, já que nem sequer têm &lt;em&gt;syntax highlighting&lt;/em&gt;…&lt;/p&gt;

&lt;p&gt;Na prática, e ao fim de alguns dias de frustração, vão acabar como eu: um ambiente de trabalho com o Visual Studio,
Atom (ou, ironia das ironias, Visual Studio Code), meia dúzia de consolas e algumas pastas abertas. Desnecessário, não?&lt;/p&gt;

&lt;h2 id=&quot;windows-only&quot;&gt;&lt;em&gt;Windows Only&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Outro grande problema (e dos grandes) prende-se com o Windows. Para começar, só conseguem correr o Visual Studio no
Windows, o que obriga a que toda a equipa utilize esse sistema operativo. Mas principalmente porque todo o Visual Studio roda à
volta do ecossistema Microsoft. Esqueçam a ideia de desenvolver aplicações &lt;em&gt;cross-platform&lt;/em&gt; (e nem me falem do
&lt;a href=&quot;https://blogs.msdn.microsoft.com/vcblog/2016/03/30/visual-c-for-linux-development/&quot;&gt;Visual C++ for Linux Development&lt;/a&gt;
que &lt;em&gt;crasha&lt;/em&gt; o Visual Studio a cada 10 minutos). Aliás, tenho vindo a investigar e desenvolver formas de o conseguir,
utilizando &lt;em&gt;containers&lt;/em&gt; Docker e outras ferramentas (mais sobre isto, talvez, noutro &lt;em&gt;commit&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;E acho que nem vale a pena dizer que têm de esquecer gcc, cmake, etc..&lt;/p&gt;

&lt;h2 id=&quot;intellisense--lento-e-pouco-inteligente&quot;&gt;Intellisense é lento e pouco inteligente&lt;/h2&gt;
&lt;p&gt;Qualquer programador dá bastante valor à capacidade do seu IDE de navegar pelo código de forma fácil e intuitiva e ter
ajudas como &lt;em&gt;code completion&lt;/em&gt;. No caso do Visual Studio, estas funcionalidades ficam a cargo do Intellisense (e da
paciência do programador).&lt;/p&gt;

&lt;p&gt;Em primeiro lugar, o Intellisense, por alguma razão, gasta bastante memória RAM (não me perguntem porquê). Em segundo,
não compreendo porque é que o Intellisense atualizar os seus índices seja algo tão crítico para bloquear por completo
qualquer ação no Visual Studio durante uns bons segundos.&lt;/p&gt;

&lt;p&gt;Dá-me um aperto no coração de cada vez que o Visual Studio me notifica por causa de erros ortográficos (expliquem-me lá
qual é a lógica de um IDE fazer &lt;em&gt;spell-checking&lt;/em&gt;…), mas nem sequer piar quando preciso de verificar os parâmetros que
a função X recebe.&lt;/p&gt;

&lt;p&gt;Análise estática de código? Nenhuma, acertaram!&lt;/p&gt;

&lt;h2 id=&quot;atalhos-templates-refactoring&quot;&gt;Atalhos? Templates? &lt;em&gt;Refactoring&lt;/em&gt;?&lt;/h2&gt;
&lt;p&gt;Lembram-se do quão repetitivo e &lt;em&gt;error-prone&lt;/em&gt; é escrever um ciclo &lt;code&gt;for&lt;/code&gt;? Ou fazer um &lt;code&gt;switch statement&lt;/code&gt;? Pois bem, o
Visual Studio tem algo chamado &lt;em&gt;Visual Studio Snippets&lt;/em&gt;, uma versão arcaica daquilo que a JetBrains chama de &lt;em&gt;Live
Templates&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Podia dar mil e um exemplos de comparação (ora aqui está outra boa ideia para um futuro &lt;em&gt;post&lt;/em&gt;). Fiquemo-nos só por dizer
que, infelizmente, o Visual Studio está a anos-luz da concorrência nesta área (e podem incluir aqui o Intellisense também).&lt;/p&gt;

&lt;h2 id=&quot;estrutura-dos-projetos-e-nomencleatura&quot;&gt;Estrutura dos projetos e Nomencleatura&lt;/h2&gt;
&lt;p&gt;Esta é uma das partes mais controversas e, portanto, espero não me alongar. Para começar, um bocado de contexto: o
Visual Studio decidiu chamar aquilo que entendemos como um projeto de &lt;strong&gt;Solução&lt;/strong&gt;. A solução é única e pode conter mais
que um projeto (aquilo que normalmente se chama de módulo), podendo cada projeto ter propriedades distintas. É aqui que
começa a confusão. Propriedades partilhadas por vários projetos, devem ser agrupadas em &lt;code&gt;props&lt;/code&gt; (&lt;em&gt;Project Properties&lt;/em&gt;) de
forma a evitar repetição de informação. Porém, não existe o conceito de “&lt;em&gt;Run Configurations&lt;/em&gt;”, pelo que as configurações
que podem fazer &lt;em&gt;compile and run&lt;/em&gt; são as que estão de momento ativas (sim, para mudar têm de ir à mão, uma a uma… não
há como ter configurações pré-definidas).&lt;/p&gt;

&lt;p&gt;Mas a confusão não se fica por aqui: já referi que não podem abrir 2 janelas de propriedades de projeto simultaneamente
(para comparar é necessário estar a alternar entre uma e outra)? E já referi que existem configurações de &lt;em&gt;Release&lt;/em&gt; e
&lt;em&gt;Debug&lt;/em&gt; (até aqui tudo OK), e que cada uma se subdivide em x86, x64, ARM, etc? E que, apesar desta explosão combinatória de
possibilidades e configurações, podem usar o “simpático” “&lt;em&gt;All Configurations&lt;/em&gt;? A idea parece boa ao início, mas basta
terem uma das configurações diferentes, que o Visual Studio vos presenteia com a informação também simpática &lt;code&gt;&amp;lt;different configurations&amp;gt;&lt;/code&gt;.
Muito informativo…&lt;/p&gt;

&lt;p&gt;Mas preparem-se… Deixei a “bomba” para o fim. Preparados? Aqui vai: o projeto do Visual Studio &lt;strong&gt;não tem qualquer relação&lt;/strong&gt;
com o sistema de pastas. Isto significa que a organização de pastas que têm no vosso projeto (ou solução no Visual Studio) não tem qualquer relação
com aquilo que vão encontrar dentro do Visual Studio. Podem organizar à vontade o vosso projeto com pastas e subpastas, que nada disso
se vai refletir dentro do Visual Studio.&lt;/p&gt;

&lt;p&gt;E a melhor parte é que se moverem um ficheiro de local no &lt;em&gt;filesystem&lt;/em&gt;, o Visual Studio perde-lhe a referência e vão ter
que remover o ficheiro do Visual Studio e voltar a adicionar. E criar um ficheiro? Se o fazem dentro do Visual Studio (para
não o ter que importar para lá mais tarde), o Visual Studio cria-o na &lt;em&gt;root&lt;/em&gt; do projeto (porque não há qualquer associação
com as pastas do &lt;em&gt;filesystem&lt;/em&gt;, lembram-se?). E se depois quisermos mover o recém-criado ficheiro para uma pasta? Voltamos ao
primeiro caso… Agora imaginem isto para projetos com centenas/milhares de ficheiros.&lt;/p&gt;

&lt;p&gt;Para colmatar esta falha (ou design propositado), o Visual Studio tem a noção de pastas virtuais (isto é, fazem o mesmo que
pastas, mas não existem no &lt;em&gt;filesystem&lt;/em&gt;), mas chama-lhe, carinhosamente, de filtros. Podem sempre, claro, replicar a
estrutura de pastas do &lt;em&gt;filesystem&lt;/em&gt; no Visual Studio, mas é repetir trabalho sem necessidade…&lt;/p&gt;

&lt;p&gt;E fico-me por aqui. E pelo &lt;strong&gt;CLion&lt;/strong&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/blog/visual-studio/&quot;&gt;Problemas do Visual Studio&lt;/a&gt; was originally published by Next Commit at &lt;a href=&quot;http://localhost:4000&quot;&gt;Next Commit&lt;/a&gt; on 29 setembro 2016.&lt;/p&gt;

  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Texto, 文本 ou စာသားမ?]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/blog/texto/" />
  <id>http://localhost:4000/blog/texto</id>
  <published>2016-09-04 00:00:00 +0100</published>
  <updated>2016-09-04 00:00:00 +0100</updated>
  <author>
    <name>Gabriel Candal</name>
    <uri>http://localhost:4000</uri>
    <email>gabrielcandal@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Se há alguma coisa que é simples e causa dores de cabeça mas mesmo assim é
negligenciada por todos os programadores/&lt;em&gt;software engineers&lt;/em&gt;/&lt;em&gt;javascript ninjas&lt;/em&gt;,
acho que é a codificação de texto.&lt;/p&gt;

&lt;p&gt;A norma mais comum para a representação e codificação de texto é o Unicode, em
que cada caratér é representado por um número. O conjunto de caratéres que
constituem a norma tem mais de 107 000 entradas, que vão desde letras latinas comuns
(&lt;code&gt;a b c&lt;/code&gt; …) a smiles com pinta (&lt;code&gt;😒&lt;/code&gt;), e cujo objetivo é ser universal e
suportar todos os alfabetos.&lt;/p&gt;

&lt;p&gt;Uma das formas de representar caratéres Unicode é recorrendo ao UTF-32, UTF-16
ou UTF-8 (o mais comum). O número de cada um reflete o número mínimo de bits que
cada caratér usa em cada formato; por exemplo, o UTF-32 define todos como tendo
4 bytes (32 bits, o que possibilita representar 2^31 possibilidades), o UTF-16
entre 2 e 4 bytes e o UTF-8 pode ter só 1 byte. Por exemplo, para a letra &lt;code&gt;a&lt;/code&gt;
(com o código Unicode correspondente ao decimal 65), as representações são:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;UTF-8: &lt;code&gt;0100 0001&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;UTF-16: &lt;code&gt;0000 0000 0100 0001&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;UTF-32: &lt;code&gt;0000 0000 0000 0000 0000 0000 0100 0001&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tanto o UTF-16 como o UTF-8, para conseguirem representar tantos caratéres como
o UTF-32, usam bits de continuação. Para caratéres fora do que é possível representar
com 1 byte (2^7 = 128), como por exemplo o &lt;code&gt;क़&lt;/code&gt; (representado por &lt;code&gt;0x0958&lt;/code&gt;), seguimos as instruções:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Começar pela representação em binário: &lt;code&gt;0000 1001 0101 1000&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Procurar o formato UTF-8 correspondente ao número de bits necessário (varia caso sejam
precisos 1, 2 ou 4 bytes). Neste caso são necessários 3 bytes, portanto segue o formato:
&lt;code&gt;1110 xxxx	10xx xxxx	10xx xxxx&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Substituir no formato os bits destinados ao caratér pela sua representação em
binário. Para um binário imaginário &lt;code&gt;ABCD EFGH IJKL MNOP&lt;/code&gt; seria &lt;code&gt;1110 ABCD
10EF GHIJ 10KL MNOP&lt;/code&gt;, para o &lt;code&gt;क़&lt;/code&gt; o resultado é: &lt;code&gt;1110 0000 1010 0101 1001 1000&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mais importante do que saber como são feitas as várias codificações é saber
as vantagens e desvantagens de cada uma. Como vimos antes, do UTF-8 ao UTF-32 o
espaço de armazenamento na maior parte dos casos aumenta, sendo só igual para os
caratéres de ordem mais elevada que realmente necessitem de 4 bytes em UTF-8.
A vantagem em usar UTF-32 é que, no caso de se estar a fazer um qualquer processamento
caratér a caratér, pode ser vantajoso ter a garantia que todos têm o mesmo tamanho
em memória, não sendo necessário qualquer descodificação. Por outro lado, o UTF-8
mapeia diretamente na representação em ASCII ou latin-1 (ISO 8859-1). Finalmente,
o UTF-16 oferece um meio-termo entre ambos os casos, o que é vantajoso quando
o predominante no texto são caratéres que necessetariam de 3 bytes em UTF-8, mas
apenas de 2 em UTF-16 (que consegue representá-los com menos espaço porque não
precisa de tantos bits de continuação); apesar de, devido aos caratéres como o
espaço, dígitos e &lt;em&gt;newline&lt;/em&gt; serem representáveis num só byte em UTF-8, a vantagem
prática em usar UTF-16 acaba por ser reduzida.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/blog/texto/&quot;&gt;Texto, 文本 ou စာသားမ?&lt;/a&gt; was originally published by Next Commit at &lt;a href=&quot;http://localhost:4000&quot;&gt;Next Commit&lt;/a&gt; on  4 setembro 2016.&lt;/p&gt;

  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Acelerar I/O]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/blog/acelerar-io/" />
  <id>http://localhost:4000/blog/acelerar-io</id>
  <published>2016-09-04 00:00:00 +0100</published>
  <updated>2016-09-04 00:00:00 +0100</updated>
  <author>
    <name>Gabriel Candal</name>
    <uri>http://localhost:4000</uri>
    <email>gabrielcandal@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;O título deste post é enganador, porque devia ser apenas “Acelerar O”, já que
vou apenas escrever sobre como há uns tempos, junto com um colega, tentamos
melhorar a velocidade de escrita de um programa em C++. Peço já desculpa em
adiantamento por qualquer erro ou falta de pormenor na narrativa, mas tudo isto
já foi há uns tempos.&lt;/p&gt;

&lt;p&gt;A ideia da coisa era simples: converter um formato binário para XML e vice-versa, sendo que
os ficheiros em XML utilizavam de 2 a 8x o tamanho do binário original (o que,
quando se tem binários na ordem dos GBs, é chato). Um dos requisitos era que
um binário de 1GB demorasse no máximo 30s a converter para XML (o que necessita
de um throughput de ~130MB/s, que é uma meta realista para um bom HDD).&lt;/p&gt;

&lt;p&gt;Lá desenvolvemos o bixo e fizemos as primeiras medições depois de configurar as
as otimizações do compilador (que era o SunStudio, já agora) … estava a demorar 90s,
o triplo do que era suposto. Depois do profiling devido, descobrimos que o problema
estava numa função bastante simples que fazia a conversão dos vários tipos de
atributos do XML para string.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attr_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;stringstream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;(...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;business&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logic&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;O primeiro passo foi evitar a construção de uma stringstream sempre que a função
era invocada.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attr_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stringstream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;(...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;business&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logic&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;70s, melhor mas ainda mais do dobro do esperado. Entretanto percebemos que os
templates davam uma machada grande na performance, e por isso começamos por
tentar &lt;em&gt;template specialization&lt;/em&gt; para os casos mais comuns:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attr_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%g&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;(...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;business&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logic&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attr_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stringstream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;(...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;business&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logic&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Pouco mudou: 65s. Deixamos de usar templates e stringstreams para as conversões
e passamos a ter uma função especializada para cada tipo de dados e além disso
passamos as funções para inline, mesmo assim não baixou dos 60s.&lt;/p&gt;

&lt;p&gt;A última coisa a fazer, e que levou a um speedup de 2x, foi em vez de escrever cada string individualmente usar user-level buffering, o que é só um nome engraçado
que se dá a quando o programa espera até ter uma certa quantidade de dados para
os escrever para o file descriptor.&lt;/p&gt;

&lt;p&gt;Havendo várias formas de o fazer, decidimos implementar um buffer circular, que
é adequado em situações que queremos ter um comportamento FIFO. Num buffer
circular temos uma região de memória reservada, de capacidade fixa, e vamos
adicionando elementos (que podem ser de tamanho variável), sendo que os
elementos mais recentes podem apagar os antigos (momento no qual se faz a escrita para o ficheiro).&lt;/p&gt;

&lt;p&gt;Se tivermos um buffer vazio e inserirmos os elementos &lt;code&gt;1 2 3&lt;/code&gt;, o resultado é:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/0/02/Circular_buffer_-_XX123XX_with_pointers.svg/250px-Circular_buffer_-_XX123XX_with_pointers.svg.png&quot; alt=&quot;buffer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;E se continuarmos e inserirmos &lt;code&gt;4 5 6 7 8 9 A B C&lt;/code&gt; ficamos com:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/0/05/Circular_buffer_-_6789AB5_with_pointers.svg/250px-Circular_buffer_-_6789AB5_with_pointers.svg.png&quot; alt=&quot;buffer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sendo que fazemos o dump do conteúdo para o ficheiro antes de inserir o &lt;code&gt;8&lt;/code&gt; que
substitui o &lt;code&gt;1&lt;/code&gt;. O objetivo de usar este tipo de escrita em batch é aumentar o
throughput, já que reduzimos o número total de operações de escrita, evitando ao máximo o overhead de cada chamada ao sistema. Outra micro-otimização que fizemos
foi usar uma região de memória para o buffer alocada contiguamente, ou seja,
em que os bytes estão seguidos na memória; se esta região tiver um tamanho que seja
múltiplo do tamanho das páginas do sistema que estamos a usar, isso permite que
haja DMA (direct memory access), o que permite ao hardware ler (e escrever) da
memória sem ter que recorrer ao CPU.&lt;/p&gt;

&lt;p&gt;Depois de tudo isto: 38.5MB/s, o que dá cerca de 26s para o 1GB, yey!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/blog/acelerar-io/&quot;&gt;Acelerar I/O&lt;/a&gt; was originally published by Next Commit at &lt;a href=&quot;http://localhost:4000&quot;&gt;Next Commit&lt;/a&gt; on  4 setembro 2016.&lt;/p&gt;

  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Gestão de Expetativas]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/blog/gestao-de-expetativas/" />
  <id>http://localhost:4000/blog/gestao-de-expetativas</id>
  <published>2016-07-19 04:20:02 +0100</published>
  <updated>2016-07-19 04:20:02 +0100</updated>
  <author>
    <name>Miguel Cunha</name>
    <uri>http://localhost:4000</uri>
    <email>miguelfcunha@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Faz tempo tive algumas conversas bastante interessantes acerca do mercado de trabalho e de como funcionam os “processos de
recrutamento”. Nos próximos parágrafos vou reproduzir alguns pontos mais interessantes e que geraram alguma discussão.&lt;/p&gt;

&lt;p&gt;Todos nós conhecemos os processos de recrutamento para uma empresa estabelecida no mercado, de média/grande dimensão:
inicialmente somos postos à prova numa (ou mais) entrevistas comportamentais, onde o candidato e a empresa têm oportunidade
de se conhecerem melhor.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Primeira discórdia:&lt;/strong&gt; “&lt;em&gt;para essas entrevistas não me costumo preparar porque… eu sou eu, eu sei quem sou&lt;/em&gt;”.&lt;/p&gt;

&lt;p&gt;Discordei. Fazer uma simples pesquisa, no &lt;em&gt;website&lt;/em&gt; da empresa, para absorver a informação que eles têm disponível é
uma ideia bastante eficaz, principalmente por duas razões: primeiro porque gosto de compreender o que a empresa faz, em que
mercado opera e se o que fazem me interessa particularmente; segundo (e mais importante) porque transforma o típico
“bombardeamento” de perguntas para uma conversa entre duas pessoas. Ter um conhecimento
relativamente sólido da informação que a empresa tem no seu &lt;em&gt;website&lt;/em&gt; (em que mercados opera, que tecnologias usa, os
produtos/serviços que vende e respetivos nomes, entre outros) dá-nos o poder de “tomar as rédeas da conversa”.&lt;/p&gt;

&lt;p&gt;Esta pesquisa prévia traz, como vantagem imediata, a capacidade de dialogar, ao invés de nos limitarmos a responder a questões. E isto,
na minha opinião, não só é positivo na medida em que o entrevistador fica com uma imagem nossa positiva, como também nos
permite filtrar todo o ruído a que somos expostos (a utilização de palavras cuidadas, apelativas, “charmosas”) e focarmo-nos
naquilo que realmente é essencial.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Segundo ponto de discussão:&lt;/strong&gt; “&lt;em&gt;a empresa X até é interessante, mas eu não compreendo nada do negócio deles e, portanto,
nunca vou conseguir subir na carreira&lt;/em&gt;”.&lt;/p&gt;

&lt;p&gt;Não podia discordar mais. Sim, tenho perfeita noção que “subir” na carreira
normalmente implica menos trabalho técnico e mais trabalho de gestão, mas não gosto de considerar isso uma fatalidade
da ascensão e reconhecimento profissional. Existem, certamente, pessoas que ficarão contentes por a progressão na
carreira implicar um salto da zona técnica para uma área de gestão, mas isso não significa que por se continuar numa
área técnica não seja possível existir progressão na carreira. E mais: não tenho dúvidas que em qualquer uma das duas
opções, seja necessário compreender sempre a área de negócio, a tendência de mercado, etc. Portanto, de qualquer uma das
formas, a necessidade de conhecimento da área de negócio é inevitável.&lt;/p&gt;

&lt;p&gt;Imaginemos que queremos seguir uma vertente técnica. Ao sermos “promovidos” para um nível de gestão, como nos sentiríamos?
Seria uma promoção? Ou uma despromoção? Sentir-me-ia confortável em transitar para uma posição que não desejo, só porque
é considerada a “normal ascenssão de carreira”?&lt;/p&gt;

&lt;p&gt;No final de contas, acredito (e espero daqui a uns anos confirmar isto) que existe progressão quer na vertente técnica,
quer na vertente de gestão, permitindo-nos, a cada um de nós, focar-se naquilo que realmente gosta de fazer. Basta gerir
as nossas expectativas.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/blog/gestao-de-expetativas/&quot;&gt;Gestão de Expetativas&lt;/a&gt; was originally published by Next Commit at &lt;a href=&quot;http://localhost:4000&quot;&gt;Next Commit&lt;/a&gt; on 19 julho 2016.&lt;/p&gt;

  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Remover a Sombra]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/blog/remover-a-sombra/" />
  <id>http://localhost:4000/blog/remover-a-sombra</id>
  <published>2016-04-27 00:00:08 +0100</published>
  <updated>2016-04-27 00:00:08 +0100</updated>
  <author>
    <name>Miguel Cunha</name>
    <uri>http://localhost:4000</uri>
    <email>miguelfcunha@gmail.com</email>
  </author>
  <content type="html">
    &lt;blockquote&gt;
  &lt;p&gt;Este é o primeiro post sobre padrões de scrum (sim, leram bem). O Gabriel ainda me tentou impedir, mas o
commit já estava feito…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Imaginemos uma equipa de &lt;em&gt;scrum&lt;/em&gt;. Essa equipa depende largamente do “João”. O “João” faz três vezes mais trabalho 
que qualquer outro membro da equipa, é um membro respeitado e a gestão confia na sua experiência e &lt;em&gt;know-how&lt;/em&gt; para 
cumprir os objetivos. O “João” é, resumindo, o herói da equipa.&lt;/p&gt;

&lt;p&gt;Infelizmente, a equipa depende deste herói que, para cumprir os objetivos nos tempos estipulados, não tem tempo 
(ou paciência) para servir de mentor aos outros membros, não os ajudando a evoluir e a melhorar. A equipa &lt;strong&gt;vive 
na sombra do herói&lt;/strong&gt;. Isto significa que, na verdade, apesar da equipa estar a cumprir os objetivos, esta não está 
a aproveitar o seu potencial, porque a sua dependência no herói não dá espaço aos outros membros para “crescerem”.&lt;/p&gt;

&lt;p&gt;Assim, o &lt;em&gt;ScrumMaster&lt;/em&gt; deve &lt;strong&gt;remover o herói da equipa&lt;/strong&gt; para que o resto tenha a luz necessária para florescer.&lt;/p&gt;

&lt;p&gt;Sim, exatamente. Pode parecer contra-intuitivo, mas o padrão &lt;a href=&quot;https://sites.google.com/a/scrumplop.org/published-patterns/product-organization-pattern-language/development-team/remove-the-shade&quot;&gt;&lt;em&gt;“Remove the Shade”&lt;/em&gt;&lt;/a&gt; 
existe mesmo.&lt;/p&gt;

&lt;p&gt;Obviamente esta não é uma decisão fácil, dado que:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pode ser difícil convencer a gestão a remover o melhor elemento da equipa (“&lt;em&gt;em equipa que ganha, não se mexe&lt;/em&gt;”). Principalmente em alturas críticas.&lt;/li&gt;
  &lt;li&gt;O herói pode-se sentir injustiçado por não ver o seu trabalho reconhecido.&lt;/li&gt;
  &lt;li&gt;O herói pode ter a sensação que está a ser “despromovido”.&lt;/li&gt;
  &lt;li&gt;As equipas de &lt;em&gt;scrum&lt;/em&gt; devem-se manter estáveis de forma a manter a &lt;a href=&quot;https://sites.google.com/a/scrumplop.org/published-patterns/product-organization-pattern-language/development-team/stable-teams&quot;&gt;privisibilidade do seu trabalho&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Uma falha de interpretação, ou falta de confiança, por parte do &lt;em&gt;ScrumMaster&lt;/em&gt; na decisão tomada (e a baixa produtividade num período inicial), 
pode levar a que, facilmente, esta decisão seja revertida, voltando-se ao problema inicial.&lt;/p&gt;

&lt;p&gt;Esta decisão deve ser consciente por parte do &lt;em&gt;ScrumMaster&lt;/em&gt;, dado que, durante um período inicial, a produtividade da equipa irá descer, enquanto 
esta “aprende” a enfrentar a tempestade. Tudo isto significa que o &lt;em&gt;ScrumMaster&lt;/em&gt; deve ter os &lt;em&gt;soft-skills&lt;/em&gt; necessários para lidar com os vários conflitos que podem 
emergir desta situação. Pode, talvez, ser a altura para intensificar a sua “veia” de &lt;a href=&quot;https://sites.google.com/a/scrumplop.org/published-patterns/product-organization-pattern-language/scrummaster/cheerleader&quot;&gt;&lt;em&gt;cheerleader&lt;/em&gt;&lt;/a&gt; de forma 
a manter, quer o herói, quer a restante equipa, motivados. Resumindo: o &lt;em&gt;ScrumMaster&lt;/em&gt; deve ser o &lt;a href=&quot;https://sites.google.com/a/scrumplop.org/published-patterns/product-organization-pattern-language/scrummaster/catalyst&quot;&gt;catalizador&lt;/a&gt; 
que permite à equipa superar esta nova fase.&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/blog/remover-a-sombra/&quot;&gt;Remover a Sombra&lt;/a&gt; was originally published by Next Commit at &lt;a href=&quot;http://localhost:4000&quot;&gt;Next Commit&lt;/a&gt; on 27 abril 2016.&lt;/p&gt;

  </content>
</entry>


<entry>
  <title type="html"><![CDATA[GPU e o Browser]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/blog/gpu-e-o-browser/" />
  <id>http://localhost:4000/blog/gpu-e-o-browser</id>
  <published>2016-03-15 00:00:00 +0100</published>
  <updated>2016-03-15 00:00:00 +0100</updated>
  <author>
    <name>Gabriel Candal</name>
    <uri>http://localhost:4000</uri>
    <email>gabrielcandal@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Nós, developers, temos tendência a ficar obececados (e bem) com a performance do software que escrevemos. O problema é quando essa obcessão é mal direcionada e nos preocupamos mais com as ferramentas que usamos do que com tudo o resto.&lt;/p&gt;

&lt;p&gt;Um bom exemplo disto é o desenvolvimento front-end para a web. Quem é que nunca ouviu &lt;em&gt;“Hey vocês ainda não usam React? É muito mais rápido! Usa uma cena chamada DOM virtual que é muito mais rápido!”&lt;/em&gt; seguido de &lt;em&gt;“Oh isso é old news, nós já estamos a migrar para Mercury, que nos benchmarks é 5x mais rápido que isso…“&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;Estas histórias multiplicam-se por muitas áreas, não é exclusivo da web. Outro exemplo clássico é sacrificar a clareza do código em prol da performance:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Em vez de:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Mesmo que o segundo caso seja mais conciso, menos propício a erros (a variável element está limitada no scope ao estritamente necessário) e tenha exatamente o mesmo desempenho na esmagadora maioria dos casos, porque os compiladores são desenvolvidos o suficiente para otimizar casos tão triviais.&lt;/p&gt;

&lt;p&gt;Podia continuar a dar exemplos, mas já chega de desabafar. O que queria mostrar hoje é uma técnica extremamente simples mas que pode ter um impacto enorme na performance de um cliente numa página web.&lt;/p&gt;

&lt;p&gt;Sem querer entrar em muito detalhe sobre o ciclo de render de um browser (ou seja, como reage a alterações no DOM, podem ler mais sobre isso &lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/rendering/#the-pixel-pipeline&quot;&gt;aqui&lt;/a&gt;), o importante é saber que os browsers constroem (recorrendo à DOM Tree e à CSS Tree) uma coisa chamada Render Tree, que contém Render Objects que por sua vez estão organizados em RenderLayers que são desenhados sobre Graphical Layers (&lt;a href=&quot;https://www.chromium.org/developers/design-documents/gpu-accelerated-compositing-in-chrome&quot;&gt;detalhes&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/eLlgjXLQbW-c2JWxfK0VxXbmV2-D90ub4dXYMblpHdyVyM_6a12JdfQKiokPrTcB-2UOn284A3teHK4P0e9Xlmm5uSxA7utj6Pggf7T-J7uxwc8iBPopZ7vtcCRYGvtteQ&quot; alt=&quot;Render Tree&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Confuso? Não é muito relevante, disto tudo só interessa retirar que podemos aumentar a performance evitando que uma porção grande da página tenha que ser re-desenhada (é esta a lógica da nova onde de frameworks front-end que usam o render engine do React ou o virtual-dom). O ideal, em termos de velocidade, era dar a cada Render Object o seu próprio Graphics/Composite Layer, mas isso não é feito por razões de poupança de VRAM (memória da placa gráfica).&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;//jsfiddle.net/Ltn0a263/1/embedded/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Podemos ver tudo isto a acontecer &lt;a href=&quot;https://jsfiddle.net/Ltn0a263/1/&quot;&gt;&lt;strong&gt;neste exemplo&lt;/strong&gt;&lt;/a&gt;. Antes de usarem, tenham cuidado com o número de imagens que usam (podem modificar no Javascript), porque vos pode bloquear a tab. Para verem o que se está a passar devem também ligar o contador de FPS do brower e fazer com que mostre as várias layers (&lt;a href=&quot;https://developer.chrome.com/devtools/docs/rendering-settings&quot;&gt;como fazer isso&lt;/a&gt;). Depois:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Carregar no ícone para começar a animação. Nada fluído, certo?&lt;/li&gt;
  &lt;li&gt;Descomentem o &lt;code&gt;transform&lt;/code&gt; em &lt;code&gt;image&lt;/code&gt; e carreguem em ‘Run’. Vêm que apareceu um quadrado à volta do ícone? Isso é um Graphical Layer novo. Notem que o uso da memória da GPU também disparou, isto é porque todas as texturas são carregadas para lá, em vez de ficarem na RAM para serem usadas pelo CPU. Experimentem carregar no ícone e vejam como está muito mais fluído, com FPSs muito superiores.&lt;/li&gt;
  &lt;li&gt;Voltem a comentar o que descomentaram, e desta vez descomentem as animações em &lt;code&gt;.image.animated&lt;/code&gt;. Vêm que o novo layer só aparece quando carregam no ícone, enquanto com o método anterior estava sempre lá? A razão para isso é que, com transformações 2D, esse layer só é criado on-the-fly.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Há outro tipo de operações que forçam a criaçam deste layer à parte:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Elementos &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; e &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/filter&quot;&gt;Filtros CSS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Elementos que sobrepõe (via &lt;code&gt;z-index&lt;/code&gt;) a algum que esteja num composite layer próprio&lt;/li&gt;
  &lt;li&gt;Transformações 3D&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.chromium.org/developers/design-documents/gpu-accelerated-compositing-in-chrome&quot;&gt;etc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No fundo, é um trade-off entre velocidade e memória. Outro problema que pode surgir é com o &lt;a href=&quot;http://keithclark.co.uk/articles/gpu-text-rendering-in-webkit/&quot;&gt;aspeto do tipo de letra&lt;/a&gt;, já que a GPU e o CPU não o fazem da mesma forma. Um truque engraçado para forçar a que um elemento seja renderizado na GPU é acrescentar-lhe, como fizemos no exemplo, algo como &lt;code&gt;transform: translateZ(0)&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/blog/gpu-e-o-browser/&quot;&gt;GPU e o Browser&lt;/a&gt; was originally published by Next Commit at &lt;a href=&quot;http://localhost:4000&quot;&gt;Next Commit&lt;/a&gt; on 15 março 2016.&lt;/p&gt;

  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Programar & Documentar]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/blog/progamar-e-documentar/" />
  <id>http://localhost:4000/blog/progamar-e-documentar</id>
  <published>2016-03-13 21:54:00 +0100</published>
  <updated>2016-03-13 21:54:00 +0100</updated>
  <author>
    <name>Miguel Cunha</name>
    <uri>http://localhost:4000</uri>
    <email>miguelfcunha@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;No âmbito da minha dissertação tenho trabalhado com uma biblioteca &lt;em&gt;open source&lt;/em&gt; que, infelizmente, está mal documentada.
E eu sou grande apologista de projetos &lt;em&gt;open source&lt;/em&gt;, mas deixemos isso para um outro &lt;em&gt;commit&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Tal como as metodologias &lt;em&gt;agile&lt;/em&gt; nos ensinaram, existe sempre um &lt;em&gt;trade-off&lt;/em&gt; entre &lt;em&gt;working software&lt;/em&gt; e
&lt;em&gt;documented software&lt;/em&gt;. Ainda assim, há cuidados básicos que devemos ter para deixar o código tão legível e claro
quanto possível. Neste &lt;em&gt;commit&lt;/em&gt; foquemo-nos nas assinaturas das funções.&lt;/p&gt;

&lt;p&gt;Imaginemos a função &lt;code&gt;pause&lt;/code&gt;, que coloca a &lt;em&gt;thread&lt;/em&gt; onde é executada em pausa. Se essa função estiver definida como&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeToPause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;existirão, naturalmente, dúvidas sobre qual a unidade de tempo a ser passada como argumento. Segundos? Milisegundos?
Minutos?&lt;/p&gt;

&lt;p&gt;Apesar de já ser mais aceitável termos algo como &lt;code&gt;void pause(int timeToPauseInSeconds);&lt;/code&gt;, porque não declará-la como&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Time&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeToPause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;ou com os tipos &lt;code&gt;std::chrono::duration&lt;/code&gt;&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; introduzidos no C++11, que pretendem terminar com esta ambiguidade:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;milliseconds&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeToPause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Agora imaginemos que queremos aumetar a granularidade das unidades, de forma a conseguir pausar ao nível do nanosegundo.
Neste caso, passaríamos a ter&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nanoseconds&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeToPause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Agora imaginem que precisamos de outra função para parar ao nível do microsegundo… Ok, acho que já entenderam onde quero
chegar. Obviamente podemos escrever esta função de uma forma mais genérica&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeToPause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this_thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeToPause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// ... outras ações...
&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;pause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// mau: não sabemos as unidades
&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;pause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;milliseconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// bom
&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;pause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// bom: possível a partir do C++14
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;que, já agora, utiliza um template da biblioteca de suporte a &lt;em&gt;&lt;a href=&quot;http://en.cppreference.com/w/cpp/thread&quot;&gt;threads&lt;/a&gt;&lt;/em&gt;
também introduzida no C++11. Esta combinação permite interoperabilidade com o tipo de granularidade de tempo que deserjarmos.&lt;/p&gt;

&lt;p&gt;Reparem como introduzi outra alteração no código que ainda não discutimos. Decidi passar o valor por referência e, como
tal, utilizei a &lt;em&gt;keyword&lt;/em&gt; &lt;code&gt;const&lt;/code&gt; como garantia de que o valor não irá ser alterado. Isto não só me dá segurança de que
irei obter um erro em &lt;em&gt;compile-time&lt;/em&gt; se a regra for violada, como também serve de boa documentação. De que forma? Sigam
o raciocínio com um novo exemplo.&lt;/p&gt;

&lt;p&gt;Imaginemos a função &lt;code&gt;countToTen&lt;/code&gt;, que recebe um inteiro por referência e conta, a partir desse valor, até 10:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;countToTen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Sem vermos a documentação (se existir), ou o código, não temos garantia nenhuma de que o valor de &lt;code&gt;number&lt;/code&gt; se mantém
inalterado, como na implementação que se segue&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;countToTen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Assim como também podemos ter uma implementação que não muda o valor da variável&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;countToTen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Independentemente da implementação, a simples inclusão da &lt;em&gt;keyword&lt;/em&gt; &lt;code&gt;const&lt;/code&gt; não só melhora a qualidade e robustez do
código, como também dá garantias a futuros utilizadores da vossa função que o valor variável que passam como argumento
não irá ser alterado. Assim, em operações que necessitem de receber um valor por referência, a
&lt;em&gt;keyword&lt;/em&gt; &lt;code&gt;const&lt;/code&gt; é vossa amiga!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;countToTen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;E sim, eu sei que a questão, neste caso, fica resolvida se passarmos por valor, mas imaginemos que o gasto computacional
para copiar um inteiro é relevante o suficiente para passarmos apenas uma referência.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;http://en.cppreference.com/w/cpp/chrono &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/blog/progamar-e-documentar/&quot;&gt;Programar &amp; Documentar&lt;/a&gt; was originally published by Next Commit at &lt;a href=&quot;http://localhost:4000&quot;&gt;Next Commit&lt;/a&gt; on 13 março 2016.&lt;/p&gt;

  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Automação 1]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/blog/python-e-automacao-1/" />
  <id>http://localhost:4000/blog/python-e-automacao-1</id>
  <published>2016-03-10 00:00:00 +0000</published>
  <updated>2016-03-10 00:00:00 +0000</updated>
  <author>
    <name>Gabriel Candal</name>
    <uri>http://localhost:4000</uri>
    <email>gabrielcandal@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Como falei &lt;a href=&quot;/blog/git-checkout-gcandal/&quot;&gt;num post anterior&lt;/a&gt;, automatizar&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; tem benefícios, principalmente se estivermos a falar para pessoas que já sabem programar e que por isso não têm que passar pela aprendizagem do que pode ou não ser automatizado (apesar de que normalmente a resposta é: tudo).&lt;/p&gt;

&lt;p&gt;De todas as linguagens que podíamos usar para este tipo de tarefa, a minha preferida (e reparem que não disse a melhor, porque isso não existe) é &lt;strong&gt;Python&lt;/strong&gt;&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. Porquê?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;É &lt;strong&gt;dinamicamente tipada&lt;/strong&gt;. Ou seja, uma mesma variável pode ter mais do que um tipo durante o seu ciclo de vida. Era uma string e passou a ser um inteiro? Paciência, vive com isso, porque o compilador não se vai queixar. Sacrifica verificação da validade do programa em benifício do tempo de escrita, o que &lt;strong&gt;para scripts&lt;/strong&gt; me parece um bom tradeoff. Se começas a sentir-te perdido pela falta de tipos provavelmente o teu programa cresceu demais, por isso lembra-te:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://www.azquotes.com/picture-quotes/quote-this-is-the-unix-philosophy-write-programs-that-do-one-thing-and-do-it-well-write-programs-douglas-mcilroy-81-95-07.jpg&quot; alt=&quot;UNIX philosophy&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;É fácil de aprender, não só por ser bastante alto nível e expressiva, ou pela sintaxe simples, mas também pelas biblitoecas de interface intuitiva. Queres ler um ficheiro de texto com nomes de alunos de duas cadeiras e imprimi-los no formato certo sem duplicados?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;print [name.capitalize() for name in set(input()) ^ set(input())]&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bibliotecas para tudo e mais alguma coisa! Manipulação de imagem (pillow), vídeo (moviepy, que serve como camada superior ao ffmpeg), HTTP (requests ou Mechanize, que “emula” um browser até certo ponto), extração de informação de páginas HTML (BeautifulSoup) ou compressão (zipfile). Como navegar numa estrutura de diretórios e rodar todos os PNGs 45º?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;[PIL.Image.open(file).rotate(45).save() for file in glob.glob(&#39;/target/**/**/*.png&#39;)]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Tudo isto pode, e deve, ser usado para melhoria constante dos processos internos das empresas (ou pessoais, se forem como &lt;a href=&quot;https://www.jitbit.com/alexblog/249-now-thats-what-i-call-a-hacker/&quot;&gt;o administrador de sistemas que tirava cafés por SSH&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Há uma tarefa rotineria que a equipa de design tem que fazer, como renomear os ficheiros exportados pelo Photoshop, centrar imagens verticalmente e depois comprimir tudo? Python.&lt;/p&gt;

&lt;p&gt;A malta de gestão todos os dias verifica se as taxas de câmbio estão dentro de um certo limite do que está definido? Python. Exemplo:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;mechanize&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bs4&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;country&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mechanize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;country&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s/change_country/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;country&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bs4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BeautifulSoup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;html.parser&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;meta_tag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;meta&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;property&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;og:price:amount&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meta_tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;country&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;PT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;base_price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get__price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rated_price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;country&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;country&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rated_price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base_price&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.05&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;our_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authority_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;aye&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ney&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;E há muitos outros exemplos.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.doppnet.com/gfx/2013-11-09-automation-meme.jpg&quot; alt=&quot;automate all the things&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Em termos de Software Engineering propriamente dito, este conceito está na origem do movimento de DevOps, que tenta aplicar esta coisas ao ciclo de desenvolvimento de software até chegar a um ponto de continuous deployment, em que cada entrada de código nova no repositório faz com que uma série de scripts de automação (testes, análise estática, deployment, …) sejam executados. Podem perguntar mais sobre isto ao &lt;a href=&quot;http://cmcmteixeira.github.io/&quot;&gt;Carlos Teixeira&lt;/a&gt;, que está a fazer uma tese em “Towards DevOps Practices and Patterns from the Portuguese Startup Scene”.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;automatizar ~= scripting &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;Há várias implementações da linguagem e para todos os gostos: CPython (a implementação de referência), PyPy (inclui um compilador JIT para melhorias na performance em runtime), Jython (JVM) ou IronPython (.NET). Num contexto de automação, sempre que falar em Python, estou-me a referir a CPython. A vantagem em relação a outras implementações é ter um tempo de startup geralmente mais curto e vir instalado por defeito na maioria das distribuições Linux (por exemplo, o Ubuntu depende bastante da linguagem). &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/blog/python-e-automacao-1/&quot;&gt;Automação 1&lt;/a&gt; was originally published by Next Commit at &lt;a href=&quot;http://localhost:4000&quot;&gt;Next Commit&lt;/a&gt; on 10 março 2016.&lt;/p&gt;

  </content>
</entry>


<entry>
  <title type="html"><![CDATA[git checkout -b gcandal]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/blog/git-checkout-gcandal/" />
  <id>http://localhost:4000/blog/git-checkout-gcandal</id>
  <published>2016-03-06 00:00:00 +0000</published>
  <updated>2016-03-06 00:00:00 +0000</updated>
  <author>
    <name>Gabriel Candal</name>
    <uri>http://localhost:4000</uri>
    <email>gabrielcandal@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Para o meu primeiro post queria, antes de continuar, pedir que tivesses alguma paciência e tentasses ler o máximo possível sem fechar a tab
ou os olhos. Mesmo que no fim fiques a pensar “Ok, mais valia ter ido ler um tutorial de GraphQL, não aprendi nada” não desistas do
&lt;em&gt;Next Commit&lt;/em&gt;, prometo que vamos melhorar…&lt;/p&gt;

&lt;p&gt;Passando ao que interessa, neste post vou falar um bocado da &lt;strong&gt;importância de automatizar tarefas&lt;/strong&gt; (pessoal de design/gestão/marketing/…, isto
também é para vocês!), que serve de introdução a uma série de posts mais técnicos sobre como temos tirado proveito disso na &lt;a href=&quot;http://ripe.tech&quot;&gt;Ripe&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Porque é que automatizamos tarefas? A resposta parece ser óbvia: para poupar tempo. Mas então, porque é que não automatizamos &lt;strong&gt;todos&lt;/strong&gt;
os processos manuais? Toda a gente gosta de ter mais tempo livre. Também parece mais ou menos óbvio: o esforço pode não compensar.&lt;/p&gt;

&lt;p&gt;A verdade é que, muitas vezes, automatizar acaba por demorar mais tempo do que aquilo que tínhamos previsto.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://imgs.xkcd.com/comics/automation.png&quot; alt=&quot;automation xkcd&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Aquilo de que te queria convencer é que… isto é mentira! 😄&lt;/p&gt;

&lt;p&gt;Ou melhor, não é toda a verdade. A automação deve ser vista como um investimento e por isso normalmente quando eu penso em gastar 1 hora
a escrever um programa para me poupar de um trabalho manual qualquer é porque repito esse trabalho vezes suficientes para, antes de chegar
à reforma, recuperar essa hora perdida. Esta visão é simplista e deixa de lado uma parte importante: a energia mental que poupamos em
não estar sempre a fazer a mesma tarefa rotineira.&lt;/p&gt;

&lt;p&gt;Podes pensar nisto como uma espécia de &lt;a href=&quot;http://cdn.igeeksblog.com/wp-content/uploads/Vinsic-Tulip-iPhone-Power-Bank.jpg&quot;&gt;powerbank&lt;/a&gt;:
mesmo que não tenha um rendimento de 100% (ou seja, nunca consegues tirar de lá tanta energia como a que meteste), podes guardar
energia quando tens oportunidade para isso para quando te fizer falta está disponível. O princípio para a automação é o mesmo,
podes nunca recuperar aquela hora que perdeste a transformar uma tarefa de 5 minutos numa de 1 clique, mas se calhar evitaste
ter que interromper um trabalho qualquer que estavas a fazer e que exigia concentração por causa desses 5 minutos e aí o ganho
de produtividade compensa a hora que investiste.&lt;/p&gt;

&lt;p&gt;Isto também aumenta o tempo de resposta das empresas. Se estás num período mais calmo e te sentes com energia e motivação para dedicar
a este tipo de exercício, ou simplesmente queres procrastinar sem peso na consciência, podes aproveitar para guardar energia no powerbank
para, durante uma altura crítica, não teres que fazer um esforço mental para te desviar da tarefa importante em que estavas a trabalhar,
o que ia prejudicar a tua produtividade.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Concretamente&lt;/strong&gt;, que automações são essas? Pode ser usar um serviço externo como o &lt;a href=&quot;http://mailchimp.com/&quot;&gt;mailchimp&lt;/a&gt; para campanhas
de marketing digital ou o &lt;a href=&quot;https://ifttt.com&quot;&gt;IFTTT&lt;/a&gt; para coisas mais pessoais
(&lt;a href=&quot;https://ifttt.com/recipes/99068-save-new-email-attachments-to-google-drive&quot;&gt;automaticamente gravar todos os anexos de email que recebes na Drive&lt;/a&gt;
ou &lt;a href=&quot;https://ifttt.com/recipes/191854-share-a-message-and-your-location-with-a-group&quot;&gt;com 1 clique enviar a tua localização para um grupo de amigos&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;No outro dia a minha namorada, que está a escrever uma dissertação em ortodontia, tinha que saber quantos anos, meses e dias
se tinham passado entre a data de nascimento de um paciente e a última radiografia. Estando eu em informática, sempre pensei que ela estivesse a fazer
isso com algumas fórmulas de Excel, mas não fiquei chocado quando vi que estava a fazer tudo à mão, já que ela nunca teve grande formação nesse assunto
e a base de dados tinha as datas num formato esquisito. O que me chocou foi quando descobri que a base de dados tinha &lt;strong&gt;centenas&lt;/strong&gt; de entradas.
Uma coisa que à mão ia demorar HORAS, passado 15 minutos e algumas pesquisas no Google ficou totalmente automática (obrigado Métodos Numéricos 💙).&lt;/p&gt;

&lt;p&gt;No caso de alguém de saúde é natural que isto aconteça, já que não têm um &lt;em&gt;mindset&lt;/em&gt; de constante melhoria de processo, muito menos de programação, por
isso é compreensível. O problema é que isto também acontece em muitas áreas de engenharia, mesmo em informática.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s-media-cache-ak0.pinimg.com/564x/71/27/68/712768b8edde95f6c128aa9a3f7d8865.jpg&quot; alt=&quot;common sense is not so common&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Amigo, é só estares atento! Se durante o teu dia há alguma coisa que achas que podia ser feita por um macaco com treino suficiente (i.e.: é repetitivo)
então muito provavelmente podes automatizar isso! É só estares atento. Se achas que isso acontece, mas não sabes exatamente como resolver, podes
enviar e-mail ao Miguel Cunha (é só veres os contactos num dos posts dele) e ele terá todo o gosto em ajudar-te &lt;em&gt;pro bono&lt;/em&gt; 😄.&lt;/p&gt;

&lt;p&gt;Termino com uma resolução de ano novo atrasada: escrever 1 post de 15 em 15 dias. É essa a meta e por cada dia que me atrase como uma bolacha maria sem
usar os dentes. O próximo post será sobre como temos adotado filosofia na &lt;a href=&quot;ripe&quot;&gt;Ripe&lt;/a&gt; sob a forma de DevOps: porque o fizemos, o que fizemos
e como fizemos.&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/blog/git-checkout-gcandal/&quot;&gt;git checkout -b gcandal&lt;/a&gt; was originally published by Next Commit at &lt;a href=&quot;http://localhost:4000&quot;&gt;Next Commit&lt;/a&gt; on  6 março 2016.&lt;/p&gt;

  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Diz-me Como Geres e Dir-te-ei Quem És]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/blog/diz-me-como-geres-e-dir-te-ei-quem-es/" />
  <id>http://localhost:4000/blog/diz-me-como-geres-e-dir-te-ei-quem-es</id>
  <published>2016-02-27 16:00:48 +0000</published>
  <updated>2016-02-27 16:00:48 +0000</updated>
  <author>
    <name>Miguel Cunha</name>
    <uri>http://localhost:4000</uri>
    <email>miguelfcunha@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Caro &lt;em&gt;Scrum Master&lt;/em&gt;/&lt;em&gt;Team Manager&lt;/em&gt;/&lt;em&gt;Team Leader&lt;/em&gt;/&lt;em&gt;Sprint Master&lt;/em&gt;,&lt;/p&gt;

&lt;p&gt;Antes de mais deixa-me dizer que te respeito. Imenso. Mas há que pôr os pontos nos &lt;em&gt;is&lt;/em&gt;: o respeito mútuo faz parte da
convivência entre seres humanos; mas lá porque te respeito, não significa que te deva submissão total ou me reduza à minha
pobre, triste e diminuta insignificância quando falas, opinias ou simplesmente mandas uns &lt;em&gt;bitaites&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Compreendo que o teu trabalho, e os frutos que dele resultam, tenham um sabor agridoce: passas esquecido nas grandes
vitórias e és espezinhado quando as coisas dão para o torto. Não duvido que gostes do que fazes e acredito que os
&lt;em&gt;zums-zums&lt;/em&gt; que ouves no corredor, questionando “&lt;em&gt;o que é que ele faz? Qual é o papel dele? É que eu ainda não percebi
muito bem…&lt;/em&gt;”, te incomodem.&lt;/p&gt;

&lt;p&gt;Agora, quando as pessoas que geres têm &lt;strong&gt;medo&lt;/strong&gt; de fazer o que quer que seja, algo está mal. Quando a maneira mais fácil
da tua equipa conseguir ter a tua atenção é através de um e-mail, algo está mal. Quando perco a motivação para o projeto
porque não confias em mim (nem na equipa) e nas nossas capacidades para o levar a bom porto, não estás a fazer o teu trabalho.&lt;/p&gt;

&lt;p&gt;Eu compreendo que os teus 10 ou 15 anos de experiência te permitam antever problemas que um “caloiro” como eu, com pouca ou
nenhuma experiência, teria dificuldades em ver. Mas pedires para escalonar um projeto de vários meses em tarefas de 4 horas,
não estás a reduzir riscos e muito menos a antecipar problemas. Estás a ser retardado. Só isso.&lt;/p&gt;

&lt;p&gt;Se não confias em nós para realizar o projeto, então diz-nos isso. Com &lt;strong&gt;transparência&lt;/strong&gt;. E se não confias em nós para realizar
o projeto, garanto-te que também não confiámos em ti para o gerir. Tal como o respeito, a confiança (ou a falta dela) também
é mútua. E ambas se cultivam. Mas leva tempo… e paciência.&lt;/p&gt;

&lt;p&gt;Transmitir &lt;strong&gt;confiança&lt;/strong&gt; não é gritar connosco durante meia hora e no fim exclamar “&lt;em&gt;vocês conseguem!&lt;/em&gt;”. Se queres transmitir
confiança não te fiques só pela crítica. Apresenta soluções. Delega tarefas. Não nos digas por alto como se faz. Demonstra-o.
Lidera pelo exemplo.&lt;/p&gt;

&lt;p&gt;Se me permites que te aponte o dedo mais uma vez, não te auto-intitules &lt;em&gt;Scrum Master&lt;/em&gt; quando, diariamente, violas os princípios
mais básicos do &lt;em&gt;Agile Manifesto&lt;/em&gt;. Faz-me alguma confusão. E deveria-te fazer ainda mais confusão a ti, dado que ou tu ou a equipa
não fazem ideia do que significam tais conceitos. Seja qual for, continuas a fazer mal o teu trabalho.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Se parasses para te olhares ao espelho, irias reparar que foges do &lt;em&gt;Agile&lt;/em&gt; como o diabo da cruz. Ainda te achas &lt;em&gt;Scrum
Master&lt;/em&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Desculpa-me estar a insitir, mas acho quero deixar bem claro: se o trabalho que desenvolvi não superou o teu &lt;em&gt;standard&lt;/em&gt;
de qualidade (e eu aceito isso de ânimo leve), não digas que preciso de mais tempo para pensar e refletir no assunto.
Ajuda-me, dá-me luzes, encaminha-me numa direção. Já nem peço que sugiras soluções, apenas rogo que apontes o que pode ser
melhorado. Não sejas vago. Critica, mas critica objetivamente. Com clareza.&lt;/p&gt;

&lt;p&gt;Não leves tudo o que disse a peito. Comecei este desabafo a falar em respeito e assim o termino. O respeito está lá, em
menor quantidade, mas existe. Não sou pessoa de guardar rancor. Mas também não digo religiosamente &lt;em&gt;amén&lt;/em&gt; a todas as tuas doutrinas.&lt;/p&gt;

&lt;p&gt;E sim, continuo a aprender contigo, diariamente, coisas boas e más. O que me leva a pensar que, se calhar, até estás a fazer
bem o teu trabalho.&lt;/p&gt;

&lt;p&gt;Cordialmente,&lt;/p&gt;

&lt;p&gt;Um Engenheiro de &lt;em&gt;Software&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;P.S.: Se marcas uma reunião para discutirmos um documento, por favor, tira 30 minutos antes para realmente leres a
porra do documento!&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/blog/diz-me-como-geres-e-dir-te-ei-quem-es/&quot;&gt;Diz-me Como Geres e Dir-te-ei Quem És&lt;/a&gt; was originally published by Next Commit at &lt;a href=&quot;http://localhost:4000&quot;&gt;Next Commit&lt;/a&gt; on 27 fevereiro 2016.&lt;/p&gt;

  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Os 5 Mandamentos Dos Projetos Académicos]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/blog/os-5-mandamentos-dos-projetos-academicos/" />
  <id>http://localhost:4000/blog/os-5-mandamentos-dos-projetos-academicos</id>
  <published>2016-01-09 00:09:43 +0000</published>
  <updated>2016-01-09 00:09:43 +0000</updated>
  <author>
    <name>Miguel Cunha</name>
    <uri>http://localhost:4000</uri>
    <email>miguelfcunha@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Todos nós já passamos por algumas destas situações. Fazer um projeto académico é um desafio educativo, científico, mas,
principalmente, de paciência. Ainda assim, o resultado é, na maioria das vezes, bastante positivo.&lt;/p&gt;

&lt;p&gt;Ora o nosso projeto não funciona (e nós não sabemos o porquê), ora funciona (e também não sabemos como). Aqui ficam, inspirado
pela &lt;a href=&quot;http://www.slideshare.net/slideshow/embed_code/42740442&quot;&gt;apresentação&lt;/a&gt; de dois professores da &lt;em&gt;FEUP&lt;/em&gt;, os 5 mandamentos
dos projetos académicos.&lt;/p&gt;

&lt;h1 id=&quot;amar-o-nosso-cdigo-sobre-todas-as-coisas&quot;&gt;1. Amar o nosso código sobre todas as coisas&lt;/h1&gt;

&lt;p&gt;O nosso colega de grupo não sabe o (pouco) que faz. O nosso código é muito melhor, mais conciso e auto-explicativo que o dele.
Isto porque nós fomos a mais duas aulas teóricas do que ele (e as que faltamos, demos um relance sobre os &lt;em&gt;slides&lt;/em&gt; enquanto estávamos
na fila para a cantina).&lt;/p&gt;

&lt;p&gt;Quando temos (e tentamos evitar ao máximo!) que mexer no código feito por ele, primeiro há que ultrapassar as dificuldades
da formatação do código (que não estão ao nosso gosto), ao mesmo tempo que se perdem horas a fio a fazer &lt;em&gt;refactoring&lt;/em&gt; ao código
dele. Quem, no seu perfeito juízo, tem coragem de produzir código sem deixar a última linha do ficheiro em branco?&lt;/p&gt;

&lt;p&gt;Quando ele descobre um &lt;em&gt;bug&lt;/em&gt; no nosso código, ou sugere uma pequena alteração que permite facilitar-nos a vida, temos que garantir que
ficou claro que levamos isso como um ataque pessoal. Afinal, temos a certeza que ele passou horas a testar todos os casos-limite!
Depois, seguir os passos:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Perder horas a discutir pormenores desnecessários, utilizando expressões como “&lt;em&gt;eu não percebo muito disto, mas acho que…&lt;/em&gt;”
e “&lt;em&gt;eu fiz assim porque… e da forma que tu dizes só fica mais otimizado; o output é o mesmo&lt;/em&gt;”.&lt;/li&gt;
  &lt;li&gt;Não se chegar a conclusão nenhuma, apesar de ninguém ceder (e nós já percebemos que ele tem razão).&lt;/li&gt;
  &lt;li&gt;Continuar a desenvolver o projeto, cada um para seu lado.&lt;/li&gt;
  &lt;li&gt;Aproveitar um &lt;em&gt;commit&lt;/em&gt; grande para, no meio de tanta alteração, corrigir o tal &lt;em&gt;bug&lt;/em&gt; ou implementar a tal pequena otimização.&lt;/li&gt;
  &lt;li&gt;Guardar a &lt;em&gt;hash&lt;/em&gt; do &lt;em&gt;commit&lt;/em&gt; e, se necessário, recuperar este assunto no próximo projeto e de como “&lt;em&gt;da outra vez fui eu
que cedi&lt;/em&gt;”.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;no-usar-o-santo-nome-da-framework-em-vo&quot;&gt;2. Não usar o santo nome da &lt;em&gt;framework&lt;/em&gt; em vão&lt;/h1&gt;

&lt;p&gt;“&lt;em&gt;Não gosto desta framework. Nunca gostei.&lt;/em&gt;” Só a estamos a usar porque o nosso colega foi o primeiro a tomar a iniciativa.
É muito grande, cheia de pastas, separada em muitos ficheiros com nomes complicados e nada sugestivos. Preferia a &lt;em&gt;nossa&lt;/em&gt;
estrutura do projeto anterior, que só tinha dois ficheiros (um nosso e um dele). O nosso colega queixava-se que o &lt;em&gt;IDE&lt;/em&gt; dele ficava lento a abrir
aqueles ficheiros com 2000 linhas, mas isso é porque ele é pobre, tem um computador fraco e não usa o &lt;em&gt;IntelliJ&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Era só vantagens: estava tudo à mão, não tínhamos que estar à procura de nada, sabíamos exatamente onde estavam as coisas. Ou estava
num ficheiro, ou estava no outro. E até já sabíamos que a função &lt;code&gt;print_posts_from_db_on_screen2&lt;/code&gt; (que por alguma razão imprimia
em duplicado) estava entre as linhas 825 e 1337!&lt;/p&gt;

&lt;h1 id=&quot;no-cobiar-os-projetos-alheios&quot;&gt;3. Não cobiçar os projetos alheios&lt;/h1&gt;

&lt;p&gt;A comunidade científica sempre apelou à partilha de conhecimento. Aliás, a participação em projetos &lt;em&gt;open-source&lt;/em&gt; é algo que
está na nossa &lt;em&gt;to-do list&lt;/em&gt; já há muito tempo. Esses sim, são projetos bem feitos, arquitetados e documentados.&lt;/p&gt;

&lt;p&gt;O outro grupo nosso amigo (sim, aquele que tem sempre 18) já fez o projeto há muito tempo. Até implementaram funcionalidades extra
que não eram pedidas (mas que eles acharam relevantes), como se o professor valorizasse isso. Otários.&lt;/p&gt;

&lt;p&gt;De certeza que não há problema em lhes pedir o projeto deles para “comparar pequenos detalhes”. Além disso, sempre nos disseram
que ler o código de outras pessoas é uma atividade lúdica.&lt;/p&gt;

&lt;p&gt;Agora que percebemos a estratégia que o outro grupo utilizou, basta esperar pela intervenção divina (ver mandamento #5) e o nosso
projeto está feito! Olha, esta função aposto que vai ser igual em todos os trabalhos, mais vale não perder tempo e usá-la no nosso.
Copiemos o código e os comentários, para se mais tarde precisarmos de rever aquele código, não termos de ir ver ao projeto deles de novo.
Concerteza que antes de entregarmos o nosso trabalho nos vamos lembrar de retirar os comentários. Otários.&lt;/p&gt;

&lt;h1 id=&quot;no-testar-nem-causar-semelhante-transtorno-no-server-ou-no-client-neste-projeto-ou-no-prximo&quot;&gt;4. Não testar (nem causar semelhante transtorno, no &lt;em&gt;server&lt;/em&gt; ou no &lt;em&gt;client&lt;/em&gt;, neste projeto ou no próximo)&lt;/h1&gt;

&lt;p&gt;Testar é uma seca. Mas pior do que testar é ter que escrever os testes. Se fosse só carregar numa tecla, esperar uns segundos, e
“aquilo” ficar tudo verde, ainda se compreendia… Para além disso, este pedaço de código é tão simples (e bem feito) que
não vemos forma de futuros &lt;em&gt;commits&lt;/em&gt; o comprometerem.&lt;/p&gt;

&lt;p&gt;Quando na noite anterior à entrega, e depois de uma epifania da qual resultaram milhares de linhas de código (e novas funcionalidades),
as funcionalidades antigas deixam de funcionar, culpamos a &lt;em&gt;framework&lt;/em&gt; (que é bastante confusa), a linguagem (que é considerada pelos mais
importantes filósofos, desde há milhares de anos, como falível) e, claro, o nosso colega. Não fazemos sequer ideia qual a alteração que
foi crítica, pois o último &lt;em&gt;commit&lt;/em&gt; tem como mensagem &lt;code&gt;first commit, initial setup&lt;/code&gt; e o nosso querido colega está a escrever o relatório.
Mais vale dar &lt;code&gt;ctrl+z&lt;/code&gt; até funcionar de novo.&lt;/p&gt;

&lt;p&gt;No fim, chegamos, inevitavelmente, sempre há mesma conclusão: se nem o professor vai testar, porque é que nós o haveríamos?&lt;/p&gt;

&lt;h1 id=&quot;a-grande-expanso-ou-o-big-bang&quot;&gt;5. A Grande Expansão (ou o Big Bang)&lt;/h1&gt;

&lt;p&gt;O código está em expansão. Disso nenhum de nós tem dúvidas. Mas para evitar contrariar as leis da física, também esta
expansão deve ser lenta e gradual, possivelmente infinita. Quando a data de entrega se aproxima, de tão pequeno e condensado
que o projeto se encontra, dá-se o &lt;em&gt;Big Bang&lt;/em&gt;, a grande explosão, numa corrida contra-relógio para se evitar o &lt;em&gt;Big Crush&lt;/em&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/blog/os-5-mandamentos-dos-projetos-academicos/&quot;&gt;Os 5 Mandamentos Dos Projetos Académicos&lt;/a&gt; was originally published by Next Commit at &lt;a href=&quot;http://localhost:4000&quot;&gt;Next Commit&lt;/a&gt; on  9 janeiro 2016.&lt;/p&gt;

  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Pensar Grande, Construir Pequeno]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/blog/pensar-grande-construir-pequeno/" />
  <id>http://localhost:4000/blog/pensar-grande-construir-pequeno</id>
  <published>2015-12-28 16:50:21 +0000</published>
  <updated>2015-12-28 16:50:21 +0000</updated>
  <author>
    <name>Miguel Cunha</name>
    <uri>http://localhost:4000</uri>
    <email>miguelfcunha@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Da mesma forma que um jogador de futebol quer pôr em prática nos jogos aquilo que aprende ao longo dos treinos, também o
típico estudante de informática tem a vontade de mostrar que é capaz de pôr o conhecimento que adquiriu ao longo dos anos
em prática. Eu não sou exceção.&lt;/p&gt;

&lt;p&gt;Esta é a história de como (mais) um projeto para os tempos livres ficou pelo caminho. Os ingleses gostam de lhe chamar
&lt;em&gt;Post-mortem&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&quot;a-ideia&quot;&gt;A Ideia&lt;/h1&gt;

&lt;p&gt;Como é normal, todo este projeto começa por uma ideia. Por mais simples que ela seja, a ideia é o ponto de partida para
o &lt;em&gt;brainstorming&lt;/em&gt; e, portanto, ter a ideia clara e concisa é essencial para a conseguir transmitir a outras pessoas.&lt;/p&gt;

&lt;p&gt;A ideia não necessita de ser original, mas deve acrescentar valor a soluções já existentes, até porque ter uma ideia original não é,
obviamente, fácil. Mas nem esse foi o objetivo inicial. O objetivo inicial sempre foi construir algo que pudesse pôr em
prática os conhecimentos aprendidos ao longo dos anos. E isso significa que este projeto não nasceu de uma ideia, mas, ao contrário,
a ideia nasceu da necessidade de desenvolver um projeto.&lt;/p&gt;

&lt;p&gt;Usando uma metáfora da biologia, tal como &lt;em&gt;Lamark&lt;/em&gt; explicava que determinados caracteres eram adquiridos por necessidade, também a ideia
para este projeto surgiu pela necessidade de ter haver uma ideia para se poder desenvolver um projeto. E começar um projeto sem
uma ideia é como marcar um casamento sem primeiro saber a opinião do parceiro: é bem provável que esteja destinado ao fracasso.&lt;/p&gt;

&lt;p&gt;Terminando a metáfora: a ideia deve aparecer, assim como Darwin explicou para a biologia através da seleção natural, de uma
forma natural e espotânea. A ideia pode aparecer enquanto falamos com um amigo (foi assim que surgiu este &lt;a href=&quot;/sobre&quot;&gt;blog&lt;/a&gt;), enquanto
utilizamos um determinado serviço e nos deparamos com a falta da funcionalidade &lt;em&gt;X&lt;/em&gt; ou quando damos por nós a pensar a
mítica frase “era tão fixe se aqui se pudesse fazer X” (não esqueci que muitas das ideias aparecem enquanto relaxamos a tomar banho,
as chamadas &lt;em&gt;shower thoughts&lt;/em&gt;).&lt;/p&gt;

&lt;h1 id=&quot;a-viso&quot;&gt;A Visão&lt;/h1&gt;

&lt;p&gt;Ter uma ideia é o primeiro passo, mas para a partir da ideia se conseguir construir uma visão, simples e concisa, é necessário
conseguir delinear o âmbito (&lt;em&gt;scope&lt;/em&gt;) do nosso projeto.&lt;/p&gt;

&lt;p&gt;Se a ideia é o ponto de partida para o &lt;em&gt;brainstorming&lt;/em&gt; de funcionalidades, a visão demonstra que o resultado desse
&lt;em&gt;brainstorming&lt;/em&gt; foi digerido, pelo que algumas ideias daí resultantes foram aproveitadas, outras reajustadas e, a maioria
delas, descartadas.&lt;/p&gt;

&lt;p&gt;Construir a visão de um projeto não deve ser só uma formalidade. Deve sim ser um passo que é dado e que permite à equipa
estar sincronizada sobre as prioridades desse projeto e como se vai acrescentar valor à solução a ser desenvolvida.&lt;/p&gt;

&lt;p&gt;Idealmente a visão é o alicerce de um projeto e a pedra angular sobre a qual este é construído. Se determinada &lt;em&gt;feature&lt;/em&gt;
faz, ou não, sentido na nossa aplicação, é uma pergunta que apareceu ao longo desta experiência e que poderia ser respondida
caso existisse uma visão clara, sólida e concisa do projeto.&lt;/p&gt;

&lt;p&gt;A visão permite, ainda, que a equipa consiga estabelecer o chamado &lt;em&gt;&lt;a href=&quot;http://www.allaboutagile.com/definition-of-done-10-point-checklist/&quot;&gt;Definition of Done&lt;/a&gt;&lt;/em&gt; (&lt;em&gt;DoD&lt;/em&gt;), permitindo manter, com
consistência, a qualidade ao longo de toda a aplicação.&lt;/p&gt;

&lt;h1 id=&quot;a-equipa&quot;&gt;A Equipa&lt;/h1&gt;

&lt;p&gt;Tratando-se de um projeto para ser desenvolvido nos tempos livres, o projeto passou rapidamente de algo pessoal para uma
equipa de 3 pessoas. Desenvolver um projeto em equipa envolve, antes de tudo, conseguir explicar a ideia do projeto. A visão,
portanto. E isso implica ter uma ideia muito concreta, desenvolvida e matura.&lt;/p&gt;

&lt;p&gt;Trabalhar em equipa fornece a um projeto uma visão mais alargada, permitindo que a ideia original seja iterada várias vezes,
criando várias vezes a discussão de se determinada funcionalidade deve, ou não, ser incluída.&lt;/p&gt;

&lt;h1 id=&quot;a-stack-tecnolgica&quot;&gt;A &lt;em&gt;Stack&lt;/em&gt; Tecnológica&lt;/h1&gt;

&lt;p&gt;Encontrar uma &lt;em&gt;stack&lt;/em&gt; tecnológica para desenvolver o projeto significou balancear três grandes variaveis:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;As tecnologias que são necessárias/ideais para desenvolver o projeto.&lt;/li&gt;
  &lt;li&gt;As tecnologias que cada membro da equipa sabe/tem experiência.&lt;/li&gt;
  &lt;li&gt;O quanto cada pessoa está disposta a sair da sua zona de conforto e aprender uma tecnologia nova.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Conseguir conjugar estas três variáveis foi, na verdade, algo mais simples do que estava à espera. Muitas das vezes esta &lt;em&gt;stack&lt;/em&gt;
é imposta ao &lt;em&gt;developer&lt;/em&gt;, mas nos projetos pessoais temos sempre a liberdade de nos podermos aventurar em novas tecnologias.&lt;/p&gt;

&lt;h1 id=&quot;a-comunicao&quot;&gt;A Comunicação&lt;/h1&gt;

&lt;p&gt;A comunicação entre a equipa deve ser algo que permita a várias pessoas trabalharem à distância e com horários diferentes,
tal como um projeto deste tipo obriga. Apesar do &lt;em&gt;Skype&lt;/em&gt; ser a ferramenta mais utilizada para conversação por áudio, o &lt;em&gt;&lt;a href=&quot;https://slack.com/&quot;&gt;Slack&lt;/a&gt;&lt;/em&gt;
é, sem dúvida, uma ferramenta muito boa e que funcionou bastante bem entre nós. As integrações do &lt;em&gt;&lt;a href=&quot;https://slack.com/&quot;&gt;Slack&lt;/a&gt;&lt;/em&gt; com as diversas plataformas,
como por exemplo &lt;em&gt;GitHub&lt;/em&gt; e &lt;em&gt;&lt;a href=&quot;http://www.pivotaltracker.com/&quot;&gt;PivotalTracker&lt;/a&gt;&lt;/em&gt;, permitem que todas as pessoas estejam &lt;em&gt;up-to-date&lt;/em&gt; com o estado atual do projeto.&lt;/p&gt;

&lt;h1 id=&quot;a-gesto-de-expectativas&quot;&gt;A Gestão de Expectativas&lt;/h1&gt;

&lt;p&gt;Quando se desenvolve um projeto nos tempos livres (“na brincadeira”, como se diz na gíria) é normal não existir uma data limite para
lançar o projeto. Neste caso tal não era verdade: devido ao mercado e à situação a que se destinada, era necessário ter uma
primeira versão funcional em pouco mais de um mês.&lt;/p&gt;

&lt;p&gt;Levou algum tempo a configurar o ambiente de desenvolvimento e até configuramos &lt;em&gt;bots&lt;/em&gt; de &lt;em&gt;deploy&lt;/em&gt; automático para os &lt;em&gt;droplets&lt;/em&gt; do
&lt;em&gt;DigitalOcean&lt;/em&gt; (o que veio a revelar-se tempo “perdido”); configuramos várias integrações entre os vários serviços
(repositório &lt;em&gt;Git&lt;/em&gt;, &lt;em&gt;&lt;a href=&quot;https://slack.com/&quot;&gt;Slack&lt;/a&gt;&lt;/em&gt;, &lt;em&gt;&lt;a href=&quot;https://www.visualstudio.com/en-us/products/visual-studio-team-services-vs.aspx&quot;&gt;VSOnline&lt;/a&gt;&lt;/em&gt;, &lt;em&gt;Git Flow&lt;/em&gt;, etc). Não queríamos só fazer o projeto, queríamos ter um bom processo por
detrás do projeto, configurar serviços, automatizar ações. E isso levou a que a margem da manobra para cumprir o prazo
ficasse ainda mais curta.&lt;/p&gt;

&lt;p&gt;À medida que a data limite se aproximava e “arranjar” tempo livre para o projeto se tornava complicado, era psicologicamente
desgastante e desmoralizante ter que cortar funcionalidades de forma a conseguir terminar a tempo. E há medida que se foi cortando
funcionalidades, perdia-se valor da solução, e perder valor era mais uma “facada” psicológica. E repete-se o ciclo.&lt;/p&gt;

&lt;h1 id=&quot;think-it-big-build-it-small&quot;&gt;&lt;em&gt;Think it big, build it small&lt;/em&gt;&lt;/h1&gt;

&lt;p&gt;Esta é a grande lição que aprendi e, por conseguinte, a mensagem que quero passar. Pensamos o sistema bastante completo e tentamos
implementar essa grande complexidade de uma só vez. Para o conseguir (dentro da data limite), era necessário dispender mais tempo
do que aquele que, efetivamente, tínhamos disponível. E a falta de progresso à medida que o prazo se aproxima é demasiado
desmoralizante. Ao fim de alguns “cortes”, acabamos por desistir.&lt;/p&gt;

&lt;p&gt;Não podia haver melhor maneira de aprender o porquê do &lt;em&gt;scrum&lt;/em&gt; propôr &lt;em&gt;sprints&lt;/em&gt; de 1 a 2 semanas e de se investir na integração
contínua. Humanamente, é bastante moralizante ver um projeto a avançar sem ter que contar linhas de código, mas vendo pequenas &lt;em&gt;features&lt;/em&gt;
a serem integradas, aos poucos, no produto.&lt;/p&gt;

&lt;p&gt;É importante pensar em grande, pensar como a aplicação vai escalar, como se comporta com 10 e com 10 000 pessoas, mas principalmente
pensar em pequenas &lt;em&gt;features&lt;/em&gt; com funcionalidades básicas e, a partir daí, iterá-las (quantas vezes necessárias), de forma a que
a cada iteração a sua funcionalidade se aproxime cada vez mais da visão do projeto. Primeiro o rascunho e só depois a obra de arte.&lt;/p&gt;

&lt;p&gt;Resumindo: arquitetar a solução em grande plano é importante, mas começar a construí-la com pequenos passos incrementais é fundamental.
Não só para validação da ideia/conceito, mas porque ter resultados visíveis permite-nos ganhar força e motivação para continuar.
Atenção: isto não significa construir a aplicação mal. Que seja clara a diferença entre uma má arquitetura e uma
prova de conceito com potencialidade para crescer.&lt;/p&gt;

&lt;h1 id=&quot;o-sentido-pedaggico&quot;&gt;O Sentido Pedagógico&lt;/h1&gt;

&lt;p&gt;Como é claro, nem tudo foi em vão! Para além da forte componente pedagógica de aprender com os erros, fazer &lt;em&gt;deploy&lt;/em&gt; de uma
aplicação é muito mais do implementar funcionalidades. A experiência ganha ao arquitetar a solução e pensar como encaixar as várias
“peças do &lt;em&gt;puzzle&lt;/em&gt;” é um dos elementos que distingue um Engenheiro Informático.&lt;/p&gt;

&lt;p&gt;Quanto à componente de gestão de projeto, principalmente ao nível da visão e da definição de prioridades, fiquei rendido ao chamado
&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Elevator_pitch&quot;&gt;pitch de elevador&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Costuma-se dizer que se demora 10% do tempo a fazer 90% do código e 90% do tempo a terminar os restantes 10%. É importante, até mesmo num
projeto menos sério (como este desenvolvido nos tempos livres) traçar metas e objetivos, sob pena de ser mais um projeto que ficará,
inevitavelmente, a meio. Mas também é importante não ter datas tão restritivas e inflexíveis. Aproveitemos os projetos pessoais para aplicar
a máxima “&lt;em&gt;done when it’s done&lt;/em&gt;”.&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/blog/pensar-grande-construir-pequeno/&quot;&gt;Pensar Grande, Construir Pequeno&lt;/a&gt; was originally published by Next Commit at &lt;a href=&quot;http://localhost:4000&quot;&gt;Next Commit&lt;/a&gt; on 28 dezembro 2015.&lt;/p&gt;

  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Olá Mundo]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/blog/ola-mundo/" />
  <id>http://localhost:4000/blog/ola-mundo</id>
  <published>2015-12-05 20:53:44 +0000</published>
  <updated>2015-12-05 20:53:44 +0000</updated>
  <author>
    <name>Miguel Cunha</name>
    <uri>http://localhost:4000</uri>
    <email>miguelfcunha@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Caros leitores, sejam bem-vindos ao &lt;em&gt;Next Commit&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;Antes de mais, as mais sinceras desculpas pela escolha de um nome inglês para um &lt;em&gt;blog&lt;/em&gt; escrito em português de Portugal.&lt;/p&gt;

&lt;h2 id=&quot;int-main-int-argc-char-argv&quot;&gt;int main (int argc, char** argv)&lt;/h2&gt;

&lt;p&gt;Aqui podem esperar encontrar artigos sobre programação e tecnologia, escritos de &lt;em&gt;developer&lt;/em&gt; para &lt;em&gt;developer&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;O &lt;em&gt;Next Commit&lt;/em&gt; é o resultado da falta de informação especializada para &lt;em&gt;developers&lt;/em&gt; em português de Portugal, em contraste com a grande e variada cobertura que está disponível em inglês.
Este panorama parece contra-intuitivo, principalmente quando a &lt;a href=&quot;http://www.forbes.com/sites/alisoncoleman/2015/08/23/portugal-discovers-its-spirit-of-entrepreneurial-adventure/&quot;&gt;Forbes&lt;/a&gt; ainda há poucos meses atrás deu destaque ao &lt;em&gt;boom&lt;/em&gt; português.&lt;/p&gt;

&lt;h2 id=&quot;printfol-mundon&quot;&gt;printf(“Olá Mundo!\n”);&lt;/h2&gt;

&lt;p&gt;Não podia deixar de aproveitar esta formalidade informática para dar a conhecer a todos os amantes de &lt;em&gt;python&lt;/em&gt; este &lt;a href=&quot;https://benkurtovic.com/2014/06/01/obfuscating-hello-world.html&quot;&gt;fantástico código&lt;/a&gt; de obfuscação.&lt;/p&gt;

&lt;h2 id=&quot;return-0&quot;&gt;return 0;&lt;/h2&gt;

&lt;p&gt;Vêmo-nos no próximo &lt;em&gt;commit&lt;/em&gt;!&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/blog/ola-mundo/&quot;&gt;Olá Mundo&lt;/a&gt; was originally published by Next Commit at &lt;a href=&quot;http://localhost:4000&quot;&gt;Next Commit&lt;/a&gt; on  5 dezembro 2015.&lt;/p&gt;

  </content>
</entry>

</feed>
