[

  
    {
      "title"			: "Pensar Grande, Construir Pequeno",
      "link"			: "http://nextcommit.github.io/blog/pensar-grande-construir-pequeno/",
      "excerpt"		: "Como um projeto pode falhar mesmo antes de começar",
      "date"      : "28 dezembro 2015",
      "content"   : "<p>Da mesma forma que um jogador de futebol quer pôr em prática nos jogos aquilo que aprende ao longo dos treinos, também o\ntípico estudante de informática tem a vontade de mostrar que é capaz de pôr o conhecimento que adquiriu ao longo dos anos\nem prática. Eu não sou exceção.</p>\n\n<p>Esta é a história de como (mais) um projeto para os tempos livres ficou pelo caminho. Os ingleses gostam de lhe chamar\n<em>Post-mortem</em>.</p>\n\n<h1 id=\"a-ideia\">A Ideia</h1>\n\n<p>Como é normal, todo este projeto começa por uma ideia. Por mais simples que ela seja, a ideia é o ponto de partida para\no <em>brainstorming</em> e, portanto, ter a ideia clara e concisa é essencial para a conseguir transmitir a outras pessoas.</p>\n\n<p>A ideia não necessita de ser original, mas deve acrescentar valor a soluções já existentes, até porque ter uma ideia original não é,\nobviamente, fácil. Mas nem esse foi o objetivo inicial. O objetivo inicial sempre foi construir algo que pudesse pôr em\nprática os conhecimentos aprendidos ao longo dos anos. E isso significa que este projeto não nasceu de uma ideia, mas, ao contrário,\na ideia nasceu da necessidade de desenvolver um projeto.</p>\n\n<p>Usando uma metáfora da biologia, tal como <em>Lamark</em> explicava que determinados caracteres eram adquiridos por necessidade, também a ideia\npara este projeto surgiu pela necessidade de ter haver uma ideia para se poder desenvolver um projeto. E começar um projeto sem\numa ideia é como marcar um casamento sem primeiro saber a opinião do parceiro: é bem provável que esteja destinado ao fracasso.</p>\n\n<p>Terminando a metáfora: a ideia deve aparecer, assim como Darwin explicou para a biologia através da seleção natural, de uma\nforma natural e espotânea. A ideia pode aparecer enquanto falamos com um amigo (foi assim que surgiu este <a href=\"/sobre\">blog</a>), enquanto\nutilizamos um determinado serviço e nos deparamos com a falta da funcionalidade <em>X</em> ou quando damos por nós a pensar a\nmítica frase “era tão fixe se aqui se pudesse fazer X” (não esqueci que muitas das ideias aparecem enquanto relaxamos a tomar banho,\nas chamadas <em>shower thoughts</em>).</p>\n\n<h1 id=\"a-viso\">A Visão</h1>\n\n<p>Ter uma ideia é o primeiro passo, mas para a partir da ideia se conseguir construir uma visão, simples e concisa, é necessário\nconseguir delinear o âmbito (<em>scope</em>) do nosso projeto.</p>\n\n<p>Se a ideia é o ponto de partida para o <em>brainstorming</em> de funcionalidades, a visão demonstra que o resultado desse\n<em>brainstorming</em> foi digerido, pelo que algumas ideias daí resultantes foram aproveitadas, outras reajustadas e, a maioria\ndelas, descartadas.</p>\n\n<p>Construir a visão de um projeto não deve ser só uma formalidade. Deve sim ser um passo que é dado e que permite à equipa\nestar sincronizada sobre as prioridades desse projeto e como se vai acrescentar valor à solução a ser desenvolvida.</p>\n\n<p>Idealmente a visão é o alicerce de um projeto e a pedra angular sobre a qual este é construído. Se determinada <em>feature</em>\nfaz, ou não, sentido na nossa aplicação, é uma pergunta que apareceu ao longo desta experiência e que poderia ser respondida\ncaso existisse uma visão clara, sólida e concisa do projeto.</p>\n\n<p>A visão permite, ainda, que a equipa consiga estabelecer o chamado <em><a href=\"http://www.allaboutagile.com/definition-of-done-10-point-checklist/\">Definition of Done</a></em> (<em>DoD</em>), permitindo manter, com\nconsistência, a qualidade ao longo de toda a aplicação.</p>\n\n<h1 id=\"a-equipa\">A Equipa</h1>\n\n<p>Tratando-se de um projeto para ser desenvolvido nos tempos livres, o projeto passou rapidamente de algo pessoal para uma\nequipa de 3 pessoas. Desenvolver um projeto em equipa envolve, antes de tudo, conseguir explicar a ideia do projeto. A visão,\nportanto. E isso implica ter uma ideia muito concreta, desenvolvida e matura.</p>\n\n<p>Trabalhar em equipa fornece a um projeto uma visão mais alargada, permitindo que a ideia original seja iterada várias vezes,\ncriando várias vezes a discussão de se determinada funcionalidade deve, ou não, ser incluída.</p>\n\n<h1 id=\"a-stack-tecnolgica\">A <em>Stack</em> Tecnológica</h1>\n\n<p>Encontrar uma <em>stack</em> tecnológica para desenvolver o projeto significou balancear três grandes variaveis:</p>\n\n<ul>\n  <li>As tecnologias que são necessárias/ideais para desenvolver o projeto.</li>\n  <li>As tecnologias que cada membro da equipa sabe/tem experiência.</li>\n  <li>O quanto cada pessoa está disposta a sair da sua zona de conforto e aprender uma tecnologia nova.</li>\n</ul>\n\n<p>Conseguir conjugar estas três variáveis foi, na verdade, algo mais simples do que estava à espera. Muitas das vezes esta <em>stack</em>\né imposta ao <em>developer</em>, mas nos projetos pessoais temos sempre a liberdade de nos podermos aventurar em novas tecnologias.</p>\n\n<h1 id=\"a-comunicao\">A Comunicação</h1>\n\n<p>A comunicação entre a equipa deve ser algo que permita a várias pessoas trabalharem à distância e com horários diferentes,\ntal como um projeto deste tipo obriga. Apesar do <em>Skype</em> ser a ferramenta mais utilizada para conversação por áudio, o <em><a href=\"https://slack.com/\">Slack</a></em>\né, sem dúvida, uma ferramenta muito boa e que funcionou bastante bem entre nós. As integrações do <em><a href=\"https://slack.com/\">Slack</a></em> com as diversas plataformas,\ncomo por exemplo <em>GitHub</em> e <em><a href=\"http://www.pivotaltracker.com/\">PivotalTracker</a></em>, permitem que todas as pessoas estejam <em>up-to-date</em> com o estado atual do projeto.</p>\n\n<h1 id=\"a-gesto-de-expectativas\">A Gestão de Expectativas</h1>\n\n<p>Quando se desenvolve um projeto nos tempos livres (“na brincadeira”, como se diz na gíria) é normal não existir uma data limite para\nlançar o projeto. Neste caso tal não era verdade: devido ao mercado e à situação a que se destinada, era necessário ter uma\nprimeira versão funcional em pouco mais de um mês.</p>\n\n<p>Levou algum tempo a configurar o ambiente de desenvolvimento e até configuramos <em>bots</em> de <em>deploy</em> automático para os <em>droplets</em> do\n<em>DigitalOcean</em> (o que veio a revelar-se tempo “perdido”); configuramos várias integrações entre os vários serviços\n(repositório <em>Git</em>, <em><a href=\"https://slack.com/\">Slack</a></em>, <em><a href=\"https://www.visualstudio.com/en-us/products/visual-studio-team-services-vs.aspx\">VSOnline</a></em>, <em>Git Flow</em>, etc). Não queríamos só fazer o projeto, queríamos ter um bom processo por\ndetrás do projeto, configurar serviços, automatizar ações. E isso levou a que a margem da manobra para cumprir o prazo\nficasse ainda mais curta.</p>\n\n<p>À medida que a data limite se aproximava e “arranjar” tempo livre para o projeto se tornava complicado, era psicologicamente\ndesgastante e desmoralizante ter que cortar funcionalidades de forma a conseguir terminar a tempo. E há medida que se foi cortando\nfuncionalidades, perdia-se valor da solução, e perder valor era mais uma “facada” psicológica. E repete-se o ciclo.</p>\n\n<h1 id=\"think-it-big-build-it-small\"><em>Think it big, build it small</em></h1>\n\n<p>Esta é a grande lição que aprendi e, por conseguinte, a mensagem que quero passar. Pensamos o sistema bastante completo e tentamos\nimplementar essa grande complexidade de uma só vez. Para o conseguir (dentro da data limite), era necessário dispender mais tempo\ndo que aquele que, efetivamente, tínhamos disponível. E a falta de progresso à medida que o prazo se aproxima é demasiado\ndesmoralizante. Ao fim de alguns “cortes”, acabamos por desistir.</p>\n\n<p>Não podia haver melhor maneira de aprender o porquê do <em>scrum</em> propôr <em>sprints</em> de 1 a 2 semanas e de se investir na integração\ncontínua. Humanamente, é bastante moralizante ver um projeto a avançar sem ter que contar linhas de código, mas vendo pequenas <em>features</em>\na serem integradas, aos poucos, no produto.</p>\n\n<p>É importante pensar em grande, pensar como a aplicação vai escalar, como se comporta com 10 e com 10 000 pessoas, mas principalmente\npensar em pequenas <em>features</em> com funcionalidades básicas e, a partir daí, iterá-las (quantas vezes necessárias), de forma a que\na cada iteração a sua funcionalidade se aproxime cada vez mais da visão do projeto. Primeiro o rascunho e só depois a obra de arte.</p>\n\n<p>Resumindo: arquitetar a solução em grande plano é importante, mas começar a construí-la com pequenos passos incrementais é fundamental.\nNão só para validação da ideia/conceito, mas porque ter resultados visíveis permite-nos ganhar força e motivação para continuar.\nAtenção: isto não significa construir a aplicação mal. Que seja clara a diferença entre uma má arquitetura e uma\nprova de conceito com potencialidade para crescer.</p>\n\n<h1 id=\"o-sentido-pedaggico\">O Sentido Pedagógico</h1>\n\n<p>Como é claro, nem tudo foi em vão! Para além da forte componente pedagógica de aprender com os erros, fazer <em>deploy</em> de uma\naplicação é muito mais do implementar funcionalidades. A experiência ganha ao arquitetar a solução e pensar como encaixar as várias\n“peças do <em>puzzle</em>” é um dos elementos que distingue um Engenheiro Informático.</p>\n\n<p>Quanto à componente de gestão de projeto, principalmente ao nível da visão e da definição de prioridades, fiquei rendido ao chamado\n<em><a href=\"https://en.wikipedia.org/wiki/Elevator_pitch\">pitch de elevador</a></em>.</p>\n\n<p>Costuma-se dizer que se demora 10% do tempo a fazer 90% do código e 90% do tempo a terminar os restantes 10%. É importante, até mesmo num\nprojeto menos sério (como este desenvolvido nos tempos livres) traçar metas e objetivos, sob pena de ser mais um projeto que ficará,\ninevitavelmente, a meio. Mas também é importante não ter datas tão restritivas e inflexíveis. Aproveitemos os projetos pessoais para aplicar\na máxima “<em>done when it’s done</em>”.</p>\n\n"
    }
  

  
    ,{
      "title"			: "Olá Mundo",
      "link"			: "http://nextcommit.github.io/blog/ola-mundo/",
      "excerpt"		: "Bem-vindos ao Next Commit!",
      "date"      : " 5 dezembro 2015",
      "content"   : "<p>Caros leitores, sejam bem-vindos ao <em>Next Commit</em>!</p>\n\n<p>Antes de mais, as mais sinceras desculpas pela escolha de um nome inglês para um <em>blog</em> escrito em português de Portugal.</p>\n\n<h2 id=\"int-main-int-argc-char-argv\">int main (int argc, char** argv)</h2>\n\n<p>Aqui podem esperar encontrar artigos sobre programação e tecnologia, escritos de <em>developer</em> para <em>developer</em>.</p>\n\n<p>O <em>Next Commit</em> é o resultado da falta de informação especializada para <em>developers</em> em português de Portugal, em contraste com a grande e variada cobertura que está disponível em inglês.\nEste panorama parece contra-intuitivo, principalmente quando a <a href=\"http://www.forbes.com/sites/alisoncoleman/2015/08/23/portugal-discovers-its-spirit-of-entrepreneurial-adventure/\">Forbes</a> ainda há poucos meses atrás deu destaque ao <em>boom</em> português.</p>\n\n<h2 id=\"printfol-mundon\">printf(“Olá Mundo!\\n”);</h2>\n\n<p>Não podia deixar de aproveitar esta formalidade informática para dar a conhecer a todos os amantes de <em>python</em> este <a href=\"https://benkurtovic.com/2014/06/01/obfuscating-hello-world.html\">fantástico código</a> de obfuscação.</p>\n\n<h2 id=\"return-0\">return 0;</h2>\n\n<p>Vêmo-nos no próximo <em>commit</em>!</p>\n\n"
    }
  

]
