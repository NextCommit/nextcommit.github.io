[

  
    {
      "title"			: "WebAssembly",
      "link"			: "https://nextcommit.github.io/blog/webassembly/",
      "excerpt"		: "Adeus JavaScript, olá bytecode",
      "date"      : " 1 novembro 2016",
      "content"   : "<p>Depois de iniciativas como o <em><a href=\"http://asmjs.org/\">asm.js</a></em>, em que o objetivo é trazer a <em>performance</em>\nde aplicações desktop (que tipicamente usam linguagens compiladas <em>ahead-of-time</em>, como C/C++) para\no <em>browser</em>, começou um esforço conjunto entre a Google, Mozilla, Microsoft, Apple e o W3C para \ndefinir um <em>standard</em> de <em>“Assembly para a web”</em>, ou seja, <em>bytecode</em> que todos os <em>browsers</em>\nsoubessem interpretar.</p>\n\n<p>Hoje foi feito um anúncio conjunto entre equipas do <a href=\"http://v8project.blogspot.pt/2016/10/webassembly-browser-preview.html\">Chrome (V8)</a>,\n<a href=\"https://hacks.mozilla.org/2016/10/webassembly-browser-preview/\">Firefox (SpiderMonkey)</a>\ne <a href=\"https://blogs.windows.com/msedgedev/2016/10/31/webassembly-browser-preview/#PbkIl6BO6aMYUtfF.97\">Edge (Chakra)</a> de que\no <em>WebAssembly</em> chegou à fase de <em>browser preview</em>, ou seja, é agora possível experimentar <a href=\"http://webassembly.org/demo/\">uma demo</a> em\ntodos os <em>browsers</em> excepto no Safari (se bem que para o Edge é preciso usar a <em>build</em> de <em>development</em>).</p>\n\n<p>Isto são boas notícias porque, quanto mais não seja, é impressionante ver um jogo feito em Unity a\ncorrer com tanta fluidez num <em>browser</em> (que é algo que foi inicialmente pensado para mostrar texto\ne, quanto muito, algumas imagens).</p>\n\n<p>No entanto, para mim a melhor notícia de todas é que FINALMENTE todo o desenvolvimento <em>web</em>\ndeixará de estar preso a uma só linguagem de programação. Atualmente todas as linguagens que\nqueiram ser usadas para desenvolvimento <em>web</em> têm inevitavelmente que ser compiladas para\nJavaScript (como Elm ou ClojureScript), o que introduz complexidade para quem desenvolve\nlinguagen, já que é obrigado a desenvolver a compilação texto-para-texto só para acabar\npor ter uma linguagem alvo que para ser executada tem que haver <em>parsing</em> do texto!</p>\n\n<p>Fora a questão de evitar o <em>parsing</em>, que para programas grandes em dispositivos móveis\npode demorar até 40s, usar <em>bytecode</em> em vez de JavaScript tem outras vantagens como\na facilidade em adicionar novas <em>features</em> (incluindo melhores <em>profilers</em>, <em>debuggers</em>,\nexcepções de custo zero ou manipulação direta de memória, dentro de uma <em>sandbox</em>, <em>à la</em> C/C++)\ne integrar perfeitamente com a <em>toolchain</em> de LLVM, o que permite que várias outras linguagens\ncompilem para WebAssembly facilmente, tendo “apenas” que desenvolver um novo <em>backend</em> para o compilador.</p>\n\n<p>Outra grande esperança que WebAssembly traz e que merece um parágrafo por si só é a\npossibilidade de programar com <em>POSIX threads</em>. Até à data <em>multithreading</em> no <em>browser</em> é feito via <em>WebWorkers</em>,\no que é limitado pela forma como se passa informação (mensagens em vez de memória partilhada)\ne pelo tipo de <em>threads</em> que usa (<em>OS threads</em> em vez de <em>coroutines/fibers/lightweight threads/green threads</em>).</p>\n\n<p>De qualquer forma, JavaScript tão cedo não vai deixar de ser um cidadão de primeira classe\nna <em>stack</em> da <em>web</em> e por isso está previsto existir suporte para chamadas síncronas entre\nJavaScript e WebAssembly, o que permite uma migração progressiva, ou então apenas usar o novo\nstandard em secções do programa em que o desempenho seja crítico.</p>\n"
    }
  

  
    ,{
      "title"			: "Problemas do Visual Studio",
      "link"			: "https://nextcommit.github.io/blog/visual-studio/",
      "excerpt"		: "Poderemos chamar o Visual Studio de IDE?",
      "date"      : "29 setembro 2016",
      "content"   : "<p>Recentemente tenho utilizado o Visual Studio como ferramenta de desenvolvimento. Não tinha expectativas elevadas,\naté porque nos últimos 9 meses tinha utilizado o CLion, porém não estava à espera de encontrar, naquilo que chamam\nde “Visual Studio 2015”, um IDE tão incompleto. No texto que se segue tento resumir alguns pontos que me desagradaram e\nque tornaram a minha experiência bastante negativa.</p>\n\n<h2 id=\"ide-e-visual-studio-so-oximoros\">IDE e Visual Studio são oximoros</h2>\n\n<p>Antes de mais, o próprio conceito de IDE (<strong>Integrated Development Environment</strong>) é logo posto em causa. Necessitam\nde fazer uma ligação remota? FTP? Não há. Abrir uma consola? Não há. Abrir outros ficheiros que não sejam <code>.c, .cpp ou .h</code>?\nTambém não é boa ideia, já que nem sequer têm <em>syntax highlighting</em>…</p>\n\n<p>Na prática, e ao fim de alguns dias de frustração, vão acabar como eu: um ambiente de trabalho com o Visual Studio,\nAtom (ou, ironia das ironias, Visual Studio Code), meia dúzia de consolas e algumas pastas abertas. Desnecessário, não?</p>\n\n<h2 id=\"windows-only\"><em>Windows Only</em></h2>\n<p>Outro grande problema (e dos grandes) prende-se com o Windows. Para começar, só conseguem correr o Visual Studio no\nWindows, o que obriga a que toda a equipa utilize esse sistema operativo. Mas principalmente porque todo o Visual Studio roda à\nvolta do ecossistema Microsoft. Esqueçam a ideia de desenvolver aplicações <em>cross-platform</em> (e nem me falem do\n<a href=\"https://blogs.msdn.microsoft.com/vcblog/2016/03/30/visual-c-for-linux-development/\">Visual C++ for Linux Development</a>\nque <em>crasha</em> o Visual Studio a cada 10 minutos). Aliás, tenho vindo a investigar e desenvolver formas de o conseguir,\nutilizando <em>containers</em> Docker e outras ferramentas (mais sobre isto, talvez, noutro <em>commit</em>).</p>\n\n<p>E acho que nem vale a pena dizer que têm de esquecer gcc, cmake, etc..</p>\n\n<h2 id=\"intellisense--lento-e-pouco-inteligente\">Intellisense é lento e pouco inteligente</h2>\n<p>Qualquer programador dá bastante valor à capacidade do seu IDE de navegar pelo código de forma fácil e intuitiva e ter\najudas como <em>code completion</em>. No caso do Visual Studio, estas funcionalidades ficam a cargo do Intellisense (e da\npaciência do programador).</p>\n\n<p>Em primeiro lugar, o Intellisense, por alguma razão, gasta bastante memória RAM (não me perguntem porquê). Em segundo,\nnão compreendo porque é que o Intellisense atualizar os seus índices seja algo tão crítico para bloquear por completo\nqualquer ação no Visual Studio durante uns bons segundos.</p>\n\n<p>Dá-me um aperto no coração de cada vez que o Visual Studio me notifica por causa de erros ortográficos (expliquem-me lá\nqual é a lógica de um IDE fazer <em>spell-checking</em>…), mas nem sequer piar quando preciso de verificar os parâmetros que\na função X recebe.</p>\n\n<p>Análise estática de código? Nenhuma, acertaram!</p>\n\n<h2 id=\"atalhos-templates-refactoring\">Atalhos? Templates? <em>Refactoring</em>?</h2>\n<p>Lembram-se do quão repetitivo e <em>error-prone</em> é escrever um ciclo <code>for</code>? Ou fazer um <code>switch statement</code>? Pois bem, o\nVisual Studio tem algo chamado <em>Visual Studio Snippets</em>, uma versão arcaica daquilo que a JetBrains chama de <em>Live\nTemplates</em>.</p>\n\n<p>Podia dar mil e um exemplos de comparação (ora aqui está outra boa ideia para um futuro <em>post</em>). Fiquemo-nos só por dizer\nque, infelizmente, o Visual Studio está a anos-luz da concorrência nesta área (e podem incluir aqui o Intellisense também).</p>\n\n<h2 id=\"estrutura-dos-projetos-e-nomencleatura\">Estrutura dos projetos e Nomencleatura</h2>\n<p>Esta é uma das partes mais controversas e, portanto, espero não me alongar. Para começar, um bocado de contexto: o\nVisual Studio decidiu chamar aquilo que entendemos como um projeto de <strong>Solução</strong>. A solução é única e pode conter mais\nque um projeto (aquilo que normalmente se chama de módulo), podendo cada projeto ter propriedades distintas. É aqui que\ncomeça a confusão. Propriedades partilhadas por vários projetos, devem ser agrupadas em <code>props</code> (<em>Project Properties</em>) de\nforma a evitar repetição de informação. Porém, não existe o conceito de “<em>Run Configurations</em>”, pelo que as configurações\nque podem fazer <em>compile and run</em> são as que estão de momento ativas (sim, para mudar têm de ir à mão, uma a uma… não\nhá como ter configurações pré-definidas).</p>\n\n<p>Mas a confusão não se fica por aqui: já referi que não podem abrir 2 janelas de propriedades de projeto simultaneamente\n(para comparar é necessário estar a alternar entre uma e outra)? E já referi que existem configurações de <em>Release</em> e\n<em>Debug</em> (até aqui tudo OK), e que cada uma se subdivide em x86, x64, ARM, etc? E que, apesar desta explosão combinatória de\npossibilidades e configurações, podem usar o “simpático” “<em>All Configurations</em>? A idea parece boa ao início, mas basta\nterem uma das configurações diferentes, que o Visual Studio vos presenteia com a informação também simpática <code>&lt;different configurations&gt;</code>.\nMuito informativo…</p>\n\n<p>Mas preparem-se… Deixei a “bomba” para o fim. Preparados? Aqui vai: o projeto do Visual Studio <strong>não tem qualquer relação</strong>\ncom o sistema de pastas. Isto significa que a organização de pastas que têm no vosso projeto (ou solução no Visual Studio) não tem qualquer relação\ncom aquilo que vão encontrar dentro do Visual Studio. Podem organizar à vontade o vosso projeto com pastas e subpastas, que nada disso\nse vai refletir dentro do Visual Studio.</p>\n\n<p>E a melhor parte é que se moverem um ficheiro de local no <em>filesystem</em>, o Visual Studio perde-lhe a referência e vão ter\nque remover o ficheiro do Visual Studio e voltar a adicionar. E criar um ficheiro? Se o fazem dentro do Visual Studio (para\nnão o ter que importar para lá mais tarde), o Visual Studio cria-o na <em>root</em> do projeto (porque não há qualquer associação\ncom as pastas do <em>filesystem</em>, lembram-se?). E se depois quisermos mover o recém-criado ficheiro para uma pasta? Voltamos ao\nprimeiro caso… Agora imaginem isto para projetos com centenas/milhares de ficheiros.</p>\n\n<p>Para colmatar esta falha (ou design propositado), o Visual Studio tem a noção de pastas virtuais (isto é, fazem o mesmo que\npastas, mas não existem no <em>filesystem</em>), mas chama-lhe, carinhosamente, de filtros. Podem sempre, claro, replicar a\nestrutura de pastas do <em>filesystem</em> no Visual Studio, mas é repetir trabalho sem necessidade…</p>\n\n<p>E fico-me por aqui. E pelo <strong>CLion</strong>.</p>\n"
    }
  

  
    ,{
      "title"			: "Texto, 文本 ou စာသားမ?",
      "link"			: "https://nextcommit.github.io/blog/texto/",
      "excerpt"		: "Unicode e UTF-8",
      "date"      : " 4 setembro 2016",
      "content"   : "<p>Se há alguma coisa que é simples e causa dores de cabeça mas mesmo assim é\nnegligenciada por todos os programadores/<em>software engineers</em>/<em>javascript ninjas</em>,\nacho que é a codificação de texto.</p>\n\n<p>A norma mais comum para a representação e codificação de texto é o Unicode, em\nque cada caratér é representado por um número. O conjunto de caratéres que\nconstituem a norma tem mais de 107 000 entradas, que vão desde letras latinas comuns\n(<code>a b c</code> …) a smiles com pinta (<code>😒</code>), e cujo objetivo é ser universal e\nsuportar todos os alfabetos.</p>\n\n<p>Uma das formas de representar caratéres Unicode é recorrendo ao UTF-32, UTF-16\nou UTF-8 (o mais comum). O número de cada um reflete o número mínimo de bits que\ncada caratér usa em cada formato; por exemplo, o UTF-32 define todos como tendo\n4 bytes (32 bits, o que possibilita representar 2^31 possibilidades), o UTF-16\nentre 2 e 4 bytes e o UTF-8 pode ter só 1 byte. Por exemplo, para a letra <code>a</code>\n(com o código Unicode correspondente ao decimal 65), as representações são:</p>\n\n<ul>\n  <li>UTF-8: <code>0100 0001</code></li>\n  <li>UTF-16: <code>0000 0000 0100 0001</code></li>\n  <li>UTF-32: <code>0000 0000 0000 0000 0000 0000 0100 0001</code></li>\n</ul>\n\n<p>Tanto o UTF-16 como o UTF-8, para conseguirem representar tantos caratéres como\no UTF-32, usam bits de continuação. Para caratéres fora do que é possível representar\ncom 1 byte (2^7 = 128), como por exemplo o <code>क़</code> (representado por <code>0x0958</code>), seguimos as instruções:</p>\n\n<ul>\n  <li>Começar pela representação em binário: <code>0000 1001 0101 1000</code></li>\n  <li>Procurar o formato UTF-8 correspondente ao número de bits necessário (varia caso sejam\nprecisos 1, 2 ou 4 bytes). Neste caso são necessários 3 bytes, portanto segue o formato:\n<code>1110 xxxx\t10xx xxxx\t10xx xxxx</code></li>\n  <li>Substituir no formato os bits destinados ao caratér pela sua representação em\nbinário. Para um binário imaginário <code>ABCD EFGH IJKL MNOP</code> seria <code>1110 ABCD\n10EF GHIJ 10KL MNOP</code>, para o <code>क़</code> o resultado é: <code>1110 0000 1010 0101 1001 1000</code></li>\n</ul>\n\n<p>Mais importante do que saber como são feitas as várias codificações é saber\nas vantagens e desvantagens de cada uma. Como vimos antes, do UTF-8 ao UTF-32 o\nespaço de armazenamento na maior parte dos casos aumenta, sendo só igual para os\ncaratéres de ordem mais elevada que realmente necessitem de 4 bytes em UTF-8.\nA vantagem em usar UTF-32 é que, no caso de se estar a fazer um qualquer processamento\ncaratér a caratér, pode ser vantajoso ter a garantia que todos têm o mesmo tamanho\nem memória, não sendo necessário qualquer descodificação. Por outro lado, o UTF-8\nmapeia diretamente na representação em ASCII ou latin-1 (ISO 8859-1). Finalmente,\no UTF-16 oferece um meio-termo entre ambos os casos, o que é vantajoso quando\no predominante no texto são caratéres que necessetariam de 3 bytes em UTF-8, mas\napenas de 2 em UTF-16 (que consegue representá-los com menos espaço porque não\nprecisa de tantos bits de continuação); apesar de, devido aos caratéres como o\nespaço, dígitos e <em>newline</em> serem representáveis num só byte em UTF-8, a vantagem\nprática em usar UTF-16 acaba por ser reduzida.</p>\n"
    }
  

  
    ,{
      "title"			: "Acelerar I/O",
      "link"			: "https://nextcommit.github.io/blog/acelerar-io/",
      "excerpt"		: "User-level circular buffering",
      "date"      : " 4 setembro 2016",
      "content"   : "<p>O título deste post é enganador, porque devia ser apenas “Acelerar O”, já que\nvou apenas escrever sobre como há uns tempos, junto com um colega, tentamos\nmelhorar a velocidade de escrita de um programa em C++. Peço já desculpa em\nadiantamento por qualquer erro ou falta de pormenor na narrativa, mas tudo isto\njá foi há uns tempos.</p>\n\n<p>A ideia da coisa era simples: converter um formato binário para XML e vice-versa, sendo que\nos ficheiros em XML utilizavam de 2 a 8x o tamanho do binário original (o que,\nquando se tem binários na ordem dos GBs, é chato). Um dos requisitos era que\num binário de 1GB demorasse no máximo 30s a converter para XML (o que necessita\nde um throughput de ~130MB/s, que é uma meta realista para um bom HDD).</p>\n\n<p>Lá desenvolvemos o bixo e fizemos as primeiras medições depois de configurar as\nas otimizações do compilador (que era o SunStudio, já agora) … estava a demorar 90s,\no triplo do que era suposto. Depois do profiling devido, descobrimos que o problema\nestava numa função bastante simples que fazia a conversão dos vários tipos de\natributos do XML para string.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-c\" data-lang=\"c\"><span class=\"n\">template</span><span class=\"o\">&lt;</span><span class=\"n\">class</span> <span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">string</span> <span class=\"n\">to_string</span><span class=\"p\">(</span><span class=\"n\">T</span> <span class=\"n\">attr_value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">stringstream</span> <span class=\"n\">ss</span><span class=\"p\">;</span>\n  <span class=\"n\">ss</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">T</span><span class=\"p\">;</span>\n\n  <span class=\"n\">string</span> <span class=\"n\">str</span> <span class=\"o\">=</span> <span class=\"n\">ss</span><span class=\"p\">.</span><span class=\"n\">str</span><span class=\"p\">();</span>\n\n  <span class=\"p\">(...</span> <span class=\"n\">some</span> <span class=\"n\">business</span> <span class=\"n\">logic</span> <span class=\"p\">...)</span>\n\n  <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>O primeiro passo foi evitar a construção de uma stringstream sempre que a função\nera invocada.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-c\" data-lang=\"c\"><span class=\"n\">template</span><span class=\"o\">&lt;</span><span class=\"n\">class</span> <span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">string</span> <span class=\"n\">to_string</span><span class=\"p\">(</span><span class=\"n\">T</span> <span class=\"n\">attr_value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">static</span> <span class=\"n\">stringstream</span> <span class=\"n\">ss</span><span class=\"p\">;</span>\n  <span class=\"n\">ss</span><span class=\"p\">.</span><span class=\"n\">str</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">);</span>\n  <span class=\"n\">ss</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">T</span><span class=\"p\">;</span>\n\n  <span class=\"n\">string</span> <span class=\"n\">str</span> <span class=\"o\">=</span> <span class=\"n\">ss</span><span class=\"p\">.</span><span class=\"n\">str</span><span class=\"p\">();</span>\n\n  <span class=\"p\">(...</span> <span class=\"n\">some</span> <span class=\"n\">business</span> <span class=\"n\">logic</span> <span class=\"p\">...)</span>\n\n  <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>70s, melhor mas ainda mais do dobro do esperado. Entretanto percebemos que os\ntemplates davam uma machada grande na performance, e por isso começamos por\ntentar <em>template specialization</em> para os casos mais comuns:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-c\" data-lang=\"c\"><span class=\"n\">template</span><span class=\"o\">&lt;&gt;</span> <span class=\"n\">string</span> <span class=\"n\">to_string</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"o\">&amp;</span> <span class=\"n\">attr_value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">sprintf</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"s\">\"%g</span><span class=\"se\">\\0</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">sValue</span><span class=\"p\">);</span>\n\n  <span class=\"p\">(...</span> <span class=\"n\">some</span> <span class=\"n\">business</span> <span class=\"n\">logic</span> <span class=\"p\">...)</span>\n\n  <span class=\"k\">return</span> <span class=\"n\">buf</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">template</span><span class=\"o\">&lt;</span><span class=\"n\">class</span> <span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">string</span> <span class=\"n\">to_string</span><span class=\"p\">(</span><span class=\"n\">T</span> <span class=\"n\">attr_value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">static</span> <span class=\"n\">stringstream</span> <span class=\"n\">ss</span><span class=\"p\">;</span>\n  <span class=\"n\">ss</span><span class=\"p\">.</span><span class=\"n\">str</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">);</span>\n  <span class=\"n\">ss</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">T</span><span class=\"p\">;</span>\n\n  <span class=\"n\">string</span> <span class=\"n\">str</span> <span class=\"o\">=</span> <span class=\"n\">ss</span><span class=\"p\">.</span><span class=\"n\">str</span><span class=\"p\">();</span>\n\n  <span class=\"p\">(...</span> <span class=\"n\">some</span> <span class=\"n\">business</span> <span class=\"n\">logic</span> <span class=\"p\">...)</span>\n\n  <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>Pouco mudou: 65s. Deixamos de usar templates e stringstreams para as conversões\ne passamos a ter uma função especializada para cada tipo de dados e além disso\npassamos as funções para inline, mesmo assim não baixou dos 60s.</p>\n\n<p>A última coisa a fazer, e que levou a um speedup de 2x, foi em vez de escrever cada string individualmente usar user-level buffering, o que é só um nome engraçado\nque se dá a quando o programa espera até ter uma certa quantidade de dados para\nos escrever para o file descriptor.</p>\n\n<p>Havendo várias formas de o fazer, decidimos implementar um buffer circular, que\né adequado em situações que queremos ter um comportamento FIFO. Num buffer\ncircular temos uma região de memória reservada, de capacidade fixa, e vamos\nadicionando elementos (que podem ser de tamanho variável), sendo que os\nelementos mais recentes podem apagar os antigos (momento no qual se faz a escrita para o ficheiro).</p>\n\n<p>Se tivermos um buffer vazio e inserirmos os elementos <code>1 2 3</code>, o resultado é:</p>\n\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/02/Circular_buffer_-_XX123XX_with_pointers.svg/250px-Circular_buffer_-_XX123XX_with_pointers.svg.png\" alt=\"buffer\" /></p>\n\n<p>E se continuarmos e inserirmos <code>4 5 6 7 8 9 A B C</code> ficamos com:</p>\n\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/05/Circular_buffer_-_6789AB5_with_pointers.svg/250px-Circular_buffer_-_6789AB5_with_pointers.svg.png\" alt=\"buffer\" /></p>\n\n<p>Sendo que fazemos o dump do conteúdo para o ficheiro antes de inserir o <code>8</code> que\nsubstitui o <code>1</code>. O objetivo de usar este tipo de escrita em batch é aumentar o\nthroughput, já que reduzimos o número total de operações de escrita, evitando ao máximo o overhead de cada chamada ao sistema. Outra micro-otimização que fizemos\nfoi usar uma região de memória para o buffer alocada contiguamente, ou seja,\nem que os bytes estão seguidos na memória; se esta região tiver um tamanho que seja\nmúltiplo do tamanho das páginas do sistema que estamos a usar, isso permite que\nhaja DMA (direct memory access), o que permite ao hardware ler (e escrever) da\nmemória sem ter que recorrer ao CPU.</p>\n\n<p>Depois de tudo isto: 38.5MB/s, o que dá cerca de 26s para o 1GB, yey!</p>\n"
    }
  

  
    ,{
      "title"			: "Gestão de Expetativas",
      "link"			: "https://nextcommit.github.io/blog/gestao-de-expetativas/",
      "excerpt"		: "Compreender o caminho que queremos percorrer",
      "date"      : "19 julho 2016",
      "content"   : "<p>Faz tempo tive algumas conversas bastante interessantes acerca do mercado de trabalho e de como funcionam os “processos de\nrecrutamento”. Nos próximos parágrafos vou reproduzir alguns pontos mais interessantes e que geraram alguma discussão.</p>\n\n<p>Todos nós conhecemos os processos de recrutamento para uma empresa estabelecida no mercado, de média/grande dimensão:\ninicialmente somos postos à prova numa (ou mais) entrevistas comportamentais, onde o candidato e a empresa têm oportunidade\nde se conhecerem melhor.</p>\n\n<p><strong>Primeira discórdia:</strong> “<em>para essas entrevistas não me costumo preparar porque… eu sou eu, eu sei quem sou</em>”.</p>\n\n<p>Discordei. Fazer uma simples pesquisa, no <em>website</em> da empresa, para absorver a informação que eles têm disponível é\numa ideia bastante eficaz, principalmente por duas razões: primeiro porque gosto de compreender o que a empresa faz, em que\nmercado opera e se o que fazem me interessa particularmente; segundo (e mais importante) porque transforma o típico\n“bombardeamento” de perguntas para uma conversa entre duas pessoas. Ter um conhecimento\nrelativamente sólido da informação que a empresa tem no seu <em>website</em> (em que mercados opera, que tecnologias usa, os\nprodutos/serviços que vende e respetivos nomes, entre outros) dá-nos o poder de “tomar as rédeas da conversa”.</p>\n\n<p>Esta pesquisa prévia traz, como vantagem imediata, a capacidade de dialogar, ao invés de nos limitarmos a responder a questões. E isto,\nna minha opinião, não só é positivo na medida em que o entrevistador fica com uma imagem nossa positiva, como também nos\npermite filtrar todo o ruído a que somos expostos (a utilização de palavras cuidadas, apelativas, “charmosas”) e focarmo-nos\nnaquilo que realmente é essencial.</p>\n\n<p><strong>Segundo ponto de discussão:</strong> “<em>a empresa X até é interessante, mas eu não compreendo nada do negócio deles e, portanto,\nnunca vou conseguir subir na carreira</em>”.</p>\n\n<p>Não podia discordar mais. Sim, tenho perfeita noção que “subir” na carreira\nnormalmente implica menos trabalho técnico e mais trabalho de gestão, mas não gosto de considerar isso uma fatalidade\nda ascensão e reconhecimento profissional. Existem, certamente, pessoas que ficarão contentes por a progressão na\ncarreira implicar um salto da zona técnica para uma área de gestão, mas isso não significa que por se continuar numa\nárea técnica não seja possível existir progressão na carreira. E mais: não tenho dúvidas que em qualquer uma das duas\nopções, seja necessário compreender sempre a área de negócio, a tendência de mercado, etc. Portanto, de qualquer uma das\nformas, a necessidade de conhecimento da área de negócio é inevitável.</p>\n\n<p>Imaginemos que queremos seguir uma vertente técnica. Ao sermos “promovidos” para um nível de gestão, como nos sentiríamos?\nSeria uma promoção? Ou uma despromoção? Sentir-me-ia confortável em transitar para uma posição que não desejo, só porque\né considerada a “normal ascenssão de carreira”?</p>\n\n<p>No final de contas, acredito (e espero daqui a uns anos confirmar isto) que existe progressão quer na vertente técnica,\nquer na vertente de gestão, permitindo-nos, a cada um de nós, focar-se naquilo que realmente gosta de fazer. Basta gerir\nas nossas expectativas.</p>\n"
    }
  

  
    ,{
      "title"			: "Remover a Sombra",
      "link"			: "https://nextcommit.github.io/blog/remover-a-sombra/",
      "excerpt"		: "A decisão mais difícil de um ScrumMaster tomar",
      "date"      : "27 abril 2016",
      "content"   : "<blockquote>\n  <p>Este é o primeiro post sobre padrões de scrum (sim, leram bem). O Gabriel ainda me tentou impedir, mas o\ncommit já estava feito…</p>\n</blockquote>\n\n<p>Imaginemos uma equipa de <em>scrum</em>. Essa equipa depende largamente do “João”. O “João” faz três vezes mais trabalho \nque qualquer outro membro da equipa, é um membro respeitado e a gestão confia na sua experiência e <em>know-how</em> para \ncumprir os objetivos. O “João” é, resumindo, o herói da equipa.</p>\n\n<p>Infelizmente, a equipa depende deste herói que, para cumprir os objetivos nos tempos estipulados, não tem tempo \n(ou paciência) para servir de mentor aos outros membros, não os ajudando a evoluir e a melhorar. A equipa <strong>vive \nna sombra do herói</strong>. Isto significa que, na verdade, apesar da equipa estar a cumprir os objetivos, esta não está \na aproveitar o seu potencial, porque a sua dependência no herói não dá espaço aos outros membros para “crescerem”.</p>\n\n<p>Assim, o <em>ScrumMaster</em> deve <strong>remover o herói da equipa</strong> para que o resto tenha a luz necessária para florescer.</p>\n\n<p>Sim, exatamente. Pode parecer contra-intuitivo, mas o padrão <a href=\"https://sites.google.com/a/scrumplop.org/published-patterns/product-organization-pattern-language/development-team/remove-the-shade\"><em>“Remove the Shade”</em></a> \nexiste mesmo.</p>\n\n<p>Obviamente esta não é uma decisão fácil, dado que:</p>\n\n<ul>\n  <li>Pode ser difícil convencer a gestão a remover o melhor elemento da equipa (“<em>em equipa que ganha, não se mexe</em>”). Principalmente em alturas críticas.</li>\n  <li>O herói pode-se sentir injustiçado por não ver o seu trabalho reconhecido.</li>\n  <li>O herói pode ter a sensação que está a ser “despromovido”.</li>\n  <li>As equipas de <em>scrum</em> devem-se manter estáveis de forma a manter a <a href=\"https://sites.google.com/a/scrumplop.org/published-patterns/product-organization-pattern-language/development-team/stable-teams\">privisibilidade do seu trabalho</a>.</li>\n</ul>\n\n<p>Uma falha de interpretação, ou falta de confiança, por parte do <em>ScrumMaster</em> na decisão tomada (e a baixa produtividade num período inicial), \npode levar a que, facilmente, esta decisão seja revertida, voltando-se ao problema inicial.</p>\n\n<p>Esta decisão deve ser consciente por parte do <em>ScrumMaster</em>, dado que, durante um período inicial, a produtividade da equipa irá descer, enquanto \nesta “aprende” a enfrentar a tempestade. Tudo isto significa que o <em>ScrumMaster</em> deve ter os <em>soft-skills</em> necessários para lidar com os vários conflitos que podem \nemergir desta situação. Pode, talvez, ser a altura para intensificar a sua “veia” de <a href=\"https://sites.google.com/a/scrumplop.org/published-patterns/product-organization-pattern-language/scrummaster/cheerleader\"><em>cheerleader</em></a> de forma \na manter, quer o herói, quer a restante equipa, motivados. Resumindo: o <em>ScrumMaster</em> deve ser o <a href=\"https://sites.google.com/a/scrumplop.org/published-patterns/product-organization-pattern-language/scrummaster/catalyst\">catalizador</a> \nque permite à equipa superar esta nova fase.</p>\n\n"
    }
  

  
    ,{
      "title"			: "GPU e o Browser",
      "link"			: "https://nextcommit.github.io/blog/gpu-e-o-browser/",
      "excerpt"		: "Render e aceleração por hardware",
      "date"      : "15 março 2016",
      "content"   : "<p>Nós, developers, temos tendência a ficar obececados (e bem) com a performance do software que escrevemos. O problema é quando essa obcessão é mal direcionada e nos preocupamos mais com as ferramentas que usamos do que com tudo o resto.</p>\n\n<p>Um bom exemplo disto é o desenvolvimento front-end para a web. Quem é que nunca ouviu <em>“Hey vocês ainda não usam React? É muito mais rápido! Usa uma cena chamada DOM virtual que é muito mais rápido!”</em> seguido de <em>“Oh isso é old news, nós já estamos a migrar para Mercury, que nos benchmarks é 5x mais rápido que isso…“</em>?</p>\n\n<p>Estas histórias multiplicam-se por muitas áreas, não é exclusivo da web. Outro exemplo clássico é sacrificar a clareza do código em prol da performance:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-c\" data-lang=\"c\"><span class=\"kt\">int</span> <span class=\"n\">element</span><span class=\"p\">;</span>\n<span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">index</span> <span class=\"o\">&lt;</span> <span class=\"n\">something</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">element</span> <span class=\"o\">=</span> <span class=\"n\">stuff</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">];</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>Em vez de:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-c\" data-lang=\"c\"><span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">index</span> <span class=\"o\">&lt;</span> <span class=\"n\">something</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">element</span> <span class=\"o\">=</span> <span class=\"n\">stuff</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">];</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>Mesmo que o segundo caso seja mais conciso, menos propício a erros (a variável element está limitada no scope ao estritamente necessário) e tenha exatamente o mesmo desempenho na esmagadora maioria dos casos, porque os compiladores são desenvolvidos o suficiente para otimizar casos tão triviais.</p>\n\n<p>Podia continuar a dar exemplos, mas já chega de desabafar. O que queria mostrar hoje é uma técnica extremamente simples mas que pode ter um impacto enorme na performance de um cliente numa página web.</p>\n\n<p>Sem querer entrar em muito detalhe sobre o ciclo de render de um browser (ou seja, como reage a alterações no DOM, podem ler mais sobre isso <a href=\"https://developers.google.com/web/fundamentals/performance/rendering/#the-pixel-pipeline\">aqui</a>), o importante é saber que os browsers constroem (recorrendo à DOM Tree e à CSS Tree) uma coisa chamada Render Tree, que contém Render Objects que por sua vez estão organizados em RenderLayers que são desenhados sobre Graphical Layers (<a href=\"https://www.chromium.org/developers/design-documents/gpu-accelerated-compositing-in-chrome\">detalhes</a>).</p>\n\n<p><img src=\"https://lh5.googleusercontent.com/eLlgjXLQbW-c2JWxfK0VxXbmV2-D90ub4dXYMblpHdyVyM_6a12JdfQKiokPrTcB-2UOn284A3teHK4P0e9Xlmm5uSxA7utj6Pggf7T-J7uxwc8iBPopZ7vtcCRYGvtteQ\" alt=\"Render Tree\" /></p>\n\n<p>Confuso? Não é muito relevante, disto tudo só interessa retirar que podemos aumentar a performance evitando que uma porção grande da página tenha que ser re-desenhada (é esta a lógica da nova onde de frameworks front-end que usam o render engine do React ou o virtual-dom). O ideal, em termos de velocidade, era dar a cada Render Object o seu próprio Graphics/Composite Layer, mas isso não é feito por razões de poupança de VRAM (memória da placa gráfica).</p>\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/Ltn0a263/1/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n<p>Podemos ver tudo isto a acontecer <a href=\"https://jsfiddle.net/Ltn0a263/1/\"><strong>neste exemplo</strong></a>. Antes de usarem, tenham cuidado com o número de imagens que usam (podem modificar no Javascript), porque vos pode bloquear a tab. Para verem o que se está a passar devem também ligar o contador de FPS do brower e fazer com que mostre as várias layers (<a href=\"https://developer.chrome.com/devtools/docs/rendering-settings\">como fazer isso</a>). Depois:</p>\n\n<ol>\n  <li>Carregar no ícone para começar a animação. Nada fluído, certo?</li>\n  <li>Descomentem o <code>transform</code> em <code>image</code> e carreguem em ‘Run’. Vêm que apareceu um quadrado à volta do ícone? Isso é um Graphical Layer novo. Notem que o uso da memória da GPU também disparou, isto é porque todas as texturas são carregadas para lá, em vez de ficarem na RAM para serem usadas pelo CPU. Experimentem carregar no ícone e vejam como está muito mais fluído, com FPSs muito superiores.</li>\n  <li>Voltem a comentar o que descomentaram, e desta vez descomentem as animações em <code>.image.animated</code>. Vêm que o novo layer só aparece quando carregam no ícone, enquanto com o método anterior estava sempre lá? A razão para isso é que, com transformações 2D, esse layer só é criado on-the-fly.</li>\n</ol>\n\n<p>Há outro tipo de operações que forçam a criaçam deste layer à parte:</p>\n\n<ul>\n  <li>Elementos <code>&lt;video&gt;</code> e <code>&lt;canvas&gt;</code></li>\n  <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/filter\">Filtros CSS</a></li>\n  <li>Elementos que sobrepõe (via <code>z-index</code>) a algum que esteja num composite layer próprio</li>\n  <li>Transformações 3D</li>\n  <li><a href=\"https://www.chromium.org/developers/design-documents/gpu-accelerated-compositing-in-chrome\">etc</a></li>\n</ul>\n\n<p>No fundo, é um trade-off entre velocidade e memória. Outro problema que pode surgir é com o <a href=\"http://keithclark.co.uk/articles/gpu-text-rendering-in-webkit/\">aspeto do tipo de letra</a>, já que a GPU e o CPU não o fazem da mesma forma. Um truque engraçado para forçar a que um elemento seja renderizado na GPU é acrescentar-lhe, como fizemos no exemplo, algo como <code>transform: translateZ(0)</code>.</p>\n"
    }
  

  
    ,{
      "title"			: "Programar & Documentar",
      "link"			: "https://nextcommit.github.io/blog/progamar-e-documentar/",
      "excerpt"		: "Boas práticas de programação são, também, boas práticas de documentação",
      "date"      : "13 março 2016",
      "content"   : "<p>No âmbito da minha dissertação tenho trabalhado com uma biblioteca <em>open source</em> que, infelizmente, está mal documentada.\nE eu sou grande apologista de projetos <em>open source</em>, mas deixemos isso para um outro <em>commit</em>.</p>\n\n<p>Tal como as metodologias <em>agile</em> nos ensinaram, existe sempre um <em>trade-off</em> entre <em>working software</em> e\n<em>documented software</em>. Ainda assim, há cuidados básicos que devemos ter para deixar o código tão legível e claro\nquanto possível. Neste <em>commit</em> foquemo-nos nas assinaturas das funções.</p>\n\n<p>Imaginemos a função <code>pause</code>, que coloca a <em>thread</em> onde é executada em pausa. Se essa função estiver definida como</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-c--\" data-lang=\"c++\"><span class=\"kt\">void</span> <span class=\"n\">pause</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">timeToPause</span><span class=\"p\">);</span></code></pre></figure>\n\n<p>existirão, naturalmente, dúvidas sobre qual a unidade de tempo a ser passada como argumento. Segundos? Milisegundos?\nMinutos?</p>\n\n<p>Apesar de já ser mais aceitável termos algo como <code>void pause(int timeToPauseInSeconds);</code>, porque não declará-la como</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-c--\" data-lang=\"c++\"><span class=\"kt\">void</span> <span class=\"n\">pause</span><span class=\"p\">(</span><span class=\"n\">Time</span> <span class=\"n\">timeToPause</span><span class=\"p\">);</span></code></pre></figure>\n\n<p>ou com os tipos <code>std::chrono::duration</code><sup id=\"fnref:1\"><a href=\"#fn:1\" class=\"footnote\">1</a></sup> introduzidos no C++11, que pretendem terminar com esta ambiguidade:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-c--\" data-lang=\"c++\"><span class=\"kt\">void</span> <span class=\"n\">pause</span><span class=\"p\">(</span><span class=\"n\">milliseconds</span> <span class=\"n\">timeToPause</span><span class=\"p\">);</span></code></pre></figure>\n\n<p>Agora imaginemos que queremos aumetar a granularidade das unidades, de forma a conseguir pausar ao nível do nanosegundo.\nNeste caso, passaríamos a ter</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-c--\" data-lang=\"c++\"><span class=\"kt\">void</span> <span class=\"n\">pause</span><span class=\"p\">(</span><span class=\"n\">nanoseconds</span> <span class=\"n\">timeToPause</span><span class=\"p\">);</span></code></pre></figure>\n\n<p>Agora imaginem que precisamos de outra função para parar ao nível do microsegundo… Ok, acho que já entenderam onde quero\nchegar. Obviamente podemos escrever esta função de uma forma mais genérica</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-c--\" data-lang=\"c++\"><span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"o\">&gt;</span>\n<span class=\"kt\">void</span> <span class=\"n\">pause</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">T</span><span class=\"o\">&amp;</span> <span class=\"n\">timeToPause</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n   <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">this_thread</span><span class=\"o\">::</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">timeToPause</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"n\">action</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n   <span class=\"c1\">// ... outras ações...\n</span>   <span class=\"n\">pause</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">);</span> <span class=\"c1\">// mau: não sabemos as unidades\n</span>   <span class=\"n\">pause</span><span class=\"p\">(</span><span class=\"n\">milliseconds</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">));</span> <span class=\"c1\">// bom\n</span>   <span class=\"n\">pause</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"n\">ms</span><span class=\"p\">);</span> <span class=\"c1\">// bom: possível a partir do C++14\n</span><span class=\"p\">}</span></code></pre></figure>\n\n<p>que, já agora, utiliza um template da biblioteca de suporte a <em><a href=\"http://en.cppreference.com/w/cpp/thread\">threads</a></em>\ntambém introduzida no C++11. Esta combinação permite interoperabilidade com o tipo de granularidade de tempo que deserjarmos.</p>\n\n<p>Reparem como introduzi outra alteração no código que ainda não discutimos. Decidi passar o valor por referência e, como\ntal, utilizei a <em>keyword</em> <code>const</code> como garantia de que o valor não irá ser alterado. Isto não só me dá segurança de que\nirei obter um erro em <em>compile-time</em> se a regra for violada, como também serve de boa documentação. De que forma? Sigam\no raciocínio com um novo exemplo.</p>\n\n<p>Imaginemos a função <code>countToTen</code>, que recebe um inteiro por referência e conta, a partir desse valor, até 10:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-c--\" data-lang=\"c++\"><span class=\"kt\">void</span> <span class=\"n\">countToTen</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">&amp;</span><span class=\"n\">number</span><span class=\"p\">);</span></code></pre></figure>\n\n<p>Sem vermos a documentação (se existir), ou o código, não temos garantia nenhuma de que o valor de <code>number</code> se mantém\ninalterado, como na implementação que se segue</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-c--\" data-lang=\"c++\"><span class=\"kt\">void</span> <span class=\"nf\">countToTen</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">&amp;</span><span class=\"n\">number</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n   <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">number</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n      <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"o\">++</span><span class=\"n\">number</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>Assim como também podemos ter uma implementação que não muda o valor da variável</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-c--\" data-lang=\"c++\"><span class=\"kt\">void</span> <span class=\"nf\">countToTen</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">&amp;</span><span class=\"n\">number</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n   <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">number</span><span class=\"p\">;</span>\n   <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n      <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"o\">++</span><span class=\"n\">n</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>Independentemente da implementação, a simples inclusão da <em>keyword</em> <code>const</code> não só melhora a qualidade e robustez do\ncódigo, como também dá garantias a futuros utilizadores da vossa função que o valor variável que passam como argumento\nnão irá ser alterado. Assim, em operações que necessitem de receber um valor por referência, a\n<em>keyword</em> <code>const</code> é vossa amiga!</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-c--\" data-lang=\"c++\"><span class=\"kt\">void</span> <span class=\"n\">countToTen</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"o\">&amp;</span><span class=\"n\">number</span><span class=\"p\">);</span></code></pre></figure>\n\n<p>E sim, eu sei que a questão, neste caso, fica resolvida se passarmos por valor, mas imaginemos que o gasto computacional\npara copiar um inteiro é relevante o suficiente para passarmos apenas uma referência.</p>\n\n<div class=\"footnotes\">\n  <ol>\n    <li id=\"fn:1\">\n      <p>http://en.cppreference.com/w/cpp/chrono <a href=\"#fnref:1\" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n  </ol>\n</div>\n"
    }
  

  
    ,{
      "title"			: "Automação 1",
      "link"			: "https://nextcommit.github.io/blog/python-e-automacao-1/",
      "excerpt"		: "Python para te facilitar a vida",
      "date"      : "10 março 2016",
      "content"   : "<p>Como falei <a href=\"/blog/git-checkout-gcandal/\">num post anterior</a>, automatizar<sup id=\"fnref:1\"><a href=\"#fn:1\" class=\"footnote\">1</a></sup> tem benefícios, principalmente se estivermos a falar para pessoas que já sabem programar e que por isso não têm que passar pela aprendizagem do que pode ou não ser automatizado (apesar de que normalmente a resposta é: tudo).</p>\n\n<p>De todas as linguagens que podíamos usar para este tipo de tarefa, a minha preferida (e reparem que não disse a melhor, porque isso não existe) é <strong>Python</strong><sup id=\"fnref:2\"><a href=\"#fn:2\" class=\"footnote\">2</a></sup>. Porquê?</p>\n\n<ul>\n  <li>É <strong>dinamicamente tipada</strong>. Ou seja, uma mesma variável pode ter mais do que um tipo durante o seu ciclo de vida. Era uma string e passou a ser um inteiro? Paciência, vive com isso, porque o compilador não se vai queixar. Sacrifica verificação da validade do programa em benifício do tempo de escrita, o que <strong>para scripts</strong> me parece um bom tradeoff. Se começas a sentir-te perdido pela falta de tipos provavelmente o teu programa cresceu demais, por isso lembra-te:</li>\n</ul>\n\n<p><img src=\"http://www.azquotes.com/picture-quotes/quote-this-is-the-unix-philosophy-write-programs-that-do-one-thing-and-do-it-well-write-programs-douglas-mcilroy-81-95-07.jpg\" alt=\"UNIX philosophy\" /></p>\n\n<ul>\n  <li>É fácil de aprender, não só por ser bastante alto nível e expressiva, ou pela sintaxe simples, mas também pelas biblitoecas de interface intuitiva. Queres ler um ficheiro de texto com nomes de alunos de duas cadeiras e imprimi-los no formato certo sem duplicados?</li>\n</ul>\n\n<p><code>print [name.capitalize() for name in set(input()) ^ set(input())]</code></p>\n\n<ul>\n  <li>Bibliotecas para tudo e mais alguma coisa! Manipulação de imagem (pillow), vídeo (moviepy, que serve como camada superior ao ffmpeg), HTTP (requests ou Mechanize, que “emula” um browser até certo ponto), extração de informação de páginas HTML (BeautifulSoup) ou compressão (zipfile). Como navegar numa estrutura de diretórios e rodar todos os PNGs 45º?</li>\n</ul>\n\n<p><code>[PIL.Image.open(file).rotate(45).save() for file in glob.glob('/target/**/**/*.png')]</code></p>\n\n<p>Tudo isto pode, e deve, ser usado para melhoria constante dos processos internos das empresas (ou pessoais, se forem como <a href=\"https://www.jitbit.com/alexblog/249-now-thats-what-i-call-a-hacker/\">o administrador de sistemas que tirava cafés por SSH</a>).</p>\n\n<p>Há uma tarefa rotineria que a equipa de design tem que fazer, como renomear os ficheiros exportados pelo Photoshop, centrar imagens verticalmente e depois comprimir tudo? Python.</p>\n\n<p>A malta de gestão todos os dias verifica se as taxas de câmbio estão dentro de um certo limite do que está definido? Python. Exemplo:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><span class=\"kn\">import</span> <span class=\"nn\">mechanize</span>\n<span class=\"kn\">import</span> <span class=\"nn\">bs4</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_price</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">country</span> <span class=\"o\">=</span> <span class=\"bp\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">browser</span> <span class=\"o\">=</span> <span class=\"n\">mechanize</span><span class=\"o\">.</span><span class=\"n\">Browser</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"n\">country</span><span class=\"p\">:</span> <span class=\"n\">browser</span><span class=\"o\">.</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"si\">%</span><span class=\"s\">s/change_country/</span><span class=\"si\">%</span><span class=\"s\">s\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">country</span><span class=\"p\">))</span>\n    <span class=\"n\">page</span> <span class=\"o\">=</span> <span class=\"n\">browser</span><span class=\"o\">.</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">bs4</span><span class=\"o\">.</span><span class=\"n\">BeautifulSoup</span><span class=\"p\">(</span><span class=\"n\">page</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(),</span> <span class=\"s\">\"html.parser\"</span><span class=\"p\">)</span>\n    <span class=\"n\">meta_tag</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s\">\"meta\"</span><span class=\"p\">,</span> <span class=\"n\">attrs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s\">\"property\"</span><span class=\"p\">:</span><span class=\"s\">\"og:price:amount\"</span><span class=\"p\">})</span>\n    <span class=\"n\">price</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">meta_tag</span><span class=\"p\">[</span><span class=\"s\">\"content\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s\">\",\"</span><span class=\"p\">,</span> <span class=\"s\">\".\"</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">price</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_rate</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">country</span> <span class=\"o\">=</span> <span class=\"s\">\"PT\"</span><span class=\"p\">):</span>\n    <span class=\"n\">base_price</span> <span class=\"o\">=</span> <span class=\"n\">get__price</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n    <span class=\"n\">rated_price</span> <span class=\"o\">=</span> <span class=\"n\">get_price</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">country</span><span class=\"o\">=</span><span class=\"n\">country</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">rated_price</span> <span class=\"o\">/</span> <span class=\"n\">base_price</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n        <span class=\"n\">delta</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">delta</span> <span class=\"o\">=</span> <span class=\"mf\">0.05</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">get_rate</span><span class=\"p\">(</span><span class=\"n\">our_url</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">get_rate</span><span class=\"p\">(</span><span class=\"n\">authority_url</span><span class=\"p\">))</span> <span class=\"o\">&gt;</span> <span class=\"n\">delta</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"aye\"</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"ney\"</span><span class=\"p\">)</span></code></pre></figure>\n\n<p>E há muitos outros exemplos.</p>\n\n<p><img src=\"https://www.doppnet.com/gfx/2013-11-09-automation-meme.jpg\" alt=\"automate all the things\" /></p>\n\n<p>Em termos de Software Engineering propriamente dito, este conceito está na origem do movimento de DevOps, que tenta aplicar esta coisas ao ciclo de desenvolvimento de software até chegar a um ponto de continuous deployment, em que cada entrada de código nova no repositório faz com que uma série de scripts de automação (testes, análise estática, deployment, …) sejam executados. Podem perguntar mais sobre isto ao <a href=\"http://cmcmteixeira.github.io/\">Carlos Teixeira</a>, que está a fazer uma tese em “Towards DevOps Practices and Patterns from the Portuguese Startup Scene”.</p>\n\n<div class=\"footnotes\">\n  <ol>\n    <li id=\"fn:1\">\n      <p>automatizar ~= scripting <a href=\"#fnref:1\" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:2\">\n      <p>Há várias implementações da linguagem e para todos os gostos: CPython (a implementação de referência), PyPy (inclui um compilador JIT para melhorias na performance em runtime), Jython (JVM) ou IronPython (.NET). Num contexto de automação, sempre que falar em Python, estou-me a referir a CPython. A vantagem em relação a outras implementações é ter um tempo de startup geralmente mais curto e vir instalado por defeito na maioria das distribuições Linux (por exemplo, o Ubuntu depende bastante da linguagem). <a href=\"#fnref:2\" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n  </ol>\n</div>\n"
    }
  

  
    ,{
      "title"			: "git checkout -b gcandal",
      "link"			: "https://nextcommit.github.io/blog/git-checkout-gcandal/",
      "excerpt"		: "A importância de automatizar",
      "date"      : " 6 março 2016",
      "content"   : "<p>Para o meu primeiro post queria, antes de continuar, pedir que tivesses alguma paciência e tentasses ler o máximo possível sem fechar a tab\nou os olhos. Mesmo que no fim fiques a pensar “Ok, mais valia ter ido ler um tutorial de GraphQL, não aprendi nada” não desistas do\n<em>Next Commit</em>, prometo que vamos melhorar…</p>\n\n<p>Passando ao que interessa, neste post vou falar um bocado da <strong>importância de automatizar tarefas</strong> (pessoal de design/gestão/marketing/…, isto\ntambém é para vocês!), que serve de introdução a uma série de posts mais técnicos sobre como temos tirado proveito disso na <a href=\"http://ripe.tech\">Ripe</a>.</p>\n\n<p>Porque é que automatizamos tarefas? A resposta parece ser óbvia: para poupar tempo. Mas então, porque é que não automatizamos <strong>todos</strong>\nos processos manuais? Toda a gente gosta de ter mais tempo livre. Também parece mais ou menos óbvio: o esforço pode não compensar.</p>\n\n<p>A verdade é que, muitas vezes, automatizar acaba por demorar mais tempo do que aquilo que tínhamos previsto.</p>\n\n<p><img src=\"http://imgs.xkcd.com/comics/automation.png\" alt=\"automation xkcd\" /></p>\n\n<p>Aquilo de que te queria convencer é que… isto é mentira! 😄</p>\n\n<p>Ou melhor, não é toda a verdade. A automação deve ser vista como um investimento e por isso normalmente quando eu penso em gastar 1 hora\na escrever um programa para me poupar de um trabalho manual qualquer é porque repito esse trabalho vezes suficientes para, antes de chegar\nà reforma, recuperar essa hora perdida. Esta visão é simplista e deixa de lado uma parte importante: a energia mental que poupamos em\nnão estar sempre a fazer a mesma tarefa rotineira.</p>\n\n<p>Podes pensar nisto como uma espécia de <a href=\"http://cdn.igeeksblog.com/wp-content/uploads/Vinsic-Tulip-iPhone-Power-Bank.jpg\">powerbank</a>:\nmesmo que não tenha um rendimento de 100% (ou seja, nunca consegues tirar de lá tanta energia como a que meteste), podes guardar\nenergia quando tens oportunidade para isso para quando te fizer falta está disponível. O princípio para a automação é o mesmo,\npodes nunca recuperar aquela hora que perdeste a transformar uma tarefa de 5 minutos numa de 1 clique, mas se calhar evitaste\nter que interromper um trabalho qualquer que estavas a fazer e que exigia concentração por causa desses 5 minutos e aí o ganho\nde produtividade compensa a hora que investiste.</p>\n\n<p>Isto também aumenta o tempo de resposta das empresas. Se estás num período mais calmo e te sentes com energia e motivação para dedicar\na este tipo de exercício, ou simplesmente queres procrastinar sem peso na consciência, podes aproveitar para guardar energia no powerbank\npara, durante uma altura crítica, não teres que fazer um esforço mental para te desviar da tarefa importante em que estavas a trabalhar,\no que ia prejudicar a tua produtividade.</p>\n\n<p><strong>Concretamente</strong>, que automações são essas? Pode ser usar um serviço externo como o <a href=\"http://mailchimp.com/\">mailchimp</a> para campanhas\nde marketing digital ou o <a href=\"https://ifttt.com\">IFTTT</a> para coisas mais pessoais\n(<a href=\"https://ifttt.com/recipes/99068-save-new-email-attachments-to-google-drive\">automaticamente gravar todos os anexos de email que recebes na Drive</a>\nou <a href=\"https://ifttt.com/recipes/191854-share-a-message-and-your-location-with-a-group\">com 1 clique enviar a tua localização para um grupo de amigos</a>).</p>\n\n<p>No outro dia a minha namorada, que está a escrever uma dissertação em ortodontia, tinha que saber quantos anos, meses e dias\nse tinham passado entre a data de nascimento de um paciente e a última radiografia. Estando eu em informática, sempre pensei que ela estivesse a fazer\nisso com algumas fórmulas de Excel, mas não fiquei chocado quando vi que estava a fazer tudo à mão, já que ela nunca teve grande formação nesse assunto\ne a base de dados tinha as datas num formato esquisito. O que me chocou foi quando descobri que a base de dados tinha <strong>centenas</strong> de entradas.\nUma coisa que à mão ia demorar HORAS, passado 15 minutos e algumas pesquisas no Google ficou totalmente automática (obrigado Métodos Numéricos 💙).</p>\n\n<p>No caso de alguém de saúde é natural que isto aconteça, já que não têm um <em>mindset</em> de constante melhoria de processo, muito menos de programação, por\nisso é compreensível. O problema é que isto também acontece em muitas áreas de engenharia, mesmo em informática.</p>\n\n<p><img src=\"https://s-media-cache-ak0.pinimg.com/564x/71/27/68/712768b8edde95f6c128aa9a3f7d8865.jpg\" alt=\"common sense is not so common\" /></p>\n\n<p>Amigo, é só estares atento! Se durante o teu dia há alguma coisa que achas que podia ser feita por um macaco com treino suficiente (i.e.: é repetitivo)\nentão muito provavelmente podes automatizar isso! É só estares atento. Se achas que isso acontece, mas não sabes exatamente como resolver, podes\nenviar e-mail ao Miguel Cunha (é só veres os contactos num dos posts dele) e ele terá todo o gosto em ajudar-te <em>pro bono</em> 😄.</p>\n\n<p>Termino com uma resolução de ano novo atrasada: escrever 1 post de 15 em 15 dias. É essa a meta e por cada dia que me atrase como uma bolacha maria sem\nusar os dentes. O próximo post será sobre como temos adotado filosofia na <a href=\"ripe\">Ripe</a> sob a forma de DevOps: porque o fizemos, o que fizemos\ne como fizemos.</p>\n\n"
    }
  

  
    ,{
      "title"			: "Diz-me Como Geres e Dir-te-ei Quem És",
      "link"			: "https://nextcommit.github.io/blog/diz-me-como-geres-e-dir-te-ei-quem-es/",
      "excerpt"		: "Ou, pelo menos, dir-te-ei que não és...",
      "date"      : "27 fevereiro 2016",
      "content"   : "<p>Caro <em>Scrum Master</em>/<em>Team Manager</em>/<em>Team Leader</em>/<em>Sprint Master</em>,</p>\n\n<p>Antes de mais deixa-me dizer que te respeito. Imenso. Mas há que pôr os pontos nos <em>is</em>: o respeito mútuo faz parte da\nconvivência entre seres humanos; mas lá porque te respeito, não significa que te deva submissão total ou me reduza à minha\npobre, triste e diminuta insignificância quando falas, opinias ou simplesmente mandas uns <em>bitaites</em>.</p>\n\n<p>Compreendo que o teu trabalho, e os frutos que dele resultam, tenham um sabor agridoce: passas esquecido nas grandes\nvitórias e és espezinhado quando as coisas dão para o torto. Não duvido que gostes do que fazes e acredito que os\n<em>zums-zums</em> que ouves no corredor, questionando “<em>o que é que ele faz? Qual é o papel dele? É que eu ainda não percebi\nmuito bem…</em>”, te incomodem.</p>\n\n<p>Agora, quando as pessoas que geres têm <strong>medo</strong> de fazer o que quer que seja, algo está mal. Quando a maneira mais fácil\nda tua equipa conseguir ter a tua atenção é através de um e-mail, algo está mal. Quando perco a motivação para o projeto\nporque não confias em mim (nem na equipa) e nas nossas capacidades para o levar a bom porto, não estás a fazer o teu trabalho.</p>\n\n<p>Eu compreendo que os teus 10 ou 15 anos de experiência te permitam antever problemas que um “caloiro” como eu, com pouca ou\nnenhuma experiência, teria dificuldades em ver. Mas pedires para escalonar um projeto de vários meses em tarefas de 4 horas,\nnão estás a reduzir riscos e muito menos a antecipar problemas. Estás a ser retardado. Só isso.</p>\n\n<p>Se não confias em nós para realizar o projeto, então diz-nos isso. Com <strong>transparência</strong>. E se não confias em nós para realizar\no projeto, garanto-te que também não confiámos em ti para o gerir. Tal como o respeito, a confiança (ou a falta dela) também\né mútua. E ambas se cultivam. Mas leva tempo… e paciência.</p>\n\n<p>Transmitir <strong>confiança</strong> não é gritar connosco durante meia hora e no fim exclamar “<em>vocês conseguem!</em>”. Se queres transmitir\nconfiança não te fiques só pela crítica. Apresenta soluções. Delega tarefas. Não nos digas por alto como se faz. Demonstra-o.\nLidera pelo exemplo.</p>\n\n<p>Se me permites que te aponte o dedo mais uma vez, não te auto-intitules <em>Scrum Master</em> quando, diariamente, violas os princípios\nmais básicos do <em>Agile Manifesto</em>. Faz-me alguma confusão. E deveria-te fazer ainda mais confusão a ti, dado que ou tu ou a equipa\nnão fazem ideia do que significam tais conceitos. Seja qual for, continuas a fazer mal o teu trabalho.</p>\n\n<blockquote>\n  <p>Se parasses para te olhares ao espelho, irias reparar que foges do <em>Agile</em> como o diabo da cruz. Ainda te achas <em>Scrum\nMaster</em>?</p>\n</blockquote>\n\n<p>Desculpa-me estar a insitir, mas acho quero deixar bem claro: se o trabalho que desenvolvi não superou o teu <em>standard</em>\nde qualidade (e eu aceito isso de ânimo leve), não digas que preciso de mais tempo para pensar e refletir no assunto.\nAjuda-me, dá-me luzes, encaminha-me numa direção. Já nem peço que sugiras soluções, apenas rogo que apontes o que pode ser\nmelhorado. Não sejas vago. Critica, mas critica objetivamente. Com clareza.</p>\n\n<p>Não leves tudo o que disse a peito. Comecei este desabafo a falar em respeito e assim o termino. O respeito está lá, em\nmenor quantidade, mas existe. Não sou pessoa de guardar rancor. Mas também não digo religiosamente <em>amén</em> a todas as tuas doutrinas.</p>\n\n<p>E sim, continuo a aprender contigo, diariamente, coisas boas e más. O que me leva a pensar que, se calhar, até estás a fazer\nbem o teu trabalho.</p>\n\n<p>Cordialmente,</p>\n\n<p>Um Engenheiro de <em>Software</em></p>\n\n<p><em>P.S.: Se marcas uma reunião para discutirmos um documento, por favor, tira 30 minutos antes para realmente leres a\nporra do documento!</em></p>\n"
    }
  

  
    ,{
      "title"			: "Os 5 Mandamentos Dos Projetos Académicos",
      "link"			: "https://nextcommit.github.io/blog/os-5-mandamentos-dos-projetos-academicos/",
      "excerpt"		: "Como um projeto académico é e... não devia ser",
      "date"      : " 9 janeiro 2016",
      "content"   : "<p>Todos nós já passamos por algumas destas situações. Fazer um projeto académico é um desafio educativo, científico, mas,\nprincipalmente, de paciência. Ainda assim, o resultado é, na maioria das vezes, bastante positivo.</p>\n\n<p>Ora o nosso projeto não funciona (e nós não sabemos o porquê), ora funciona (e também não sabemos como). Aqui ficam, inspirado\npela <a href=\"http://www.slideshare.net/slideshow/embed_code/42740442\">apresentação</a> de dois professores da <em>FEUP</em>, os 5 mandamentos\ndos projetos académicos.</p>\n\n<h1 id=\"amar-o-nosso-cdigo-sobre-todas-as-coisas\">1. Amar o nosso código sobre todas as coisas</h1>\n\n<p>O nosso colega de grupo não sabe o (pouco) que faz. O nosso código é muito melhor, mais conciso e auto-explicativo que o dele.\nIsto porque nós fomos a mais duas aulas teóricas do que ele (e as que faltamos, demos um relance sobre os <em>slides</em> enquanto estávamos\nna fila para a cantina).</p>\n\n<p>Quando temos (e tentamos evitar ao máximo!) que mexer no código feito por ele, primeiro há que ultrapassar as dificuldades\nda formatação do código (que não estão ao nosso gosto), ao mesmo tempo que se perdem horas a fio a fazer <em>refactoring</em> ao código\ndele. Quem, no seu perfeito juízo, tem coragem de produzir código sem deixar a última linha do ficheiro em branco?</p>\n\n<p>Quando ele descobre um <em>bug</em> no nosso código, ou sugere uma pequena alteração que permite facilitar-nos a vida, temos que garantir que\nficou claro que levamos isso como um ataque pessoal. Afinal, temos a certeza que ele passou horas a testar todos os casos-limite!\nDepois, seguir os passos:</p>\n\n<ol>\n  <li>Perder horas a discutir pormenores desnecessários, utilizando expressões como “<em>eu não percebo muito disto, mas acho que…</em>”\ne “<em>eu fiz assim porque… e da forma que tu dizes só fica mais otimizado; o output é o mesmo</em>”.</li>\n  <li>Não se chegar a conclusão nenhuma, apesar de ninguém ceder (e nós já percebemos que ele tem razão).</li>\n  <li>Continuar a desenvolver o projeto, cada um para seu lado.</li>\n  <li>Aproveitar um <em>commit</em> grande para, no meio de tanta alteração, corrigir o tal <em>bug</em> ou implementar a tal pequena otimização.</li>\n  <li>Guardar a <em>hash</em> do <em>commit</em> e, se necessário, recuperar este assunto no próximo projeto e de como “<em>da outra vez fui eu\nque cedi</em>”.</li>\n</ol>\n\n<h1 id=\"no-usar-o-santo-nome-da-framework-em-vo\">2. Não usar o santo nome da <em>framework</em> em vão</h1>\n\n<p>“<em>Não gosto desta framework. Nunca gostei.</em>” Só a estamos a usar porque o nosso colega foi o primeiro a tomar a iniciativa.\nÉ muito grande, cheia de pastas, separada em muitos ficheiros com nomes complicados e nada sugestivos. Preferia a <em>nossa</em>\nestrutura do projeto anterior, que só tinha dois ficheiros (um nosso e um dele). O nosso colega queixava-se que o <em>IDE</em> dele ficava lento a abrir\naqueles ficheiros com 2000 linhas, mas isso é porque ele é pobre, tem um computador fraco e não usa o <em>IntelliJ</em>.</p>\n\n<p>Era só vantagens: estava tudo à mão, não tínhamos que estar à procura de nada, sabíamos exatamente onde estavam as coisas. Ou estava\nnum ficheiro, ou estava no outro. E até já sabíamos que a função <code>print_posts_from_db_on_screen2</code> (que por alguma razão imprimia\nem duplicado) estava entre as linhas 825 e 1337!</p>\n\n<h1 id=\"no-cobiar-os-projetos-alheios\">3. Não cobiçar os projetos alheios</h1>\n\n<p>A comunidade científica sempre apelou à partilha de conhecimento. Aliás, a participação em projetos <em>open-source</em> é algo que\nestá na nossa <em>to-do list</em> já há muito tempo. Esses sim, são projetos bem feitos, arquitetados e documentados.</p>\n\n<p>O outro grupo nosso amigo (sim, aquele que tem sempre 18) já fez o projeto há muito tempo. Até implementaram funcionalidades extra\nque não eram pedidas (mas que eles acharam relevantes), como se o professor valorizasse isso. Otários.</p>\n\n<p>De certeza que não há problema em lhes pedir o projeto deles para “comparar pequenos detalhes”. Além disso, sempre nos disseram\nque ler o código de outras pessoas é uma atividade lúdica.</p>\n\n<p>Agora que percebemos a estratégia que o outro grupo utilizou, basta esperar pela intervenção divina (ver mandamento #5) e o nosso\nprojeto está feito! Olha, esta função aposto que vai ser igual em todos os trabalhos, mais vale não perder tempo e usá-la no nosso.\nCopiemos o código e os comentários, para se mais tarde precisarmos de rever aquele código, não termos de ir ver ao projeto deles de novo.\nConcerteza que antes de entregarmos o nosso trabalho nos vamos lembrar de retirar os comentários. Otários.</p>\n\n<h1 id=\"no-testar-nem-causar-semelhante-transtorno-no-server-ou-no-client-neste-projeto-ou-no-prximo\">4. Não testar (nem causar semelhante transtorno, no <em>server</em> ou no <em>client</em>, neste projeto ou no próximo)</h1>\n\n<p>Testar é uma seca. Mas pior do que testar é ter que escrever os testes. Se fosse só carregar numa tecla, esperar uns segundos, e\n“aquilo” ficar tudo verde, ainda se compreendia… Para além disso, este pedaço de código é tão simples (e bem feito) que\nnão vemos forma de futuros <em>commits</em> o comprometerem.</p>\n\n<p>Quando na noite anterior à entrega, e depois de uma epifania da qual resultaram milhares de linhas de código (e novas funcionalidades),\nas funcionalidades antigas deixam de funcionar, culpamos a <em>framework</em> (que é bastante confusa), a linguagem (que é considerada pelos mais\nimportantes filósofos, desde há milhares de anos, como falível) e, claro, o nosso colega. Não fazemos sequer ideia qual a alteração que\nfoi crítica, pois o último <em>commit</em> tem como mensagem <code>first commit, initial setup</code> e o nosso querido colega está a escrever o relatório.\nMais vale dar <code>ctrl+z</code> até funcionar de novo.</p>\n\n<p>No fim, chegamos, inevitavelmente, sempre há mesma conclusão: se nem o professor vai testar, porque é que nós o haveríamos?</p>\n\n<h1 id=\"a-grande-expanso-ou-o-big-bang\">5. A Grande Expansão (ou o Big Bang)</h1>\n\n<p>O código está em expansão. Disso nenhum de nós tem dúvidas. Mas para evitar contrariar as leis da física, também esta\nexpansão deve ser lenta e gradual, possivelmente infinita. Quando a data de entrega se aproxima, de tão pequeno e condensado\nque o projeto se encontra, dá-se o <em>Big Bang</em>, a grande explosão, numa corrida contra-relógio para se evitar o <em>Big Crush</em>.</p>\n"
    }
  

  
    ,{
      "title"			: "Pensar Grande, Construir Pequeno",
      "link"			: "https://nextcommit.github.io/blog/pensar-grande-construir-pequeno/",
      "excerpt"		: "Como um projeto pode falhar mesmo antes de começar",
      "date"      : "28 dezembro 2015",
      "content"   : "<p>Da mesma forma que um jogador de futebol quer pôr em prática nos jogos aquilo que aprende ao longo dos treinos, também o\ntípico estudante de informática tem a vontade de mostrar que é capaz de pôr o conhecimento que adquiriu ao longo dos anos\nem prática. Eu não sou exceção.</p>\n\n<p>Esta é a história de como (mais) um projeto para os tempos livres ficou pelo caminho. Os ingleses gostam de lhe chamar\n<em>Post-mortem</em>.</p>\n\n<h1 id=\"a-ideia\">A Ideia</h1>\n\n<p>Como é normal, todo este projeto começa por uma ideia. Por mais simples que ela seja, a ideia é o ponto de partida para\no <em>brainstorming</em> e, portanto, ter a ideia clara e concisa é essencial para a conseguir transmitir a outras pessoas.</p>\n\n<p>A ideia não necessita de ser original, mas deve acrescentar valor a soluções já existentes, até porque ter uma ideia original não é,\nobviamente, fácil. Mas nem esse foi o objetivo inicial. O objetivo inicial sempre foi construir algo que pudesse pôr em\nprática os conhecimentos aprendidos ao longo dos anos. E isso significa que este projeto não nasceu de uma ideia, mas, ao contrário,\na ideia nasceu da necessidade de desenvolver um projeto.</p>\n\n<p>Usando uma metáfora da biologia, tal como <em>Lamark</em> explicava que determinados caracteres eram adquiridos por necessidade, também a ideia\npara este projeto surgiu pela necessidade de ter haver uma ideia para se poder desenvolver um projeto. E começar um projeto sem\numa ideia é como marcar um casamento sem primeiro saber a opinião do parceiro: é bem provável que esteja destinado ao fracasso.</p>\n\n<p>Terminando a metáfora: a ideia deve aparecer, assim como Darwin explicou para a biologia através da seleção natural, de uma\nforma natural e espotânea. A ideia pode aparecer enquanto falamos com um amigo (foi assim que surgiu este <a href=\"/sobre\">blog</a>), enquanto\nutilizamos um determinado serviço e nos deparamos com a falta da funcionalidade <em>X</em> ou quando damos por nós a pensar a\nmítica frase “era tão fixe se aqui se pudesse fazer X” (não esqueci que muitas das ideias aparecem enquanto relaxamos a tomar banho,\nas chamadas <em>shower thoughts</em>).</p>\n\n<h1 id=\"a-viso\">A Visão</h1>\n\n<p>Ter uma ideia é o primeiro passo, mas para a partir da ideia se conseguir construir uma visão, simples e concisa, é necessário\nconseguir delinear o âmbito (<em>scope</em>) do nosso projeto.</p>\n\n<p>Se a ideia é o ponto de partida para o <em>brainstorming</em> de funcionalidades, a visão demonstra que o resultado desse\n<em>brainstorming</em> foi digerido, pelo que algumas ideias daí resultantes foram aproveitadas, outras reajustadas e, a maioria\ndelas, descartadas.</p>\n\n<p>Construir a visão de um projeto não deve ser só uma formalidade. Deve sim ser um passo que é dado e que permite à equipa\nestar sincronizada sobre as prioridades desse projeto e como se vai acrescentar valor à solução a ser desenvolvida.</p>\n\n<p>Idealmente a visão é o alicerce de um projeto e a pedra angular sobre a qual este é construído. Se determinada <em>feature</em>\nfaz, ou não, sentido na nossa aplicação, é uma pergunta que apareceu ao longo desta experiência e que poderia ser respondida\ncaso existisse uma visão clara, sólida e concisa do projeto.</p>\n\n<p>A visão permite, ainda, que a equipa consiga estabelecer o chamado <em><a href=\"http://www.allaboutagile.com/definition-of-done-10-point-checklist/\">Definition of Done</a></em> (<em>DoD</em>), permitindo manter, com\nconsistência, a qualidade ao longo de toda a aplicação.</p>\n\n<h1 id=\"a-equipa\">A Equipa</h1>\n\n<p>Tratando-se de um projeto para ser desenvolvido nos tempos livres, o projeto passou rapidamente de algo pessoal para uma\nequipa de 3 pessoas. Desenvolver um projeto em equipa envolve, antes de tudo, conseguir explicar a ideia do projeto. A visão,\nportanto. E isso implica ter uma ideia muito concreta, desenvolvida e matura.</p>\n\n<p>Trabalhar em equipa fornece a um projeto uma visão mais alargada, permitindo que a ideia original seja iterada várias vezes,\ncriando várias vezes a discussão de se determinada funcionalidade deve, ou não, ser incluída.</p>\n\n<h1 id=\"a-stack-tecnolgica\">A <em>Stack</em> Tecnológica</h1>\n\n<p>Encontrar uma <em>stack</em> tecnológica para desenvolver o projeto significou balancear três grandes variaveis:</p>\n\n<ul>\n  <li>As tecnologias que são necessárias/ideais para desenvolver o projeto.</li>\n  <li>As tecnologias que cada membro da equipa sabe/tem experiência.</li>\n  <li>O quanto cada pessoa está disposta a sair da sua zona de conforto e aprender uma tecnologia nova.</li>\n</ul>\n\n<p>Conseguir conjugar estas três variáveis foi, na verdade, algo mais simples do que estava à espera. Muitas das vezes esta <em>stack</em>\né imposta ao <em>developer</em>, mas nos projetos pessoais temos sempre a liberdade de nos podermos aventurar em novas tecnologias.</p>\n\n<h1 id=\"a-comunicao\">A Comunicação</h1>\n\n<p>A comunicação entre a equipa deve ser algo que permita a várias pessoas trabalharem à distância e com horários diferentes,\ntal como um projeto deste tipo obriga. Apesar do <em>Skype</em> ser a ferramenta mais utilizada para conversação por áudio, o <em><a href=\"https://slack.com/\">Slack</a></em>\né, sem dúvida, uma ferramenta muito boa e que funcionou bastante bem entre nós. As integrações do <em><a href=\"https://slack.com/\">Slack</a></em> com as diversas plataformas,\ncomo por exemplo <em>GitHub</em> e <em><a href=\"http://www.pivotaltracker.com/\">PivotalTracker</a></em>, permitem que todas as pessoas estejam <em>up-to-date</em> com o estado atual do projeto.</p>\n\n<h1 id=\"a-gesto-de-expectativas\">A Gestão de Expectativas</h1>\n\n<p>Quando se desenvolve um projeto nos tempos livres (“na brincadeira”, como se diz na gíria) é normal não existir uma data limite para\nlançar o projeto. Neste caso tal não era verdade: devido ao mercado e à situação a que se destinada, era necessário ter uma\nprimeira versão funcional em pouco mais de um mês.</p>\n\n<p>Levou algum tempo a configurar o ambiente de desenvolvimento e até configuramos <em>bots</em> de <em>deploy</em> automático para os <em>droplets</em> do\n<em>DigitalOcean</em> (o que veio a revelar-se tempo “perdido”); configuramos várias integrações entre os vários serviços\n(repositório <em>Git</em>, <em><a href=\"https://slack.com/\">Slack</a></em>, <em><a href=\"https://www.visualstudio.com/en-us/products/visual-studio-team-services-vs.aspx\">VSOnline</a></em>, <em>Git Flow</em>, etc). Não queríamos só fazer o projeto, queríamos ter um bom processo por\ndetrás do projeto, configurar serviços, automatizar ações. E isso levou a que a margem da manobra para cumprir o prazo\nficasse ainda mais curta.</p>\n\n<p>À medida que a data limite se aproximava e “arranjar” tempo livre para o projeto se tornava complicado, era psicologicamente\ndesgastante e desmoralizante ter que cortar funcionalidades de forma a conseguir terminar a tempo. E há medida que se foi cortando\nfuncionalidades, perdia-se valor da solução, e perder valor era mais uma “facada” psicológica. E repete-se o ciclo.</p>\n\n<h1 id=\"think-it-big-build-it-small\"><em>Think it big, build it small</em></h1>\n\n<p>Esta é a grande lição que aprendi e, por conseguinte, a mensagem que quero passar. Pensamos o sistema bastante completo e tentamos\nimplementar essa grande complexidade de uma só vez. Para o conseguir (dentro da data limite), era necessário dispender mais tempo\ndo que aquele que, efetivamente, tínhamos disponível. E a falta de progresso à medida que o prazo se aproxima é demasiado\ndesmoralizante. Ao fim de alguns “cortes”, acabamos por desistir.</p>\n\n<p>Não podia haver melhor maneira de aprender o porquê do <em>scrum</em> propôr <em>sprints</em> de 1 a 2 semanas e de se investir na integração\ncontínua. Humanamente, é bastante moralizante ver um projeto a avançar sem ter que contar linhas de código, mas vendo pequenas <em>features</em>\na serem integradas, aos poucos, no produto.</p>\n\n<p>É importante pensar em grande, pensar como a aplicação vai escalar, como se comporta com 10 e com 10 000 pessoas, mas principalmente\npensar em pequenas <em>features</em> com funcionalidades básicas e, a partir daí, iterá-las (quantas vezes necessárias), de forma a que\na cada iteração a sua funcionalidade se aproxime cada vez mais da visão do projeto. Primeiro o rascunho e só depois a obra de arte.</p>\n\n<p>Resumindo: arquitetar a solução em grande plano é importante, mas começar a construí-la com pequenos passos incrementais é fundamental.\nNão só para validação da ideia/conceito, mas porque ter resultados visíveis permite-nos ganhar força e motivação para continuar.\nAtenção: isto não significa construir a aplicação mal. Que seja clara a diferença entre uma má arquitetura e uma\nprova de conceito com potencialidade para crescer.</p>\n\n<h1 id=\"o-sentido-pedaggico\">O Sentido Pedagógico</h1>\n\n<p>Como é claro, nem tudo foi em vão! Para além da forte componente pedagógica de aprender com os erros, fazer <em>deploy</em> de uma\naplicação é muito mais do implementar funcionalidades. A experiência ganha ao arquitetar a solução e pensar como encaixar as várias\n“peças do <em>puzzle</em>” é um dos elementos que distingue um Engenheiro Informático.</p>\n\n<p>Quanto à componente de gestão de projeto, principalmente ao nível da visão e da definição de prioridades, fiquei rendido ao chamado\n<em><a href=\"https://en.wikipedia.org/wiki/Elevator_pitch\">pitch de elevador</a></em>.</p>\n\n<p>Costuma-se dizer que se demora 10% do tempo a fazer 90% do código e 90% do tempo a terminar os restantes 10%. É importante, até mesmo num\nprojeto menos sério (como este desenvolvido nos tempos livres) traçar metas e objetivos, sob pena de ser mais um projeto que ficará,\ninevitavelmente, a meio. Mas também é importante não ter datas tão restritivas e inflexíveis. Aproveitemos os projetos pessoais para aplicar\na máxima “<em>done when it’s done</em>”.</p>\n\n"
    }
  

  
    ,{
      "title"			: "Olá Mundo",
      "link"			: "https://nextcommit.github.io/blog/ola-mundo/",
      "excerpt"		: "Bem-vindos ao Next Commit!",
      "date"      : " 5 dezembro 2015",
      "content"   : "<p>Caros leitores, sejam bem-vindos ao <em>Next Commit</em>!</p>\n\n<p>Antes de mais, as mais sinceras desculpas pela escolha de um nome inglês para um <em>blog</em> escrito em português de Portugal.</p>\n\n<h2 id=\"int-main-int-argc-char-argv\">int main (int argc, char** argv)</h2>\n\n<p>Aqui podem esperar encontrar artigos sobre programação e tecnologia, escritos de <em>developer</em> para <em>developer</em>.</p>\n\n<p>O <em>Next Commit</em> é o resultado da falta de informação especializada para <em>developers</em> em português de Portugal, em contraste com a grande e variada cobertura que está disponível em inglês.\nEste panorama parece contra-intuitivo, principalmente quando a <a href=\"http://www.forbes.com/sites/alisoncoleman/2015/08/23/portugal-discovers-its-spirit-of-entrepreneurial-adventure/\">Forbes</a> ainda há poucos meses atrás deu destaque ao <em>boom</em> português.</p>\n\n<h2 id=\"printfol-mundon\">printf(“Olá Mundo!\\n”);</h2>\n\n<p>Não podia deixar de aproveitar esta formalidade informática para dar a conhecer a todos os amantes de <em>python</em> este <a href=\"https://benkurtovic.com/2014/06/01/obfuscating-hello-world.html\">fantástico código</a> de obfuscação.</p>\n\n<h2 id=\"return-0\">return 0;</h2>\n\n<p>Vêmo-nos no próximo <em>commit</em>!</p>\n\n"
    }
  

]
